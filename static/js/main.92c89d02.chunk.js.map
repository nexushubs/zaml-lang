{"version":3,"sources":["../../zaml-parser/lib/util.js","Pane.tsx","codemirror-mode.ts","SourceEditor.tsx","VisualNode.tsx","VisualEditor.tsx","logo.svg","TreeNode.tsx","TreePathItem.tsx","TreePath.tsx","TreeToolbar.tsx","TreeView.tsx","Editor.tsx","sample/contract.ts","App.tsx","serviceWorker.ts","index.tsx","../../zaml-parser/lib/index.js","../../zaml-parser/lib/constants.js","../../zaml-parser/lib/Node.js","../../zaml-parser/lib/TextStream.js","../../zaml-parser/lib/Tokenizer.js","../../zaml-parser/lib/TextLine.js","../../zaml-parser/lib/ParseError.js"],"names":["_interopRequireWildcard","__webpack_require__","Object","defineProperty","exports","value","formatValue","parseValue","P_DATE_FORMAT","test","Date","spacer","stringify","node","options","indent","arguments","length","undefined","pos","text","_","isNumber","space","defaults","_constants","DEFAULT_INDENT_SPACES","simple","toSource","simpleTag","isSimpleTag","start","textStart","type","_Node","NodeType","TEXT","content","isEmpty","metadata","T_METADATA_MARKER","T_LINE_BREAK","each","key","concat","default","ENTITY","child","first","children","Error","T_ENTITY_START","T_ENTITY_END","TAG","isBlock","T_TAG_START","name","listCount","keys","attributes","forEach","i","T_SPACE","isBoolean","labels","label","T_TAG_END","PARAGRAPH","isWrappingTag","subText","next","nextSibling","trimEnd","isLastChild","isBlockTag","T_TAG_CLOSING","end","textEnd","replace","isDate","toISOString","isString","P_STRING_LITERAL_UNQUOTED_TESTER","JSON","isNaN","Infinity","repeat","Pane","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","title","className","react_default","a","createElement","classNames","React","Component","defaultProps","CodeMirror","defineSimpleMode","regex","token","dedent","comment","meta","dontIndentStates","lineComment","codeMirrorOptions","mode","lineNumbers","lineWrapping","SourceEditor","_this","state","nextProps","height","editor","setSize","_this2","onChange","react_codemirror2","onBeforeChange","data","setState","_onChange","_x","_x2","_x3","apply","toString","editorDidMount","zaml","VisualNode","handleContextMenu","event","onContextMenu","preventDefault","stopPropagation","n","parent","element","_this$props2","selectedNode","selected","ROOT","node-name","node-id","id","href","url","assign","push","map","block","toLowerCase","VisualEditor","ContextMenuTarget","currentNode","onSelect","selection","window","getSelection","rangeCount","range","getRangeAt","commonNode","getNodeByElement","commonAncestorContainer","startNode","startContainer","endNode","endContainer","startPath","path","indexOf","endPath","blockName","isRoot","create","_sort","childIndex","sort","_sort2","slicedToArray","startIndex","endIndex","index","childNode","appendChild","insertAt","target","anchorNode","focusNode","createEntities","startOffset","endOffset","alert","removeEntity","VisualNode_VisualNode","root","nodeType","TEXT_NODE","classList","contains","parentElement","getAttribute","getNodeById","e","commonEntityNames","wrapperNode","menu","menuItem","disabled","descriptor","menuDivider","onClick","handleCreateBlock","handleCreateEntity","prompt","handleRemoveEntity","handleInspect","_extends","source","prototype","hasOwnProperty","NodePart","_ref","_ref2","fill","d","_ref3","_ref4","cx","cy","r","_ref5","_ref6","x","y","width","rx","ry","_ref7","_ref8","points","logo_SvgComponent","data-name","viewBox","p","nil","TreeNode","_selectedPart","selectedPart","expandedNodes","onSelectPart","onExpansionChange","onMouseEnter","onMouseOut","expanded","Whole","Header","commonProps","_onMouseEnter","_onMouseOut","react","onlyText","isEntity","isTag","firstChild","nameStart","nameEnd","node-selected","truncate","Footer","TreePathItem","TreePath","nodeList","buildNodeList","includes","list","unshift","TreePathItem_TreePathItem","TreeToolbar","TreeView","toConsumableArray","without","console","log","nodeIds","union","onHover","_this$state","TreeToolbar_TreeToolbar","TreeNode_TreeNode","handleExpansionChange","TreePath_TreePath","Node","parse","err","createChild","message","Editor","sourcePaneHeight","onResize","throttle","bind","assertThisInitialized","addEventListener","passive","removeEventListener","innerHeight","hoveredNode","index_esm","split","defaultSize","minSize","Pane_Pane","SourceEditor_SourceEditor","VisualEditor_VisualEditor","TreeView_TreeView","contract","App","Editor_Editor","newValue","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_interopRequireDefault","tokenize","enumerable","get","_Tokenizer","_TextStream","TextLine","process","warn","_default","Tokenizer","TextStream","PROCESSING_TIMEOUT","P_MARKER","END_MARKERS","START_MARKERS","P_FULL_WIDTH_CHARACTER","P_BOOLEAN_FALSE","P_BOOLEAN_TRUE","P_STRING_LITERAL_UNQUOTED","P_STRING_LITERAL_QUOTED","P_NUMBER_LITERAL","P_NUMBER_START","P_DATE_LITERAL","T_STRING_START","P_TAG_NAME","P_ATTRIBUTE_LIST","P_ATTRIBUTE_NAME","P_ATTRIBUTE_ASSIGN","P_LABEL_NAME","P_LABEL_START","P_LIST_SEPARATOR","P_WHITE_SPACES_EXT","P_WHITE_SPACE","P_PARAGRAPH_BREAK","P_SPACE_WRAPPED_LINE_BREAK","P_LINE_BREAK","P_ASSIGN_YAML","T_TAG_ATTRIBUTE_FAVORED_ASSIGN","T_METADATA_FAVORED_ASSIGN","T_PARAGRAPH_BREAK","T_LINE_BREAKS","T_ASSIGN_YAML","T_ASSIGN_XML","P_MULTIPLE_LINE_COMMENT","T_SINGLE_LINE_COMMENT","T_TAB","createPattern","combinePatterns","isRegExp","escapeRegExp","join","flags","RegExp","find","_find","WrappingTags","BlockTags","BlockNodeTypes","NodeTypes","_regenerator","_asyncToGenerator2","_toConsumableArray2","_objectSpread2","_classCallCheck2","_createClass2","_defineProperty2","_util","_2","nanoid","values","defaultFinderCallback","testNode","pattern","isFunction","is","TypeError","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","return","_findOne","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","parseJson","json","parseJsonMap","childData","normalize","toJsonMap","mapValues","toJSON","isPlainObject","_options$source","_options$start","_options$end","states","_options$attributes","_options$metadata","_options$labels","_options$content","_options$text","_source","appendText","FRAGMENT","COMMENT","isArray","n1","n2","path1","path2","createBlockByTextRange","findCommonAncestor","expression","toUpperCase","substr","validNode","pull","_this$children","splice","removeChild","ref","validParent","refIndex","newChild","oldChild","insertBefore","validChild","replaceChild","set","merge","has","unset","isObject","selector","one","intersection","findBy","hasChild","findTextByRange","callback","fragment","createFragment","substring","items","entityNodes","sortBy","lastPos","item","entityNode","replaceWith","entities","_this3","cache","Map","textNode","_extractEntities","mark","_callee","extractor","textList","wrap","_context","prev","extract","sent","stop","prevNode","previousSibling","nextNode","_options$position","position","_options$textPosition","textPosition","omitBy","isUndefined","rootNode","getRootNode","last","siblings","_TextLine","_chalk","LINE_BREAKS","tabSize","lines","markers","cursorStack","init","matched","offset","ln","lastIndex","exec","_text","_text2","lineOffsetIndexes","lineIndex","sortedLastIndex","line","col","trimSpaces","_this$getPosition","getPosition","trimStart","_this$getPosition2","charAt","ok","ch","lastMatch","chr","string","eat","eof","peek","caseInsensitive","left","_options$toEOL","toEOL","_options$toEOF","toEOF","_options$consume","consume","_options$skipMatched","skipMatched","_this$search","search","readTo","nextLine","read","_options$consume2","_this$search2","marker","extend","_data","pop","trim","numWidth","bgBlue","blueBright","padStart","_this$getPosition5","slice","max","min","l","isCurrent","debugLine","debugCursor","State","_ParseError","stateNames","getStateName","countLineBreaks","stream","defaultOptions","verbose","NODE_ENV","PUBLIC_URL","DEBUG","parsed","_console","timeStart","now","METADATA","lastState","unwrapped","inline","embedded","isClosing","nodeStack","getNodeString","debugStack","lastNode","stack","cyanBright","green","redBright","grey","pushNode","debug","popNode","error","createError","levelUpBlock","blockNode","FINISH","magenta","debugState","eatWhile","ATTRIBUTE_LIST","NORMAL","sol","eol","isInlineBlock","START","SINGLE_COMMENT","MULTIPLE_COMMENT","TAG_START","TAG_END","ENTITY_START","END","TAG_NAME","LABEL_START","_child","metaKey","pushCursor","tagName","popCursor","_child2","simpleBlock","spacePattern","spaces","isParsingMetadata","endOfFrontMatter","lineBreaks","_child3","clearLabels","clearMetadata","ATTRIBUTE_ASSIGN","ATTRIBUTE_NAME","_key","_ch2","ATTRIBUTE_FINISH","eatSpaces","ATTRIBUTE_VALUE","_ch3","_value","parseFloat","isNull","_key2","_value2","setMetadata","setAttribute","parseMetadata","tagNode","setAttributes","ENTITY_END","skipOver","addLabel","_child4","ENTITY_BODY","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_assertThisInitialized2","_wrapNativeSuper2","ParseError","_Error"],"mappings":"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","file":"static/js/main.92c89d02.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatValue = formatValue;\nexports.parseValue = parseValue;\nexports.spacer = spacer;\nexports.stringify = stringify;\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Node = _interopRequireWildcard(require(\"./Node\"));\n\nvar P_DATE_FORMAT = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z$/;\n/**\n * Stringify attribute value\n * @param value \n */\n\nfunction formatValue(value) {\n  if (_.isDate(value)) {\n    return value.toISOString().replace(/T00:00:00\\.000Z$/, '');\n  } else if (_.isString) {\n    return _constants.P_STRING_LITERAL_UNQUOTED_TESTER.test(value) ? value : JSON.stringify(value);\n  } else if (_.isBoolean(value)) {\n    return JSON.stringify(value);\n  } else if (_.isNumber(value) && !_.isNaN(value) && value !== Infinity || value !== -Infinity) {\n    return JSON.stringify(value);\n  } else {\n    return null;\n  }\n}\n/**\n * Parse attribute value\n * @param value \n */\n\n\nfunction parseValue(value) {\n  if (P_DATE_FORMAT.test(value)) {\n    return new Date(value);\n  }\n\n  return value;\n}\n/**\n * Generate indent spaces\n * @param space \n * @param indent \n */\n\n\nfunction spacer(space, indent) {\n  if (indent <= 0) return '';\n  return _.repeat(_constants.T_SPACE, space * indent);\n}\n/**\n * Stringify node\n * @param node \n * @param [options]\n * @param [options.space] White spaces each indent\n * @param [options.simple] Enable simple block when suitable\n * @param [options.toSource] To ZAML source code\n * @param [indent] Initial indent, increases 1 each block\n * @param Initial position\n */\n\n\nfunction stringify(node, options) {\n  var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n  var pos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var text = '';\n\n  if (_.isNumber(options)) {\n    options = {\n      space: options\n    };\n  }\n\n  options = _.defaults(options, {\n    space: _constants.DEFAULT_INDENT_SPACES,\n    simple: false,\n    toSource: false\n  });\n  var simpleTag = options.simple && node.isSimpleTag;\n\n  if (options.toSource) {\n    node.start = pos;\n  } else {\n    node.textStart = pos;\n  }\n\n  if (node.type === _Node.NodeType.TEXT) {\n    text += node.content;\n  } else {\n    if (options.toSource && !_.isEmpty(node.metadata)) {\n      text += _constants.T_METADATA_MARKER + _constants.T_LINE_BREAK;\n\n      _.each(node.metadata, function (value, key) {\n        text += \"\".concat(key, \": \");\n\n        if (value instanceof _Node.default) {\n          text += stringify(value, options, 0, pos + text.length);\n        } else {\n          text += formatValue(value);\n        }\n\n        text += _constants.T_LINE_BREAK;\n      });\n\n      text += _constants.T_METADATA_MARKER + _constants.T_LINE_BREAK;\n    }\n\n    if (node.type === _Node.NodeType.ENTITY) {\n      var child = _.first(node.children);\n\n      if (!child) {\n        throw new Error('missing text node of entity');\n      }\n\n      if (options.toSource) {\n        text += _constants.T_ENTITY_START;\n      }\n\n      text += stringify(child, options, indent, pos + text.length);\n\n      if (options.toSource) {\n        text += _constants.T_ENTITY_END;\n      }\n    }\n\n    if (options.toSource && (node.type === _Node.NodeType.TAG || node.type === _Node.NodeType.ENTITY)) {\n      if (node.isBlock) {\n        text += spacer(options.space, indent);\n      }\n\n      if (!(simpleTag && node.children.length === 1)) {\n        text += _constants.T_TAG_START;\n      }\n\n      if (!simpleTag) {\n        text += node.name;\n      }\n\n      var listCount = 0;\n\n      _.keys(node.attributes).forEach(function (key, i) {\n        var value = node.attributes[key];\n        listCount++;\n\n        if (!simpleTag || listCount > 1) {\n          text += _constants.T_SPACE;\n        }\n\n        if (_.isBoolean(value) && value) {\n          text += key;\n        } else if (value instanceof _Node.default) {\n          text += stringify(node, options, 0, pos + text.length);\n        } else {\n          text += \"\".concat(key, \"=\").concat(formatValue(value));\n        }\n      });\n\n      _.each(node.labels, function (label, i) {\n        listCount++;\n\n        if (!simpleTag || listCount > 1) {\n          text += _constants.T_SPACE;\n        }\n\n        text += \"#\".concat(label);\n      });\n\n      text += simpleTag ? _constants.T_SPACE : _constants.T_TAG_END;\n\n      if (node.isBlock) {\n        text += _constants.T_LINE_BREAK;\n      }\n    }\n\n    if (options.toSource && node.type === _Node.NodeType.PARAGRAPH) {\n      text += spacer(options.space, indent);\n    }\n\n    if (node.isBlock || node.isWrappingTag && !_.isEmpty(node.children)) {\n      node.children.forEach(function (child) {\n        var subText = stringify(child, options, indent + 1, pos + text.length);\n        text += subText;\n      });\n    }\n\n    var next = node.nextSibling;\n\n    if (node.isBlock) {\n      if (options.toSource) {\n        text = _.trimEnd(text, _constants.T_LINE_BREAK);\n      }\n\n      text += _constants.T_LINE_BREAK;\n\n      if (node.type === _Node.NodeType.PARAGRAPH && !node.isLastChild) {\n        text += _constants.T_LINE_BREAK;\n      }\n    }\n\n    if (options.toSource && node.isWrappingTag) {\n      if (node.isBlockTag) {\n        text += spacer(options.space, indent);\n      }\n\n      if (simpleTag) {\n        if (node.children.length > 1) {\n          text += _constants.T_TAG_END;\n        }\n      } else {\n        text += _constants.T_TAG_START + _constants.T_TAG_CLOSING + node.name + _constants.T_TAG_END;\n      }\n\n      if (node.isBlockTag) {\n        text += _constants.T_LINE_BREAK;\n\n        if (next && next.isBlock) {\n          text += _constants.T_LINE_BREAK;\n        }\n      }\n    }\n  }\n\n  if (options.toSource) {\n    node.end = node.start + text.length;\n  } else {\n    node.textEnd = node.textStart + text.length;\n  }\n\n  return text.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n');\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './Editor.css';\n\ninterface Props {\n  title: string;\n  className: string;\n}\n\nexport default class Pane extends React.Component<Props> {\n\n  static propTypes = {\n    title: PropTypes.string,\n    className: PropTypes.string,\n  }\n\n  static defaultProps: Props = {\n    title: 'pane',\n    className: '',\n  }\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const { title, className, children } = this.props;\n    return (\n      <div className={classNames('pane', className)}>\n        <div className=\"pane-title\"><h2>{title}</h2></div>\n        <div className=\"pane-content\">\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n","import CodeMirror from 'codemirror';\nimport 'codemirror/addon/mode/simple';\n\n// https://codemirror.net/demo/simplemode.html\n// TODO support error linting\n\n(CodeMirror as any).defineSimpleMode(\"zaml\", {\n  // The start state contains the rules that are initially used\n  start: [\n    // Block labels\n    {regex: /#[^#\\s\\n}]+/, token: 'variable-3'},\n    // Entity tag & block tag without attributes\n    {regex: /{\\/?([^\\s}]+)}/, token: 'keyword'},\n    // attribute names\n    {regex: /[^\\s{\\n]+(?=[:：=][^\\n])/, token: 'variable-2'},\n    // Block brackets\n    {regex: /{|}/, token: 'def'},\n    // Block starting tag\n    {regex: /(?={)[^\\s}]+/, token: 'keyword'},\n    // Entity text content\n    {regex: /\\[[^\\]]+\\]/, token: \"string\"},\n    // Block tag\n    {regex: /(?:BLOCK|INLINE)\\b/, token: \"keyword\"},\n    // Special values\n    {regex: /true|false|null|undefined/, token: \"atom\"},\n    // Numbers\n    {regex: /0x[a-f\\d]+|[-+]?(?:\\.\\d+|\\d+\\.?\\d*)(?:e[-+]?\\d+)?/i, token: \"number\"},\n    // Single line comment\n    {regex: /~[^~].*/, token: \"comment\"},\n    // Multi-line comment start\n    {regex: /~~~/, token: \"comment\", next: \"comment\"},\n    // ?\n    {regex: /\\/(?:[^\\\\]|\\\\.)*?\\//, token: \"variable-3\"},\n    // Intends\n    {regex: /[\\{]/, indent: true},\n    {regex: /[\\}]/, dedent: true},\n    // {regex: /[a-z$][\\w$]*/, token: \"variable\"},\n    // {regex: /<</, token: \"meta\", mode: {spec: \"xml\", end: />>/}}\n  ],\n  // The multi-line comment state.\n  comment: [\n    // Multi-line comment ends\n    {regex: /.*?~~~/, token: \"comment\", next: \"start\"},\n    // Multi-line comment continues\n    {regex: /.*/, token: \"comment\"}\n  ],\n  // The meta property contains global information about the mode. It\n  // can contain properties like lineComment, which are supported by\n  // all modes, and also directives like dontIndentStates, which are\n  // specific to simple modes.\n  meta: {\n    dontIndentStates: [\"comment\"],\n    lineComment: \"~\"\n  }\n});\n","import React from 'react';\nimport PropTypes, { number } from 'prop-types';\nimport classNames from 'classnames';\nimport codemirror from 'codemirror';\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport './codemirror-mode';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\n\ninterface Props {\n  value: string;\n  height: number;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  value: string;\n}\n\nconst codeMirrorOptions: codemirror.EditorConfiguration = {\n  mode: 'zaml',\n  lineNumbers: true,\n  lineWrapping: true,\n};\n\nexport default class SourceEditor extends React.Component<Props, State> {\n\n  static propTypes = {\n    value: PropTypes.string,\n    height: PropTypes.number,\n    onChange: PropTypes.func,\n  }\n\n  static defaultProps: Props = {\n    value: '',\n    height: -1,\n    onChange: () => {},\n  }\n\n  public editor?: CodeMirror.Editor;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      value: props.value,\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.height !== nextProps.height && this.editor) {\n      this.editor.setSize(null, nextProps.height);\n    }\n  }\n\n  render() {\n    const { onChange } = this.props;\n    const { value } = this.state;\n    return (\n      <div className=\"zaml-source\">\n        <CodeMirror\n          value={value}\n          options={codeMirrorOptions}\n          onBeforeChange={(editor, data, value) => this.setState({ value })}\n          onChange={(editor, data, value) => onChange(value)}\n          editorDidMount={editor => this.editor = editor}\n        />\n      </div>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport classNames from 'classnames';\nimport './VisualNode.css';\n\nconst { NodeType } = zaml;\n\nconst nil = () => {};\n\ninterface Props {\n  node?: zaml.Node;\n  selectedNode?: zaml.Node;\n  onContextMenu: (event: React.MouseEvent, node: zaml.Node) => void;\n}\n\nexport default class VisualNode extends React.Component<Props> {\n\n  static propTypes = {\n  }\n\n  static defaultProps: Props = {\n    onContextMenu: nil,\n  }\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  handleContextMenu = (event: React.MouseEvent) => {\n    const { node, onContextMenu } = this.props;\n    event.preventDefault();\n    event.stopPropagation();\n    let n = node;\n    if (n && n.type === NodeType.TEXT) {\n      n = n.parent;\n    }\n    if (n) {\n      onContextMenu(event, n);\n    }\n  }\n\n  render() {\n    const { node, selectedNode } = this.props;\n    let element: string | null;\n    if (!node) return null;\n    const selected = node === selectedNode;\n    let children: any = [];\n    if (node.type === NodeType.ROOT) {\n      element = 'div';\n    } else if (node.type === NodeType.PARAGRAPH) {\n      element = 'p';\n    } else if (node.type === NodeType.TEXT) {\n      element = 'span';\n    } else if (node.type === NodeType.ENTITY) {\n      if (node.name === 'LINK') {\n        return (\n          <a\n            className=\"zaml-entity\"\n            node-name=\"link\"\n            node-id={node.id}\n            href={node.attributes.url}\n          >\n            <VisualNode\n              node-id={node.children[0].id}\n              {...this.props}\n              node={node.children[0]}\n            />\n          </a>\n        );\n      } else {\n        element = 'span';\n      }\n    } else if (node.type === NodeType.TAG) {\n      // children.push(\n      //   <span key=\"attributes\" className=\"attributes\">{node.name}</span>\n      // );\n      if (node.isBlock) {\n        element = 'div';\n      } else {\n        element = 'span';\n      }\n    } else {\n      element = null;\n    }\n    if (!element) {\n      return null;\n    }\n    if (!_.isEmpty(node.children)) {\n      children.push(\n        <span key=\"children\" className=\"children\">\n          {_.map(node.children, (child, i) => (\n            <VisualNode {...this.props} key={i} node={child} />\n          ))}\n        </span>\n      );\n    } else if (node.type === 'text') {\n      children.push(\n        node.content\n      );\n    }\n    return React.createElement(element, {\n      className: classNames('zaml-node', `${node.type}`, { block: node.isBlock, selected }),\n      'node-name': node.name && node.name.toLowerCase(),\n      'node-id': node.id,\n      // onContextMenu: this.handleContextMenu,\n    }, children);\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes, { node } from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport { ContextMenuTarget, Menu, MenuItem, MenuDivider } from \"@blueprintjs/core\"\nimport VisualNode from './VisualNode';\nimport './VisualEditor.css';\nimport 'react-contexify/dist/ReactContexify.min.css';\n\nconst { NodeType } = zaml;\n\ninterface Props {\n  commonEntityNames?: string[];\n  node?: zaml.Node;\n  selectedNode?: zaml.Node;\n  onSelect: (node?: zaml.Node) => void;\n}\n\ninterface State {\n}\n\n@ContextMenuTarget\nexport default class VisualEditor extends React.Component<Props, State> {\n\n  static propTypes = {\n    commonEntityNames: PropTypes.arrayOf(PropTypes.string),\n    node: PropTypes.shape({}),\n    selectedNode: PropTypes.shape({}),\n    onSelect: PropTypes.func,\n  }\n\n  static defaultProps: Props = {\n    commonEntityNames: ['PER', 'ORG', 'LOC', 'DATE'],\n    onSelect: () => {},\n  }\n\n  public currentNode?: zaml.Node;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  handleContextMenu = (event: React.MouseEvent, node?: zaml.Node) => {\n    this.currentNode = node;\n    this.setState({ node });\n  }\n\n  handleCreateBlock() {\n    const { onSelect } = this.props;\n    const selection = window.getSelection();\n    if (selection.rangeCount === 0) return;\n    const range = selection.getRangeAt(0);\n    const commonNode = this.getNodeByElement(range.commonAncestorContainer as HTMLElement);\n    let startNode = this.getNodeByElement(range.startContainer as HTMLElement);\n    let endNode = this.getNodeByElement(range.endContainer as HTMLElement);\n    if (!commonNode || !startNode || !endNode) {\n      return;\n    }\n    let block = commonNode;\n    if (startNode === endNode) {\n\n    } else {\n      const startPath = startNode.path;\n      startNode = startPath[startPath.indexOf(commonNode) + 1];\n      const endPath = endNode.path;\n      endNode = endPath[endPath.indexOf(commonNode) + 1];\n      const blockName = (commonNode.isRoot || commonNode.isBlockTag) ? 'BLOCK' : 'INLINE';\n      block = zaml.Node.create(NodeType.TAG, blockName);\n      const [startIndex, endIndex] = [startNode.childIndex, endNode.childIndex].sort();\n      for (let index = startIndex; index <= endIndex; index += startIndex < endIndex ? 1 : -1) {\n        const childNode = commonNode.children[index];\n        block.appendChild(childNode);\n      }\n      commonNode.insertAt(block, startIndex);\n    }\n    onSelect(block);\n  }\n\n  handleCreateEntity(target: zaml.Node, name: string | null) {\n    const { onSelect } = this.props;\n    if (!name) return;\n    const selection = window.getSelection();\n    if (selection.anchorNode !== selection.focusNode) {\n      alert('Entity is only allowed in pure text!');\n      return;\n    }\n    if (selection.rangeCount === 0) return;\n    const range = selection.getRangeAt(0);\n    const entityNodes = target.createEntities([{\n      type: name,\n      start: range.startOffset,\n      end: range.endOffset,\n    }]);\n    onSelect(entityNodes[0]);\n  }\n\n  handleRemoveEntity(node?: zaml.Node) {\n    const { onSelect } = this.props;\n    if (!node) return;\n    const textNode = node.removeEntity();\n    onSelect(textNode);\n  }\n\n  handleInspect(node: zaml.Node) {\n    const { onSelect } = this.props;\n    onSelect(node);\n  }\n\n  render() {\n    const { node, selectedNode, onSelect } = this.props;\n    return (\n      <div className=\"zaml-visual-editor\">\n        <VisualNode\n          node={node}\n          selectedNode={selectedNode}\n          // onContextMenu={this.handleContextMenu}\n        />\n      </div>\n    )\n  }\n\n  getNodeByElement(element: HTMLElement) {\n    const { node: root } = this.props;\n    if (!root) return undefined;\n    if (element.nodeType === element.TEXT_NODE || element.classList.contains('children')) {\n      if (!element.parentElement) {\n        return undefined;\n      }\n      element = element.parentElement;\n    }\n    const id = element.getAttribute('node-id');\n    if (!id) return undefined;\n    return root.getNodeById(id);\n  }\n\n  renderContextMenu(e: React.MouseEvent<HTMLElement>) {\n    const { commonEntityNames } = this.props;\n    const target = this.getNodeByElement(e.target as HTMLElement);\n    let node = target;\n    if (!target) return;\n    if (target.type === NodeType.TEXT) {\n      node = target.parent;\n    }\n    if (!node) return;\n    const wrapperNode = node;\n    return (\n      <Menu id=\"menu\">\n        <MenuItem disabled text={node.descriptor} />\n        <MenuDivider />\n        <MenuItem\n          text=\"Create Block\"\n          onClick={() => this.handleCreateBlock()}\n        />\n        {target.type === NodeType.TEXT && target.parent && target.parent.type !== NodeType.ENTITY &&\n          <MenuItem text=\"Create Entity\">\n            {commonEntityNames && commonEntityNames.map(name => (\n              <MenuItem\n                key={name}\n                text={name}\n                onClick={() => this.handleCreateEntity(target, name)}\n              />\n            ))}\n            <MenuItem\n              text=\"other...\"\n              onClick={() => this.handleCreateEntity(target, prompt('Please input entity type', 'PER'))}\n            />\n          </MenuItem>\n        }\n        {node.type === NodeType.ENTITY &&\n          <MenuItem\n            text=\"Remove Entity\"\n            onClick={() => this.handleRemoveEntity(node)}\n          />\n        }\n        <MenuDivider />\n        <MenuItem\n          text=\"Inspect\"\n          onClick={() => this.handleInspect(wrapperNode)}\n        />\n      </Menu>\n    );\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"title\", null, \"ZAML-logo\");\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M132.27,162.53,182.46,35.88h10.68L242.7,162.53h-9.83L216.64,122H158.11l-16.23,40.58Zm81.16-48.7L187.38,45.7l-26.7,68.13Z\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M404.81,35.88h8.54V154.42h68.14v8.12H404.81Z\"\n});\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"circle\", {\n  fill: \"#fff\",\n  cx: 91,\n  cy: 44.5,\n  r: 4\n});\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M115.47,35.5h-5a54.66,54.66,0,0,0-1-10.36c-1.07-4.28-6.09-10.34-6.3-10.6l-1.5-1.8-5.3,11.14-1-2c-2.21-4.43-10.89-7.42-11.87-7.75l-2.19-.73L83.4,35.5H36v0c-7.77.27-14,11.14-14,19s6.23,9.71,14,10v0H89.75L22.31,154.42v8.12h92.32l4.23.11S121,159.5,121,153.5s-3.4-15-12.5-15c-6.78,0-14.5,5-23.5,7S60,147.3,54.63,147c5.75-5.44,12.61-12,19.66-19H92.56l.42-.37c1-.87,24.31-21.36,30.37-34.5s7.1-54.83,7.14-56.59l0-1.59ZM49.84,147.41c-3.23-.24-7.53-.76-9.84-1.91a10.79,10.79,0,0,1-4.46-3.93l9.58-12.91,22.46,1.73C61.06,136.77,54.88,142.66,49.84,147.41ZM95,63.5s-1.76-7.52-1-10c1-3.4,7.94-10.83,12-15h8.53c0,.53,0,1.17,0,1.9l-.1.41C109,43.74,97.93,51.53,97,53.5S96.52,61,99.31,64.66c-1.35-.1-2.72-.27-4-.44l-.09-.06A4.8,4.8,0,0,0,95,63.5ZM109,76a79.27,79.27,0,0,1-9,2.49c-5,1-13,0-13,0l3-8s11,0,15-1a22.68,22.68,0,0,0,6.55-3.2C110.86,69.46,110,72.72,109,76ZM100,55.5c1.27-4.12,11.13-10.58,14.13-12.46l.28,1.1c-.09,2-.25,4.37-.5,7-4.19,1.21-7.81,2.49-8.57,3.26-1.53,1.54-2.77,6.17-1.83,10.35a22.78,22.78,0,0,1-2.67,0C100.42,62.8,99.38,57.51,100,55.5Zm12.46,6.2a52.93,52.93,0,0,1-7,2.68c.39-2.42,1.09-5.83,2-7.11s3.41-2.62,6.16-3.69C113.36,56.12,113,58.85,112.46,61.7ZM93.9,103.48l-2.23,2.41c-2.73.33-7.34.94-10.66,1.61-5,1-14-1-14-1l5-7s10,2,15,2a46.82,46.82,0,0,0,9.79-1.43Q95.42,101.83,93.9,103.48Zm-18,18.63c-2.09.61-8.46,2.39-10.95,2.39-3,0-11-2-11-2l6-7s10,1,14,1c2.58,0,7.21-1.62,10.2-2.77C81.48,116.53,78.72,119.34,75.95,122.11Zm20.16-16.6.2-.23v0l13.94,1c-1.5,1.69-3,3.36-4.58,5L92.86,109C94,107.83,95,106.67,96.1,105.52Zm3.83-4.64c.83-1.11,1.63-2.24,2.39-3.39l15.58-.87a80.42,80.42,0,0,1-5,6.6Zm2.14-8.73c-2.72.92-7.36,2.36-10.07,2.36-4,0-14-2-14-2l4-7s12,1,17,0a29.42,29.42,0,0,0,7.62-2.87A78.48,78.48,0,0,1,102.07,92.14Zm8.3-10.92,13.49-1.45c-.29,1.68-.6,3.27-.94,4.76L109,84.78Q109.71,83,110.37,81.23Zm1.71-5q.37-1.21.71-2.4l12.31-2.66c-.18,1.52-.38,3-.59,4.49Zm13.51-9.45-11.44,1.84q.49-2.1.88-4.1l11-2.33C125.89,63.65,125.75,65.19,125.59,66.73Zm.8-9-10.45,1.6c.27-1.72.49-3.39.68-5L126.78,52C126.67,53.82,126.54,55.73,126.39,57.69Zm.64-10-9.91,1.46c.11-1.41.2-2.73.26-3.94l9.86-1.83C127.19,44.71,127.12,46.16,127,47.72Zm.35-7.55-9.85,1.1c0-.86,0-1.62,0-2.27l.54-2.71,9.36,1.76C127.44,38.62,127.41,39.35,127.38,40.17ZM103,22.5c1.6,2.16,2.45,2.8,3,5a38,38,0,0,1,1.48,7.5L95,34.5Zm-16-1c2.86,1.2,5.92,2.84,7,5l.57,1.12L91.15,34.8,86.36,35Zm-14.15,40c2.93-3.55,7-9.51,6.15-11s-9.88-8.63-14.57-12h5c3.95,2.86,15,11.13,16.6,15,.66,1.62-2.73,5.58-5,8Zm-8.69,0c2.51-3.93,6.93-11.56,5.59-14.49-1.2-2.61-7.5-6.27-11.75-8.51h4.38C65.77,41,74.46,47.72,76,51.5c.7,1.73-3,7.1-5.09,10ZM58.29,44.86c-1.17-2.24-4.34-4.68-6.84-6.36h5c3.41,2.86,9.22,8,9.44,10s-1.62,9.22-2.66,13H53.83C55.92,57,59.82,47.78,58.29,44.86ZM49.73,38.5c1.57,2.07,3.73,5.17,4,6.9.34,2.07-.46,11.5-.89,16.1H44.16c2.25-4,6.89-12.79,5.84-16a25.41,25.41,0,0,0-4.36-7ZM38,38.5h6.64c1.16,2.25,2.5,5.21,2.5,6.8,0,2.17-2.5,11.94-3.61,16.2H38a33,33,0,0,0,2-11A43.6,43.6,0,0,0,38,38.5Zm45.1,23c3.13-3,7.22-8,6.58-9.11-1.23-2.1-11.76-9.83-18.09-13.89h33.72C100.81,42.24,93.63,48.44,92.43,51c-1.05,2.24-1.78,8.57,1.36,12.27L91,61.5ZM91.43,125H77.3c3.76-3.75,7.52-7.58,11.15-11.36l13.63,1.29C97.09,119.91,92.76,123.82,91.43,125Zm28.4-31.54-14.58-.89q.75-1.37,1.44-2.76l15.15-1.15a26.58,26.58,0,0,1-1.19,3.21C120.4,92.39,120.12,92.92,119.83,93.46Z\"\n});\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  fill: \"#fff\",\n  x: 255,\n  y: 36.5,\n  width: 14.69,\n  height: 15,\n  rx: 1.5,\n  ry: 1.5\n});\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  fill: \"#fff\",\n  x: 258.07,\n  y: 55.56,\n  width: 8.54,\n  height: 106.97\n});\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"polygon\", {\n  fill: \"#fff\",\n  points: \"364.01 35.88 317.88 151.85 274.33 42.9 274.33 64.8 313.82 162.53 321.72 162.53 368.93 45.7 368.93 162.53 377.47 162.53 377.47 35.88 364.01 35.88\"\n});\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    viewBox: \"0 0 500 180\"\n  }, props), _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8);\n};\n\nexport default __webpack_public_path__ + \"static/media/logo.b94cec94.svg\";\nexport { SvgComponent as ReactComponent };","import _ from 'lodash';\nimport * as React from 'react';\nimport PropTypes, { node } from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport classNames from 'classnames';\nimport './TreeNode.css';\n\nconst { NodeType } = zaml;\n\nexport enum NodePart {\n  Header = 'header',\n  Footer = 'footer',\n  Whole = 'whole',\n}\n\nconst nil = () => {};\n\ninterface Props {\n  node?: zaml.Node;\n  expandedNodes: string[];\n  selectedNode?: zaml.Node;\n  selectedPart?: NodePart;\n  onSelect: (node: zaml.Node) => void;\n  onSelectPart: (selectedPart: NodePart) => void;\n  onExpansionChange: (node: zaml.Node, expanded: boolean) => void;\n  onMouseEnter: (node:zaml.Node) => void;\n  onMouseOut: (node:zaml.Node) => void;\n}\n\ninterface State {\n}\n\nexport default class TreeNode extends React.Component<Props, State> {\n\n  static propTypes = {\n    node: PropTypes.shape({})\n  }\n\n  static defaultProps: Props = {\n    node: undefined,\n    expandedNodes: [],\n    selectedNode: undefined,\n    selectedPart: NodePart.Whole,\n    onSelect: nil,\n    onSelectPart: nil,\n    onExpansionChange: nil,\n    onMouseEnter: nil,\n    onMouseOut: nil,\n  }\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      node,\n      selectedNode,\n      selectedPart: _selectedPart,\n      expandedNodes,\n      onSelect,\n      onSelectPart,\n      onExpansionChange,\n      onMouseEnter,\n      onMouseOut,\n    } = this.props;\n    if (!node) return null;\n    let selectedPart = _selectedPart;\n    const expanded = expandedNodes.indexOf(node.id) > -1 || node.isRoot;\n    if (expanded && selectedPart === NodePart.Whole) {\n      selectedPart = NodePart.Header;\n    }\n    const selected = selectedNode === node;\n    const onClick = (selectedPart: NodePart) => (event: React.MouseEvent) => {\n      event.stopPropagation();\n      onSelect(node);\n      onSelectPart(selectedPart);\n    };\n    const commonProps = {\n      onMouseEnter: (event: React.MouseEvent) => {\n        event.stopPropagation();\n        onMouseEnter(node);\n      },\n      onMouseOut: (event: React.MouseEvent) => {\n        event.stopPropagation();\n        onMouseOut(node);\n      },\n    }\n    let children: any = null;\n    if (!_.isEmpty(node.children)) {\n      children = (\n        <div key=\"children\" className=\"children\">\n          {_.map(node.children, (child, i) => <TreeNode {...this.props} key={i} node={child} />)}\n        </div>\n      );\n    } else if (node.type === 'text') {\n      children = node.content;\n    }\n    if (node.type === NodeType.TEXT) {\n      return (\n        <div\n          className={classNames('text', { selected })}\n          onClick={onClick(NodePart.Whole)}\n          {...commonProps}\n        >\n          \"{node.content}\"\n        </div>\n      )\n    } else if (node.type === NodeType.ENTITY || node.isBlock || node.isWrappingTag) {\n      const isEntity = node.type === NodeType.ENTITY;\n      const isTag = node.type === NodeType.TAG;\n      let onlyText: string | undefined;\n      if (node.children.length === 1 && (node.firstChild as zaml.Node).type === NodeType.TEXT) {\n        onlyText = (node.firstChild as zaml.Node).content;\n      }\n      const nameStart = isEntity ? '[' : isTag ? '{' : '<';\n      const nameEnd = isEntity ? ']' : isTag ? '}' : '>';\n      let name = (isTag || isEntity) ? node.name : node.type;\n      return (\n        <div\n          className={classNames('block', {\n            expanded,\n            selected: selected && selectedPart === NodePart.Whole,\n            'node-selected': selected,\n          })}\n          onClick={expanded ? undefined : onClick(NodePart.Whole)}\n          {...commonProps}\n        >\n          {node.type !== NodeType.ROOT && (\n            <span\n              className=\"indicator\"\n              onClick={(event) => {\n                event.stopPropagation();\n                onExpansionChange(node, !expanded);\n              }}\n            >▾</span>\n          )}\n          <span\n            className={classNames('header', { selected: selected && selectedPart === NodePart.Header })}\n            onClick={expanded ? onClick(NodePart.Header) : undefined}\n          >\n            {nameStart}\n            {name}\n            {node.labels.map(label => (\n              <span key={label} className=\"prop label\">#{label}</span>\n            ))}\n            {_.keys(node.attributes).map(key => {\n              const value = node.attributes[key];\n              return (\n                <span key={key} className=\"prop attribute\">\n                  <span className=\"key\">{key}</span>\n                  <span className=\"assignment\">=</span>\n                  <span className=\"value\">{JSON.stringify(value)}</span>\n                </span>\n              );\n            })}\n            {nameEnd}\n          </span>\n          {expanded ? children : (\n            <span className=\"ellipsis\">{_.truncate(onlyText, { length: 10 }) || '...'}</span>\n          )}\n          <span\n            className={classNames('footer', { selected: selected && selectedPart === NodePart.Footer })}\n            onClick={expanded ? onClick(NodePart.Footer) : undefined}\n          >\n            {nameStart}\n            /\n            {name}\n            {nameEnd}\n          </span>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport * as zaml from '@zaml/parser';\nimport { NodePart } from './TreeNode';\nimport './TreeView.css';\n\nconst { NodeType } = zaml;\n\ninterface Props {\n  selected: boolean;\n  node?: zaml.Node;\n  onClick: () => void;\n}\n\nexport default class TreePathItem extends React.Component<Props> {\n\n  static propTypes = {\n    node: PropTypes.shape({})\n  }\n\n  static defaultProps: Props = {\n    selected: false,\n    node: undefined,\n    onClick: () => {},\n  }\n\n  render() {\n    const { selected, node, onClick } = this.props;\n    if (!node) {\n      return null;\n    }\n    return (\n      <span\n        className={classNames('zaml-tree-path-item', node.type, { selected })}\n        onClick={onClick}\n      >\n        {node.descriptor}\n      </span>\n    )\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport TreeNode, { NodePart } from './TreeNode';\nimport './TreeView.css';\nimport TreePathItem from './TreePathItem';\n\ninterface Props {\n  selectedNode?: zaml.Node;\n  onSelect: (node: zaml.Node) => void;\n}\n\ninterface State {\n  nodeList: zaml.Node[];\n}\n\nexport default class TreePath extends React.Component<Props, State> {\n\n  static propTypes = {\n    node: PropTypes.shape({})\n  }\n\n  static defaultProps: Props = {\n    selectedNode: undefined,\n    onSelect: () => {},\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      nodeList: this.buildNodeList(props.selectedNode),\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { nodeList } = this.state;\n    const node = nextProps.selectedNode;\n    if (!node) {\n      this.setState({\n        nodeList: [],\n      });\n    } else if (!_.includes(nodeList, node)) {\n      this.setState({\n        nodeList: this.buildNodeList(node),\n      });\n    }\n  }\n\n  buildNodeList(node: zaml.Node | undefined) {\n    let list: zaml.Node[] = [];\n    while (node) {\n      list.unshift(node);\n      node = node.parent;\n    }\n    return list;\n  }\n\n  render() {\n    const { selectedNode, onSelect } = this.props;\n    const { nodeList } = this.state;\n    return (\n      <div className=\"zaml-tree-path\">\n        {nodeList.map(n => (\n          <TreePathItem\n            key={n.id}\n            selected={n === selectedNode}\n            node={n}\n            onClick={() => onSelect(n)}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport './TreeView.css';\n\ninterface Props {\n}\n\nexport default class TreeToolbar extends React.Component<Props> {\n\n  static propTypes = {\n  }\n\n  static defaultProps: Props = {\n  }\n\n  state = {\n  };\n\n  render() {\n    return (\n      <div className=\"zaml-tree-toolbar\">\n        toolbar\n      </div>\n    )\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport TreeNode, { NodePart } from './TreeNode';\nimport './TreeView.css';\nimport TreePath from './TreePath';\nimport { nodeEquals } from './utils';\nimport TreeToolbar from './TreeToolbar';\n\ninterface Props {\n  node?: zaml.Node;\n  selectedNode?: zaml.Node;\n  onSelect: (node: zaml.Node) => void;\n  onHover: (node?: zaml.Node) => void;\n}\n\ninterface State {\n  selectedPart: NodePart,\n  expandedNodes: string[];\n}\n\nconst nil = () => {}\n\nexport default class TreeView extends React.Component<Props, State> {\n\n  static propTypes = {\n    node: PropTypes.shape({})\n  }\n\n  static defaultProps: Props = {\n    onSelect: nil,\n    onHover: nil,\n  }\n\n  state = {\n    selectedPart: NodePart.Header,\n    expandedNodes: [],\n  };\n\n  handleExpansionChange(node: zaml.Node, expanded: boolean) {\n    const { selectedNode } = this.props;\n    const { expandedNodes } = this.state;\n    if (selectedNode === node) {\n      this.setState({\n        selectedPart: expanded ? NodePart.Header : NodePart.Whole,\n      });\n    }\n    if (expanded && !_.includes(expandedNodes, node.id)) {\n      this.setState({\n        expandedNodes: [...expandedNodes, node.id],\n      });\n    } else if (!expanded && _.includes(expandedNodes, node.id)) {\n      this.setState({\n        expandedNodes: _.without(expandedNodes, node.id),\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { selectedNode } = nextProps;\n    console.log(selectedNode);\n    if (selectedNode && selectedNode !== this.props.selectedNode) {\n      const { expandedNodes } = this.state;\n      const nodeIds = selectedNode.path.map(n => n.id);\n      this.setState({\n        expandedNodes: _.union(expandedNodes, nodeIds),\n      });\n    }\n  }\n\n  render() {\n    const { node, selectedNode, onSelect, onHover } = this.props;\n    const { expandedNodes, selectedPart } = this.state;\n    return (\n      <div className=\"zaml-tree-view\">\n        <TreeToolbar />\n        <div className=\"tree\">\n          <TreeNode\n            node={node}\n            selectedNode={selectedNode}\n            selectedPart={selectedPart}\n            expandedNodes={expandedNodes}\n            onSelect={onSelect}\n            onSelectPart={p => this.setState({ selectedPart: p })}\n            onMouseEnter={onHover}\n            onMouseOut={() => onHover()}\n            onExpansionChange={(n: zaml.Node, expanded: boolean) => this.handleExpansionChange(n, expanded)}\n          />\n        </div>\n        <TreePath\n          selectedNode={selectedNode}\n          onSelect={onSelect}\n        />\n      </div>\n    )\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes, { node } from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport SplitPane from 'react-split-pane';\nimport Pane from './Pane';\nimport SourceEditor from './SourceEditor';\nimport VisualEditor from './VisualEditor';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport './Editor.css';\nimport { ReactComponent as Logo } from './logo.svg';\nimport TreeView from './TreeView';\n\nconst { Node, NodeType } = zaml;\n\ninterface Props {\n  className: string;\n  value: string;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  node: zaml.Node;\n  sourcePaneHeight: number;\n  selectedNode?: zaml.Node;\n  hoveredNode?: zaml.Node;\n}\n\nconst parse = (source: string) => {\n  let node = Node.create(NodeType.ROOT);\n  try {\n    node = zaml.parse(source);\n  } catch(err) {\n    node.createChild(NodeType.PARAGRAPH, undefined, { text: `Error: ${err.message}` });\n  }\n  return node;\n}\n\nexport default class Editor extends React.Component<Props, State> {\n\n  static propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n  }\n\n  static defaultProps: Props = {\n    value: '',\n    className: '',\n    onChange: () => {},\n  }\n\n  constructor(props: Props) {\n    super(props);\n    const node = parse(props.value);\n    this.state = {\n      node,\n      sourcePaneHeight: -1,\n    };\n    this.onResize = _.throttle(this.onResize.bind(this), 500);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.onResize, { passive: true });\n    this.onResize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.value !== nextProps.value) {\n      this.setState({\n        node: parse(nextProps.value),\n      });\n    }\n  }\n\n  onResize() {\n    const height = window.innerHeight - 60;\n    this.setState({\n      sourcePaneHeight: height,\n    });\n  }\n\n  render() {\n    const { value, onChange } = this.props;\n    const { node, sourcePaneHeight, selectedNode, hoveredNode } = this.state;\n    return (\n      <div className=\"zaml-editor\">\n        <header>\n          <a className=\"project-link\" href=\"https://github.com/nexushubs/zaml-lang/tree/master/packages/zaml-editor\"><Logo className=\"logo\" /> Editor</a>\n          <a className=\"github-link\" href=\"https://github.com/nexushubs/zaml-lang\">View on Github</a>\n        </header>\n        <section className=\"editor-panes\">\n          <SplitPane\n            split=\"vertical\"\n            defaultSize=\"33.33%\"\n            minSize={200}\n          >\n            <Pane title=\"Source\">\n              <SourceEditor\n                value={value}\n                height={sourcePaneHeight - 40}\n                onChange={onChange}\n              />\n            </Pane>\n            <SplitPane split=\"vertical\" defaultSize=\"50%\">\n              <Pane title=\"Visual\">\n                <VisualEditor\n                  node={node}\n                  selectedNode={hoveredNode || selectedNode}\n                  onSelect={n => this.setState({ selectedNode: n })}\n                />\n              </Pane>\n              <Pane title=\"AST\">\n                <TreeView\n                  node={node}\n                  selectedNode={selectedNode}\n                  onSelect={n => this.setState({ selectedNode: n })}\n                  onHover={n => this.setState({ hoveredNode: n })}\n                />\n              </Pane>\n            </SplitPane>\n          </SplitPane>\n        </section>\n      </div>\n    );\n  }\n}\n","export default \n`#各方基本信息\n甲方：[北京星核软件有限公司]{ORG}\n统一社会信用代码：[345976348]{SOC}\n法定代表人：[张鸿峰]{PER}\n地址：[北京市朝阳区方恒国际D座2806]{LOC}\n乙方：[孙继顺]{PER}\n身份证号：[230101197701018888]{ID}\n手机号：[13945018888]{MOBILE}\n---\n\n甲乙双方经友好协商，达成如下协议。\n\n#标的.租赁 #描述\n一、{#标的.租赁 #描述.地址 #描述.数量 甲方租赁乙方所有的位于[北京市朝阳区南磨房路37号]{LOC}门市房[一间]{QT}}。{#描述.面积 使用面积为[105平方米]{AREA}}。{#标的.租赁.租期 租期为[2019年1月1日]{DATE}至[2019年12月31日]{DATE}}；{#标的.租赁.租金 租金为[十万元人民币]{MONEY value=100000}}。\n\n#标的.租赁.用途\n二、该门市房的用途为新注册公司的经营地。\n\n#标的.付款方式.银行 #标的.租赁.计费方式.按月结算\n三、租金按月结算。{#约定.承租方.支付.租金 甲方每月[一日]{DATE}向乙方指定账户一次汇入当月租金。}\n\n#约定.承租方.支付.定金 #事件.合同生效\n四、甲方应于合同生效起[五日内]{DUE}向乙方支付定金[一万元整]{MONEY}。\n\n#约定.出租方.交付.租赁物 #事件.履约.出租方.交付\n五、乙方应在收到定金给交给乙方钥匙用于提前装修。装修费用由甲方自行承担。\n\n#约定\n六、{#约定.承租方.支付.押金 甲方应于[计租日前]{DUE}向乙方支付押金[一万元整]{MONEY}。}{#约定.出租方.返还押金 #事件.合同期满 #事件.合同解除 租赁期满或合同解除后[两日内]{DUE}，乙方应无息返还。}\n\n{#事件.违约 #违约责任\n  七、违约责任\n\n  #事件.违约 #违约.付款方.付款 #违约责任.补偿.违约金 #违约责任.补偿.违约金.计算方式.每逾期一天\n  1. 付款方未按照约定付款的，每逾期[一天]{PERIOD}，应按逾期金额的[1%]{RATE}向收款方支付违约金。\n\n  #事件.违约 #违约.出租方.交付.租赁物 #违约责任.补偿.违约金.计算方式.每逾期一天 #违约责任.补偿.顺延\n  2. 乙方延迟交房的，每逾期[一天]{PERIOD}，应向甲方支付违约金[100元]{DATE}，并将租期做相应的顺延。\n  \n}\n\n{#事件.不可抗力 #约定.解除合同\n  八、发生如下情形，任何一方有权解除合同，并不承担违约责任：\n\n  #事件.不可抗力.政府行为.拆迁\n  1. 该门市房被政府列入拆迁范围；\n\n  #事件.不可抗力.重大灾害\n  2. 发生地震、火灾等不可抗力。\n\n}\n\n#争议解决 #争议解决.方式.法院起诉 #争议解决.地点.合同一方所在地\n九、双方发生争议协调不成的，应向甲方所在地人民法院起诉。\n`;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Editor from './Editor';\nimport contract from './sample/contract';\n\ninterface State {\n  value: string;\n}\n\nclass App extends Component<{}, State> {\n\n  state = {\n    value: contract,\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <div className=\"App\">\n        <Editor value={value} onChange={newValue => this.setState({ value: newValue })} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tokenize = tokenize;\nexports.parse = parse;\nObject.defineProperty(exports, \"Tokenizer\", {\n  enumerable: true,\n  get: function get() {\n    return _Tokenizer.default;\n  }\n});\nObject.defineProperty(exports, \"TextStream\", {\n  enumerable: true,\n  get: function get() {\n    return _TextStream.default;\n  }\n});\nObject.defineProperty(exports, \"TextLine\", {\n  enumerable: true,\n  get: function get() {\n    return _TextStream.TextLine;\n  }\n});\nObject.defineProperty(exports, \"Node\", {\n  enumerable: true,\n  get: function get() {\n    return _Node.default;\n  }\n});\nObject.defineProperty(exports, \"NodeType\", {\n  enumerable: true,\n  get: function get() {\n    return _Node.NodeType;\n  }\n});\nexports.default = void 0;\n\nvar _Tokenizer = _interopRequireDefault(require(\"./Tokenizer\"));\n\nvar _TextStream = _interopRequireWildcard(require(\"./TextStream\"));\n\nvar _Node = _interopRequireWildcard(require(\"./Node\"));\n/**\n * @module @zaml/parser\n * @typicalname parser\n */\n\n/**\n * Parse ZAML source into node\n * @param text ZAML source string\n */\n\n\nfunction parse(text, options) {\n  var tokenizer = new _Tokenizer.default(text, options);\n  return tokenizer.process();\n}\n/**\n * Parse ZAML source into node\n * @deprecated Please use zaml.parse() instead\n * @param {string} text Source string\n */\n\n\nfunction tokenize(text, options) {\n  console.warn('zaml.tokenize() is deprecated, please use zaml.parse() instead');\n  return parse(text, options);\n}\n\nvar _default = {\n  Tokenizer: _Tokenizer.default,\n  TextStream: _TextStream.default,\n  TextLine: _TextStream.TextLine,\n  Node: _Node.default,\n  NodeType: _Node.NodeType,\n  tokenize: tokenize,\n  parse: parse\n};\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PROCESSING_TIMEOUT = exports.P_MARKER = exports.END_MARKERS = exports.START_MARKERS = exports.P_FULL_WIDTH_CHARACTER = exports.P_BOOLEAN_FALSE = exports.P_BOOLEAN_TRUE = exports.P_STRING_LITERAL_UNQUOTED_TESTER = exports.P_STRING_LITERAL_UNQUOTED = exports.P_STRING_LITERAL_QUOTED = exports.P_NUMBER_LITERAL = exports.P_NUMBER_START = exports.P_DATE_LITERAL = exports.T_STRING_START = exports.P_TAG_NAME = exports.P_ATTRIBUTE_LIST = exports.P_ATTRIBUTE_NAME = exports.P_ATTRIBUTE_ASSIGN = exports.P_LABEL_NAME = exports.P_LABEL_START = exports.P_LIST_SEPARATOR = exports.P_WHITE_SPACES_EXT = exports.P_WHITE_SPACE = exports.P_PARAGRAPH_BREAK = exports.P_SPACE_WRAPPED_LINE_BREAK = exports.P_LINE_BREAK = exports.P_ASSIGN_YAML = exports.T_TAG_ATTRIBUTE_FAVORED_ASSIGN = exports.T_METADATA_FAVORED_ASSIGN = exports.T_PARAGRAPH_BREAK = exports.T_LINE_BREAKS = exports.T_LINE_BREAK = exports.T_ASSIGN_YAML = exports.T_ASSIGN_XML = exports.T_TAG_END = exports.T_TAG_CLOSING = exports.T_TAG_START = exports.T_ENTITY_END = exports.T_ENTITY_START = exports.P_MULTIPLE_LINE_COMMENT = exports.T_SINGLE_LINE_COMMENT = exports.T_METADATA_MARKER = exports.T_TAB = exports.T_SPACE = exports.DEFAULT_INDENT_SPACES = exports.createPattern = exports.combinePatterns = void 0;\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar combinePatterns = function combinePatterns(list) {\n  return list.map(function (p) {\n    return _.isRegExp(p) ? p.source : _.escapeRegExp(p);\n  }).join('|');\n};\n\nexports.combinePatterns = combinePatterns;\n\nvar createPattern = function createPattern(source) {\n  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'g';\n  return new RegExp(source, flags);\n};\n\nexports.createPattern = createPattern;\nvar DEFAULT_INDENT_SPACES = 2;\nexports.DEFAULT_INDENT_SPACES = DEFAULT_INDENT_SPACES;\nvar T_SPACE = ' ';\nexports.T_SPACE = T_SPACE;\nvar T_TAB = '\\t';\nexports.T_TAB = T_TAB;\nvar T_METADATA_MARKER = \"---\";\nexports.T_METADATA_MARKER = T_METADATA_MARKER;\nvar T_SINGLE_LINE_COMMENT = '~';\nexports.T_SINGLE_LINE_COMMENT = T_SINGLE_LINE_COMMENT;\nvar P_MULTIPLE_LINE_COMMENT = '~{3,}';\nexports.P_MULTIPLE_LINE_COMMENT = P_MULTIPLE_LINE_COMMENT;\nvar T_ENTITY_START = '[';\nexports.T_ENTITY_START = T_ENTITY_START;\nvar T_ENTITY_END = ']';\nexports.T_ENTITY_END = T_ENTITY_END;\nvar T_TAG_START = '{';\nexports.T_TAG_START = T_TAG_START;\nvar T_TAG_CLOSING = '/';\nexports.T_TAG_CLOSING = T_TAG_CLOSING;\nvar T_TAG_END = '}';\nexports.T_TAG_END = T_TAG_END;\nvar T_ASSIGN_XML = '=';\nexports.T_ASSIGN_XML = T_ASSIGN_XML;\nvar T_ASSIGN_YAML = ':：';\nexports.T_ASSIGN_YAML = T_ASSIGN_YAML;\nvar T_LINE_BREAK = '\\n';\nexports.T_LINE_BREAK = T_LINE_BREAK;\nvar T_LINE_BREAKS = '\\r\\n';\nexports.T_LINE_BREAKS = T_LINE_BREAKS;\nvar T_PARAGRAPH_BREAK = '\\n\\n';\nexports.T_PARAGRAPH_BREAK = T_PARAGRAPH_BREAK;\nvar T_METADATA_FAVORED_ASSIGN = T_ASSIGN_YAML;\nexports.T_METADATA_FAVORED_ASSIGN = T_METADATA_FAVORED_ASSIGN;\nvar T_TAG_ATTRIBUTE_FAVORED_ASSIGN = T_ASSIGN_XML;\nexports.T_TAG_ATTRIBUTE_FAVORED_ASSIGN = T_TAG_ATTRIBUTE_FAVORED_ASSIGN;\nvar P_ASSIGN_YAML = /[:：]/;\nexports.P_ASSIGN_YAML = P_ASSIGN_YAML;\nvar P_LINE_BREAK = /\\r?\\n/g;\nexports.P_LINE_BREAK = P_LINE_BREAK;\nvar P_SPACE_WRAPPED_LINE_BREAK = /\\s*\\n\\s*/g;\nexports.P_SPACE_WRAPPED_LINE_BREAK = P_SPACE_WRAPPED_LINE_BREAK;\nvar P_PARAGRAPH_BREAK = createPattern(\"\".concat(P_LINE_BREAK.source, \"\\\\s*\").concat(P_LINE_BREAK.source));\nexports.P_PARAGRAPH_BREAK = P_PARAGRAPH_BREAK;\nvar P_WHITE_SPACE = /[ \\t]/g;\nexports.P_WHITE_SPACE = P_WHITE_SPACE;\nvar P_WHITE_SPACES_EXT = /[\\s\\r\\n]/g;\nexports.P_WHITE_SPACES_EXT = P_WHITE_SPACES_EXT;\nvar P_LIST_SEPARATOR = /[,，]/g;\nexports.P_LIST_SEPARATOR = P_LIST_SEPARATOR;\nvar P_LABEL_START = /[#＃]/g;\nexports.P_LABEL_START = P_LABEL_START;\nvar P_LABEL_NAME = /(?:[A-Za-z\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uF900-\\uFA6D\\uFA70-\\uFAD9]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])(?:[\\.0-9A-Z_a-z\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uF900-\\uFA6D\\uFA70-\\uFAD9]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])*/g;\nexports.P_LABEL_NAME = P_LABEL_NAME;\nvar P_ATTRIBUTE_ASSIGN = createPattern(\"[\".concat([T_ASSIGN_XML, T_ASSIGN_YAML].join(''), \"]\"), '');\nexports.P_ATTRIBUTE_ASSIGN = P_ATTRIBUTE_ASSIGN;\nvar P_ATTRIBUTE_NAME = createPattern(\"(?:\".concat(P_LABEL_NAME.source, \")(?=\").concat(combinePatterns([P_WHITE_SPACE, P_ATTRIBUTE_ASSIGN, T_TAG_END]), \")\"), 'gu');\nexports.P_ATTRIBUTE_NAME = P_ATTRIBUTE_NAME;\nvar P_ATTRIBUTE_LIST = createPattern(\"(\".concat(P_LABEL_NAME.source).concat(P_ATTRIBUTE_ASSIGN.source, \"|\").concat(P_LABEL_START.source).concat(P_LABEL_NAME.source, \")\"));\nexports.P_ATTRIBUTE_LIST = P_ATTRIBUTE_LIST;\nvar P_TAG_NAME = P_ATTRIBUTE_NAME;\nexports.P_TAG_NAME = P_TAG_NAME;\nvar T_STRING_START = '\"';\nexports.T_STRING_START = T_STRING_START;\nvar P_DATE_LITERAL = /\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))?/g;\nexports.P_DATE_LITERAL = P_DATE_LITERAL;\nvar P_NUMBER_START = /[\\d\\.]/;\nexports.P_NUMBER_START = P_NUMBER_START;\nvar P_NUMBER_LITERAL = /(\\d+|\\d*\\.\\d+|\\d+\\.\\d*)(e\\d+)?/g;\nexports.P_NUMBER_LITERAL = P_NUMBER_LITERAL;\nvar P_STRING_LITERAL_QUOTED = /\"([^\"\\\\]|\\\\.)*\"/g;\nexports.P_STRING_LITERAL_QUOTED = P_STRING_LITERAL_QUOTED;\nvar P_STRING_LITERAL_UNQUOTED = /[^\\s}\"'\\\\\\n]+/g;\nexports.P_STRING_LITERAL_UNQUOTED = P_STRING_LITERAL_UNQUOTED;\nvar P_STRING_LITERAL_UNQUOTED_TESTER = new RegExp(\"^\".concat(P_STRING_LITERAL_UNQUOTED.source, \"$\"));\nexports.P_STRING_LITERAL_UNQUOTED_TESTER = P_STRING_LITERAL_UNQUOTED_TESTER;\nvar P_BOOLEAN_TRUE = /(TRUE|True|true)/g;\nexports.P_BOOLEAN_TRUE = P_BOOLEAN_TRUE;\nvar P_BOOLEAN_FALSE = /(FALSE|False|false)/g;\nexports.P_BOOLEAN_FALSE = P_BOOLEAN_FALSE;\nvar P_FULL_WIDTH_CHARACTER = /(?:[\\xD7\\u2014\\u2026\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3001\\u3002\\u3005\\u3007\\u300A-\\u300D\\u3010\\u3011\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFF01\\uFF03\\uFF05\\uFF06\\uFF08\\uFF09\\uFF0B-\\uFF0D\\uFF1A\\uFF1B\\uFF1D\\uFF1F\\uFF20\\uFFE5]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])/g;\nexports.P_FULL_WIDTH_CHARACTER = P_FULL_WIDTH_CHARACTER;\nvar START_MARKERS = [T_TAG_START, T_ENTITY_START, P_LABEL_START];\nexports.START_MARKERS = START_MARKERS;\nvar END_MARKERS = [T_TAG_END, T_ENTITY_END];\nexports.END_MARKERS = END_MARKERS;\nvar P_MARKER = createPattern(\"(\".concat(combinePatterns([P_PARAGRAPH_BREAK].concat(START_MARKERS, [T_TAG_END, P_MULTIPLE_LINE_COMMENT, T_SINGLE_LINE_COMMENT])), \")\"));\nexports.P_MARKER = P_MARKER;\nvar PROCESSING_TIMEOUT = Infinity;\nexports.PROCESSING_TIMEOUT = PROCESSING_TIMEOUT;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.find = _find;\nexports.default = exports.WrappingTags = exports.BlockTags = exports.BlockNodeTypes = exports.NodeTypes = exports.NodeType = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar _util = require(\"./util\");\n\nvar _2 = require(\".\");\n\nvar nanoid = require('nanoid');\n\nvar NodeType;\nexports.NodeType = NodeType;\n\n(function (NodeType) {\n  NodeType[\"FRAGMENT\"] = \"fragment\";\n  NodeType[\"ROOT\"] = \"root\";\n  NodeType[\"PARAGRAPH\"] = \"paragraph\";\n  NodeType[\"TAG\"] = \"tag\";\n  NodeType[\"ENTITY\"] = \"entity\";\n  NodeType[\"TEXT\"] = \"text\";\n  NodeType[\"COMMENT\"] = \"comment\";\n})(NodeType || (exports.NodeType = NodeType = {}));\n\nvar NodeTypes = _.values(NodeType);\n\nexports.NodeTypes = NodeTypes;\nvar BlockNodeTypes = [NodeType.ROOT, NodeType.PARAGRAPH];\nexports.BlockNodeTypes = BlockNodeTypes;\nvar BlockTags = ['BLOCK', 'QUOTE', 'SECTION', 'HEADER', 'FOOTER'];\nexports.BlockTags = BlockTags;\nvar WrappingTags = BlockTags.concat(['INLINE', 'NUM', 'HEADING']);\nexports.WrappingTags = WrappingTags;\n\nvar defaultFinderCallback = function defaultFinderCallback(node) {\n  return true;\n};\n\nfunction testNode(pattern, node) {\n  if (_.isFunction(pattern)) {\n    return pattern(node);\n  } else if (_.isString(pattern)) {\n    return node.is(pattern);\n  } else {\n    throw new TypeError('invalid finding pattern');\n  }\n}\n/**\n * Recursive node finder\n * @param node Node to find \n * @param pattern Searching pattern\n * @param Node List\n */\n\n\nfunction _find(node) {\n  var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultFinderCallback;\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  if (testNode(pattern, node)) {\n    result.push(node);\n  }\n\n  if (!_.isEmpty(node.children)) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = node.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var childNode = _step.value;\n\n        _find(childNode, pattern, result);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Recursive node finder\n * @param node \n * @param pattern \n */\n\n\nfunction _findOne(node) {\n  var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultFinderCallback;\n\n  if (testNode(pattern, node)) {\n    return node;\n  }\n\n  if (!_.isEmpty(node.children)) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = node.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var childNode = _step2.value;\n\n        var result = _findOne(childNode, pattern);\n\n        if (result) {\n          return result;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    ;\n  }\n\n  return undefined;\n}\n\nfunction parseJson(json) {\n  var node = Node.create(json.type, json.name, {\n    attributes: parseJsonMap(json.attributes),\n    metadata: parseJsonMap(json.metadata),\n    content: json.content\n  });\n\n  if (json.children) {\n    _.each(json.children, function (childData) {\n      node.appendChild(parseJson(childData));\n    });\n  }\n\n  node.normalize();\n  return node;\n}\n/**\n * Map metadata & attributes to JSON\n * @param  map \n */\n\n\nfunction toJsonMap(map) {\n  if (_.isEmpty(map)) {\n    return undefined;\n  }\n\n  return _.mapValues(map, function (value) {\n    if (value instanceof Node) {\n      return value.toJSON();\n    }\n\n    return value;\n  });\n}\n\nfunction parseJsonMap(json) {\n  if (_.isEmpty(json)) {\n    return undefined;\n  }\n\n  return _.mapValues(json, function (value) {\n    if (_.isPlainObject(value)) {\n      return parseJson(value);\n    }\n\n    return (0, _util.parseValue)(value);\n  });\n}\n/**\n * AST node class\n * @class\n */\n\n\nvar Node =\n/*#__PURE__*/\nfunction () {\n  (0, _createClass2.default)(Node, null, [{\n    key: \"create\",\n\n    /**\n     * @param type \n     * @param [name]\n     * @param [options]\n     */\n    value: function create(type, name, options) {\n      return new Node(type, name, options);\n    }\n    /**\n     * Create node instance from ZAML source\n     * @param source \n     */\n\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      return (0, _2.parse)(source);\n    }\n    /**\n     * Create node from json serializable data\n     * @param {object} json \n     * @returns {Node}\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      return parseJson(json);\n    }\n    /**\n     * Creating fragment node\n     * @returns {Node}\n     */\n\n  }, {\n    key: \"createFragment\",\n    value: function createFragment() {\n      return Node.create(NodeType.FRAGMENT);\n    }\n    /**\n     * Check if a node is valid\n     * @param node \n     */\n\n  }, {\n    key: \"validNode\",\n    value: function validNode(node) {\n      if (!(node instanceof Node)) {\n        throw new TypeError('invalid node');\n      }\n    }\n    /**\n     * Check if a node could be parent\n     * @param node \n     */\n\n  }, {\n    key: \"validParent\",\n    value: function validParent(node) {\n      if (!_.isArray(node.children)) {\n        throw new Error('node is not a valid parent');\n      }\n    }\n    /**\n     * Check if a node could be parent\n     * @param node \n     */\n\n  }, {\n    key: \"validChild\",\n    value: function validChild(node) {\n      if (!node.parent) {\n        throw new Error('node is not a valid child');\n      }\n    }\n  }, {\n    key: \"findCommonAncestor\",\n    value: function findCommonAncestor(n1, n2) {\n      var path1 = n1.path;\n      var path2 = n2.path;\n\n      if (!path1.length || !path2.length) {\n        return undefined;\n      }\n\n      var parent;\n\n      for (var i = 0; i < path1.length && i < path2.length; i++) {\n        if (path1[i] !== path2[i]) {\n          break;\n        }\n\n        parent = path1[i];\n      }\n\n      return parent;\n    }\n    /**\n     * Create a block and move nodes or text within the range into it\n     * @param start \n     * @param end \n     */\n\n  }, {\n    key: \"createBlockByRange\",\n    value: function createBlockByRange(range, props) {\n      var startNode = range.startNode,\n          startOffset = range.startOffset,\n          endNode = range.endNode,\n          endOffset = range.endOffset;\n\n      if (!_.isNumber(startOffset) || !_.isNumber(endOffset)) {\n        throw new TypeError('range offset must be number');\n      }\n\n      if (startNode.type !== NodeType.TEXT || endNode.type !== NodeType.TEXT) {\n        throw new TypeError('range node must be text');\n      }\n\n      if (startNode === endNode) {\n        if (startNode.type === NodeType.TEXT) {\n          return startNode.createBlockByTextRange(startOffset, endOffset, props);\n        } else {\n          return undefined;\n        }\n      } else {\n        var commonNode = Node.findCommonAncestor(startNode, endNode);\n        if (!commonNode) return undefined;\n        var startIndex = commonNode.children.indexOf(startNode);\n        var endIndex = commonNode.children.indexOf(endNode);\n\n        if (startIndex >= 0 && endIndex >= 0) {} else {\n          return undefined;\n        }\n      }\n    }\n  }]);\n  /**\n   * @constructor\n   * @param type \n   * @param [name]\n   * @param [options]\n   */\n\n  function Node(type, name) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    (0, _classCallCheck2.default)(this, Node);\n    (0, _defineProperty2.default)(this, \"_source\", void 0);\n    (0, _defineProperty2.default)(this, \"id\", '');\n    (0, _defineProperty2.default)(this, \"type\", void 0);\n    (0, _defineProperty2.default)(this, \"name\", void 0);\n    (0, _defineProperty2.default)(this, \"start\", -1);\n    (0, _defineProperty2.default)(this, \"end\", -1);\n    (0, _defineProperty2.default)(this, \"textStart\", -1);\n    (0, _defineProperty2.default)(this, \"textEnd\", -1);\n    (0, _defineProperty2.default)(this, \"states\", void 0);\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\n    (0, _defineProperty2.default)(this, \"metadata\", void 0);\n    (0, _defineProperty2.default)(this, \"labels\", void 0);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"content\", void 0);\n    (0, _defineProperty2.default)(this, \"text\", '');\n    (0, _defineProperty2.default)(this, \"children\", void 0);\n    var _options$source = options.source,\n        source = _options$source === void 0 ? '' : _options$source,\n        _options$start = options.start,\n        start = _options$start === void 0 ? -1 : _options$start,\n        _options$end = options.end,\n        end = _options$end === void 0 ? -1 : _options$end,\n        states = options.states,\n        _options$attributes = options.attributes,\n        attributes = _options$attributes === void 0 ? {} : _options$attributes,\n        _options$metadata = options.metadata,\n        metadata = _options$metadata === void 0 ? {} : _options$metadata,\n        _options$labels = options.labels,\n        labels = _options$labels === void 0 ? [] : _options$labels,\n        parent = options.parent,\n        _options$content = options.content,\n        content = _options$content === void 0 ? '' : _options$content,\n        _options$text = options.text,\n        text = _options$text === void 0 ? '' : _options$text;\n\n    if (type && !NodeTypes.includes(type)) {\n      throw new TypeError(\"invalid node type \".concat(type));\n    }\n\n    this.id = nanoid();\n    /**\n     * Parser states\n     * @type {Object<string,any>}\n     */\n\n    this.states = states || {};\n    /**\n     * @type {NodeType}\n     * @description Node type\n     */\n\n    this.type = type;\n    /**\n     * @type {string}\n     * @description Node name, for tag, entity\n     */\n\n    this.name = undefined;\n    /**\n     * @type {number}\n     * @description Start source position to root node\n     */\n\n    this.start = start;\n    /**\n     * @type {number}\n     * @description End source position to root node\n     */\n\n    this.end = end;\n    /**\n     * @type {number}\n     * @description Start text source position to root node\n     */\n\n    this.textStart = -1;\n    /**\n     * @type {number}\n     * @description End text source position to root node\n     */\n\n    this.textEnd = -1;\n    /**\n     * @private\n     * @type {Node}\n     * @description Parent node\n     */\n\n    this.parent = parent;\n    /**\n     * @private\n     * @type {string}\n     * @description Source code string, only for root node\n     */\n\n    this._source = undefined;\n    /**\n     * @type {string}\n     * @description Text content, only for text node\n     */\n\n    this.content = undefined;\n    /**\n     * @type {Node[]}\n     * @description Child nodes, only for block node\n     */\n\n    this.children = [];\n    /**\n     * @type {string[]}\n     * @description node labels\n     */\n\n    this.labels = [];\n    /**\n     * @type {Object.<string,any>}\n     * @description Attributes, for root, tag, entity node\n     */\n\n    this.attributes = {};\n    /**\n     * @type {Object.<string,any>}\n     * @description Block metadata\n     */\n\n    this.metadata = {};\n    /**\n     * @type {string[]}\n     * @description Node labels\n     */\n\n    this.labels = [];\n\n    if (type === NodeType.ROOT) {\n      this.start = 0;\n      this.end = source.length;\n      this._source = source;\n    }\n\n    if (text) {\n      this.appendText(text);\n    }\n\n    if (BlockNodeTypes.includes(type) || [NodeType.ENTITY, NodeType.TAG, NodeType.FRAGMENT].includes(type)) {\n      if (type !== NodeType.PARAGRAPH) {\n        this.name = name;\n        this.attributes = attributes;\n        this.metadata = metadata;\n        this.labels = labels;\n      }\n    } else if (type === NodeType.TEXT || type === NodeType.COMMENT) {\n      this.content = content;\n    }\n  }\n  /**\n   * Get a short descriptor to identify node's type and basic information\n   */\n\n\n  (0, _createClass2.default)(Node, [{\n    key: \"getRootNode\",\n\n    /**\n     * Property indicates if the root is root (which has no children)\n     */\n    value: function getRootNode() {\n      var node = this;\n\n      while (node.parent) {\n        node = node.parent;\n      }\n\n      if (node === this) {\n        return undefined;\n      }\n\n      return node;\n    }\n    /**\n     * Check node match the expression\n     * @example\n     * `BLOCK`: tag\n     * `@LOC`: entity\n     * @param expression \n     */\n\n  }, {\n    key: \"is\",\n    value: function is(expression) {\n      if (!_.isString(expression)) {\n        return false;\n      }\n\n      expression = expression.toUpperCase();\n\n      if (/^[A-Z]/.test(expression)) {\n        return this.type === NodeType.TAG && this.name === expression;\n      } else if (/^#/.test(expression)) {\n        return this.type === NodeType.TAG && this.labels.includes(expression.substr(1));\n      } else if (/^@[A-Z]/.test(expression)) {\n        return this.type === NodeType.ENTITY && this.name === expression.substr(1);\n      }\n\n      return false;\n    }\n    /**\n     * whether a node is a descendant of a given node\n     * @param node \n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(node) {\n      Node.validNode(node);\n\n      while (node) {\n        if (node === this) {\n          return true;\n        }\n\n        if (!node.parent) {\n          return false;\n        }\n\n        node = node.parent;\n      }\n\n      return false;\n    }\n    /**\n     * Get a list of ancestors\n     */\n\n  }, {\n    key: \"hasChild\",\n\n    /**\n     * Check if this node has any children\n     */\n    value: function hasChild() {\n      return !_.isEmpty(this.children);\n    }\n    /**\n     * Create a child node\n     * @param type \n     * @param [name]\n     * @param [options]\n     */\n\n  }, {\n    key: \"createChild\",\n    value: function createChild(type, name, options) {\n      var node = new Node(type, name, options);\n      this.appendChild(node);\n      return node;\n    }\n    /**\n     * Append a node to children list\n     * @param node \n     */\n\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(node) {\n      return this.insertAt(node, Infinity);\n    }\n    /**\n     * Append text node child\n     * @param text \n     * @param [options] \n     */\n\n  }, {\n    key: \"appendText\",\n    value: function appendText(text, options) {\n      if (this.type === NodeType.TEXT) {\n        this.content = this.content || '';\n        this.content += text;\n        return this;\n      } else {\n        return this.createChild(NodeType.TEXT, undefined, (0, _objectSpread2.default)({}, options, {\n          content: text\n        }));\n      }\n    }\n    /**\n     * Remove 1 or more children\n     * @param node\n     */\n\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(node) {\n      _.pull(this.children, node);\n\n      node.parent = undefined;\n      return node;\n    }\n    /**\n     * Insert a node at specified position\n     * @param node \n     * @param index \n     */\n\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(node, index) {\n      var _this = this;\n\n      if (node.type === NodeType.FRAGMENT) {\n        var _this$children;\n\n        (_this$children = this.children).splice.apply(_this$children, [index, 0].concat((0, _toConsumableArray2.default)(node.children)));\n\n        node.children.forEach(function (child) {\n          child.parent = _this;\n        });\n        node.children = [];\n      } else {\n        this.children.splice(index, 0, node);\n\n        if (node.parent) {\n          node.parent.removeChild(node);\n        }\n\n        node.parent = this;\n      }\n\n      return node;\n    }\n    /**\n     * Insert a node before another\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n     * @param node Node to be inserted\n     * @param ref A child node to be referenced\n     */\n\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(node, ref) {\n      Node.validParent(this);\n      var refIndex = this.children.indexOf(ref);\n      this.insertAt(node, refIndex);\n      return node;\n    }\n    /**\n     * Insert a node after another\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/insertAfter\n     * @param node Node to be inserted\n     * @param ref A child node to be referenced\n     */\n\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(node, ref) {\n      Node.validParent(this);\n      var refIndex = this.children.indexOf(ref);\n      this.insertAt(node, refIndex + 1);\n      return node;\n    }\n    /**\n     * Replace a child with another node, assuming current node is a parent\n     * @param newChild \n     * @param oldChild \n     * @returns The replaced child\n     */\n\n  }, {\n    key: \"replaceChild\",\n    value: function replaceChild(newChild, oldChild) {\n      Node.validParent(this);\n\n      if (newChild.contains(this)) {\n        throw new TypeError('the new child contains the parent');\n      }\n\n      if (oldChild.parent !== this) {\n        throw new TypeError('the old child is not a child of this node');\n      }\n\n      this.insertBefore(newChild, oldChild);\n      this.removeChild(oldChild);\n      return oldChild;\n    }\n    /**\n     * Replace current child node with another node, assuming current node is child\n     * @param node Node to be replaced with\n     */\n\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(node) {\n      Node.validChild(this);\n\n      if (!this.parent) {\n        throw new Error('can not replace isolated node');\n      }\n\n      this.parent.replaceChild(node, this);\n      return node;\n    }\n    /**\n     * Set single attribute value\n     * @param {string} key Attribute key\n     * @param {any} value Attribute value\n     */\n\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(key, value) {\n      _.set(this.attributes, key, value);\n    }\n    /**\n     * Set multiple attributes\n     * @param data Key-value pair\n     */\n\n  }, {\n    key: \"setAttributes\",\n    value: function setAttributes(data) {\n      _.merge(this.attributes, data);\n    }\n    /**\n     * Get attribute value\n     * @param key \n     */\n\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(key) {\n      return _.get(this.attributes, key);\n    }\n    /**\n     * Check if a specified attribute key exists\n     * @param key \n     */\n\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(key) {\n      return _.has(this.attributes, key);\n    }\n    /**\n     * Remove an attribute\n     * @param {string} key \n     */\n\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(key) {\n      _.unset(this.attributes, key);\n    }\n    /**\n     * Remove all attributes\n     */\n\n  }, {\n    key: \"clearAttributes\",\n    value: function clearAttributes() {\n      this.attributes = {};\n    }\n    /**\n     * Set single metadata value\n     * @param key Metadata key\n     * @param value Metadata value\n     */\n\n  }, {\n    key: \"setMetadata\",\n    value: function setMetadata(key, value) {\n      if (_.isObject(key)) {\n        _.merge(this.metadata, key);\n      } else {\n        _.set(this.metadata, key, value);\n      }\n    }\n    /**\n     * Get metadata value\n     * @param key \n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata(key) {\n      return _.get(this.metadata, key);\n    }\n    /**\n     * Remove a metadata\n     * @param key \n     */\n\n  }, {\n    key: \"removeMetadata\",\n    value: function removeMetadata(key) {\n      _.unset(this.metadata, key);\n    }\n    /**\n     * Remove all metadata\n     */\n\n  }, {\n    key: \"clearMetadata\",\n    value: function clearMetadata() {\n      this.metadata = {};\n    }\n    /**\n     * Check if a specified metadata key exists\n     * @param key \n     */\n\n  }, {\n    key: \"hasMetadata\",\n    value: function hasMetadata(key) {\n      return _.has(this.metadata, key);\n    }\n    /**\n     * Add label to node\n     * @param label \n     */\n\n  }, {\n    key: \"addLabel\",\n    value: function addLabel(label) {\n      if (!_.isString(label)) {\n        throw new TypeError('label must be string');\n      }\n\n      if (!this.labels.includes(label)) {\n        this.labels.push(label);\n      }\n    }\n    /**\n     * Check if the node has specified label\n     * @param label \n     */\n\n  }, {\n    key: \"hasLabel\",\n    value: function hasLabel(label) {\n      return this.labels.includes(label);\n    }\n    /**\n     * Remove label\n     * @param label \n     */\n\n  }, {\n    key: \"removeLabel\",\n    value: function removeLabel(label) {\n      _.pull(this.labels, label);\n    }\n    /**\n     * Remove all labels\n     */\n\n  }, {\n    key: \"clearLabels\",\n    value: function clearLabels() {\n      this.labels = [];\n    }\n    /**\n     * Rebuild text and source position, in case modification has been applied to node\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var source = this.toSource();\n\n      if (this.isRoot) {\n        this._source = source;\n      }\n\n      this.toString();\n    }\n    /**\n     * Get node by id\n     * @param id \n     */\n\n  }, {\n    key: \"getNodeById\",\n    value: function getNodeById(id) {\n      return _findOne(this, function (node) {\n        return node.id === id;\n      });\n    }\n    /**\n     * Find matched descendants recursively\n     * @param selector Node selector object\n     * @param [one] Find the first matched node or a list of node\n     */\n\n  }, {\n    key: \"findBy\",\n    value: function findBy() {\n      var _this2 = this;\n\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var one = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var type = selector.type,\n          name = selector.name,\n          text = selector.text,\n          source = selector.source,\n          label = selector.label;\n      var finder = one ? _findOne : _find;\n      return finder(this, function (node) {\n        var match = true;\n\n        if (type) {\n          match = match && type === node.type;\n        }\n\n        if (name) {\n          match = match && name === node.name;\n        }\n\n        if (text && node.type === NodeType.TEXT && node.content) {\n          if (_.isRegExp(text)) {\n            match = match && !!text.match(node.content);\n          } else if (_.isString(text)) {\n            match = match && node.content.includes(text);\n          } else {\n            throw new TypeError('text filter should be RegExp or string');\n          }\n        }\n\n        if (source && node._source) {\n          if (_.isRegExp(source)) {\n            match = match && !!source.match(node._source);\n          } else if (_.isString(source)) {\n            match = match && node._source.includes(source);\n          } else {\n            throw new TypeError('source filter should be RegExp or string');\n          }\n        }\n\n        if (label) {\n          if (_.isArray(label)) {\n            match = match && _.intersection(_this2.labels, label).length > 0;\n          } else {\n            match = match && _this2.labels.includes(label);\n          }\n        }\n\n        return match;\n      });\n      ;\n    }\n    /**\n     * Find nodes by selector recursively and return the first one\n     * @param selector \n     */\n\n  }, {\n    key: \"findOneBy\",\n    value: function findOneBy() {\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.findBy(selector, true);\n    }\n    /**\n     * Find matched text node by text source range\n     * @param start \n     * @param end \n     */\n\n  }, {\n    key: \"findTextByRange\",\n    value: function findTextByRange(start, end) {\n      if (this.textStart === undefined || this.textEnd === undefined) {\n        return undefined;\n      }\n\n      if (this.textStart <= start && this.textEnd >= end) {\n        if (this.type === NodeType.TEXT) {\n          return this;\n        } else if (this.hasChild()) {\n          for (var i = 0; i < this.children.length; i++) {\n            var child = this.children[i];\n            var match = child.findTextByRange(start, end);\n\n            if (match) {\n              return match;\n            }\n          }\n\n          ;\n        }\n      }\n\n      return undefined;\n    }\n    /**\n     * Find matched children recursively by callback\n     * @param callback\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(callback) {\n      return _find(this, callback);\n    }\n    /**\n     * Find matched children recursively and return the first one\n     * @param callback\n     */\n\n  }, {\n    key: \"findOne\",\n    value: function findOne(callback) {\n      return _findOne(this, callback);\n    }\n    /**\n     * Find all nodes by selector, compared by is()\n     * @param selector \n     */\n\n  }, {\n    key: \"querySelectorAll\",\n    value: function querySelectorAll(selector) {\n      return _find(this, selector);\n    }\n    /**\n     * Find nodes by selector and return the first one, compared by is()\n     * @param selector \n     */\n\n  }, {\n    key: \"querySelector\",\n    value: function querySelector(selector) {\n      return _findOne(this, selector);\n    }\n  }, {\n    key: \"createBlockByTextRange\",\n    value: function createBlockByTextRange(start, end, props) {\n      if (!this.content) {\n        throw new Error('invalid text node');\n      }\n\n      if (start < 0 || end > this.content.length) {\n        throw new Error('sub text out of range');\n      }\n\n      if (!this.parent) {\n        throw new Error('can not create block on isolated text node');\n      }\n\n      var parent = this.parent;\n      var fragment = Node.createFragment();\n      var block = Node.create(NodeType.TAG, 'INLINE', (0, _objectSpread2.default)({}, props, {\n        text: this.content.substring(start, end)\n      }));\n\n      if (start > 0) {\n        fragment.appendText(this.content.substring(0, start));\n      }\n\n      fragment.appendChild(block);\n\n      if (end < this.content.length) {\n        fragment.appendText(this.content.substring(end));\n      }\n\n      parent.insertBefore(fragment, this);\n      parent.removeChild(this);\n      return block;\n    }\n    /**\n     * Process text node in current node and parse entities\n     */\n\n  }, {\n    key: \"createEntities\",\n    value: function createEntities(items) {\n      var entityNodes = [];\n\n      if (this.type !== NodeType.TEXT) {\n        console.warn('extractEntity() should exec only on text node');\n      }\n\n      if (!this.content || _.isEmpty(items)) {\n        return entityNodes;\n      }\n\n      var text = this.content;\n      items = _.sortBy(items, ['start']);\n      var fragment = Node.createFragment();\n      var lastPos = 0;\n      items.forEach(function (item) {\n        if (item.start >= item.end || item.start < lastPos) {\n          return;\n        }\n\n        if (item.start > lastPos) {\n          fragment.appendText(text.substring(lastPos, item.start));\n        }\n\n        var entityNode = fragment.createChild(NodeType.ENTITY, item.type, {\n          attributes: item.data\n        });\n        entityNode.appendText(text.substring(item.start, item.end));\n        entityNodes.push(entityNode);\n        lastPos = item.end;\n      });\n\n      if (lastPos < text.length) {\n        fragment.appendText(text.substr(lastPos));\n      }\n\n      this.replaceWith(fragment);\n      return entityNodes;\n    }\n    /**\n     * Create entity nodes based on text source position\n     * @param {Array.<{start:number,end:number,type:string,data:any}>} entities \n     */\n\n  }, {\n    key: \"createEntitiesFromText\",\n    value: function createEntitiesFromText(entities) {\n      var _this3 = this;\n\n      this.toString();\n      var cache = new Map();\n\n      _.each(entities, function (item) {\n        var textNode = _this3.findTextByRange(item.start, item.end);\n\n        if (textNode === undefined) {\n          return;\n        }\n\n        if (cache.has(textNode)) {\n          cache.get(textNode).push(item);\n        } else {\n          cache.set(textNode, [item]);\n        }\n      });\n\n      cache.forEach(function (items, textNode) {\n        textNode.createEntities(items.map(function (item) {\n          return (0, _objectSpread2.default)({}, item, {\n            start: item.start - (textNode.textStart || 0),\n            end: item.end - (textNode.textStart || 0)\n          });\n        }));\n      });\n    }\n    /**\n     * Extract entities from text node\n     */\n\n  }, {\n    key: \"extractEntities\",\n    value: function () {\n      var _extractEntities = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(extractor) {\n        var nodeList, textList, result;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nodeList = this.find(function (node) {\n                  return node.type === NodeType.TEXT && !!node.parent && node.parent.type !== NodeType.ENTITY && !!node.content;\n                });\n                textList = nodeList.map(function (node) {\n                  return node.content;\n                });\n\n                if (!_.isFunction(extractor)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                result = textList.map(function (text) {\n                  return extractor(text);\n                });\n                _context.next = 13;\n                break;\n\n              case 6:\n                if (!_.isFunction(extractor.extract)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 9;\n                return extractor.extract(textList);\n\n              case 9:\n                result = _context.sent;\n                _context.next = 13;\n                break;\n\n              case 12:\n                throw new TypeError('invalid extractor');\n\n              case 13:\n                nodeList.forEach(function (node, i) {\n                  var items = result[i];\n\n                  if (!_.isArray(items)) {\n                    throw new Error('invalid extraction result');\n                  }\n\n                  node.createEntities(items);\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function extractEntities(_x) {\n        return _extractEntities.apply(this, arguments);\n      };\n    }()\n    /**\n     * Remove wrapping entity and put text back\n     */\n\n  }, {\n    key: \"removeEntity\",\n    value: function removeEntity() {\n      if (this.type !== NodeType.ENTITY || !this.firstChild || this.firstChild.type !== NodeType.TEXT) {\n        throw new Error('invalid entity');\n      }\n\n      ;\n\n      if (!this.parent) {\n        throw new Error('can not remove isolated entity');\n      }\n\n      var text = this.firstChild.content || '';\n      var prevNode = this.previousSibling;\n      var nextNode = this.nextSibling;\n\n      if (prevNode && prevNode.type === NodeType.TEXT) {\n        text = prevNode.content + text;\n        this.parent.removeChild(prevNode);\n      }\n\n      if (nextNode && nextNode.type === NodeType.TEXT) {\n        text = text + nextNode.content;\n        this.parent.removeChild(nextNode);\n      }\n\n      var textNode = Node.create(NodeType.TEXT, undefined, {\n        content: text\n      });\n      return this.replaceWith(textNode);\n    }\n    /**\n     * Build plain text of the node (stripping tags & entities)\n     * @param [options]\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(options) {\n      return (0, _util.stringify)(this, options);\n    }\n    /**\n     * Build source code of the node\n     * @param [options]\n     */\n\n  }, {\n    key: \"toSource\",\n    value: function toSource() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return (0, _util.stringify)(this, (0, _objectSpread2.default)({}, options, {\n        toSource: true\n      }));\n    }\n    /**\n     * Convert node to JSON serializable object\n     * @param options \n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _options$position = options.position,\n          position = _options$position === void 0 ? false : _options$position,\n          _options$textPosition = options.textPosition,\n          textPosition = _options$textPosition === void 0 ? false : _options$textPosition;\n      return _.omitBy({\n        type: this.type,\n        name: this.name,\n        content: this.content,\n        attributes: toJsonMap(this.attributes),\n        metadata: toJsonMap(this.metadata),\n        labels: this.labels.length ? this.labels : undefined,\n        position: position ? {\n          start: this.start,\n          end: this.end\n        } : undefined,\n        textPosition: textPosition ? {\n          start: this.textStart,\n          end: this.textEnd\n        } : undefined,\n        children: _.isEmpty(this.children) ? undefined : this.children.map(function (child) {\n          return child.toJSON(options);\n        })\n      }, _.isUndefined);\n    }\n  }, {\n    key: \"descriptor\",\n    get: function get() {\n      switch (this.type) {\n        case NodeType.ENTITY:\n          return \"[\".concat(this.name, \"]\");\n\n        case NodeType.TAG:\n          return \"{\".concat(this.name, \"}\");\n\n        case NodeType.TEXT:\n          return \"(text)\";\n\n        default:\n          return this.type;\n      }\n    }\n    /**\n     * Check if the node is tag\n     */\n\n  }, {\n    key: \"isTag\",\n    get: function get() {\n      return this.type === NodeType.TAG;\n    }\n    /**\n     * Check if the node is wrapping tag\n     */\n\n  }, {\n    key: \"isWrappingTag\",\n    get: function get() {\n      return this.isTag && WrappingTags.includes(this.name);\n    }\n    /**\n     * Check if the node is block tag\n     */\n\n  }, {\n    key: \"isBlockTag\",\n    get: function get() {\n      return this.isTag && BlockTags.includes(this.name);\n    }\n    /**\n     * Check if the node is simple block or inline block\n     */\n\n  }, {\n    key: \"isSimpleTag\",\n    get: function get() {\n      return this.isTag && ['BLOCK', 'INLINE'].includes(this.name);\n    }\n    /**\n     * Property indicates if the node is a block (wrapping other nodes)\n     */\n\n  }, {\n    key: \"isBlock\",\n    get: function get() {\n      var type = this.type,\n          name = this.name;\n      return BlockNodeTypes.includes(type) || this.isBlockTag;\n    }\n    /**\n     * If node is inline block\n     */\n\n  }, {\n    key: \"isInlineBlock\",\n    get: function get() {\n      return this.isTag && !this.isBlockTag;\n    }\n    /**\n     * Get parent node, alias for node.parent\n     */\n\n  }, {\n    key: \"parentNode\",\n    get: function get() {\n      return this.parent;\n    }\n    /**\n     * Get child nodes, alias for node.children\n     */\n\n  }, {\n    key: \"childNodes\",\n    get: function get() {\n      return this.children;\n    }\n    /**\n     * If the node is root\n     */\n\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.type === NodeType.ROOT;\n    }\n    /**\n     * Get source code of the node\n     */\n\n  }, {\n    key: \"source\",\n    get: function get() {\n      if (this.type === NodeType.ROOT) {\n        return this._source || '';\n      }\n\n      var rootNode = this.getRootNode();\n\n      if (!rootNode) {\n        throw new Error('ROOT node not found');\n      }\n\n      return rootNode.source.substring(this.start || 0, this.end);\n    }\n    /**\n     * Get node inner text\n     */\n\n  }, {\n    key: \"innerText\",\n    get: function get() {\n      if (this.type === NodeType.TEXT) {\n        return this.content;\n      } else if (this.type === NodeType.ENTITY) {\n        var textNode = this.children[0];\n        return textNode ? textNode.content : '';\n      } else {\n        return this.toString();\n      }\n    }\n    /**\n     * Check if the node is the first child of its parent\n     */\n\n  }, {\n    key: \"isFirstChild\",\n    get: function get() {\n      var parent = this.parent;\n\n      if (!parent) {\n        return false;\n      }\n\n      return _.first(parent.children) === this;\n    }\n    /**\n     * Check if the node is the last child of its parent\n     */\n\n  }, {\n    key: \"isLastChild\",\n    get: function get() {\n      var parent = this.parent;\n\n      if (!parent) {\n        return false;\n      }\n\n      return _.last(parent.children) === this;\n    }\n    /**\n     * Siblings from same parent\n     */\n\n  }, {\n    key: \"siblings\",\n    get: function get() {\n      var parent = this.parent;\n\n      if (!parent) {\n        return [this];\n      }\n\n      return parent.children;\n    }\n    /**\n     * Get index of parent children\n     */\n\n  }, {\n    key: \"childIndex\",\n    get: function get() {\n      var siblings = this.siblings;\n      return siblings.indexOf(this);\n    }\n    /**\n     * Next sibling node\n     */\n\n  }, {\n    key: \"nextSibling\",\n    get: function get() {\n      if (!this.parent) return undefined;\n      var childIndex = this.childIndex,\n          siblings = this.siblings;\n      return siblings[childIndex + 1] || undefined;\n    }\n    /**\n     * Previous sibling node\n     */\n\n  }, {\n    key: \"previousSibling\",\n    get: function get() {\n      if (!this.parent) return undefined;\n      var childIndex = this.childIndex,\n          siblings = this.siblings;\n      return siblings[childIndex - 1] || undefined;\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      var list = [];\n      var node = this;\n\n      while (node) {\n        list.unshift(node);\n        node = node.parent;\n      }\n\n      return list;\n    }\n    /**\n     * Get the first child of current node\n     */\n\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      Node.validParent(this);\n      return _.first(this.children);\n    }\n    /**\n     * Get the last child of current node\n     */\n\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      Node.validParent(this);\n      return _.last(this.children);\n    }\n  }]);\n  return Node;\n}();\n\n(0, _defineProperty2.default)(Node, \"Types\", NodeType);\nvar _default = Node;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"TextLine\", {\n  enumerable: true,\n  get: function get() {\n    return _TextLine.default;\n  }\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _TextLine = _interopRequireDefault(require(\"./TextLine\"));\n\nvar _constants = require(\"./constants\"); // improved from https://github.com/codemirror/CodeMirror/blob/master/src/util/StringStream.js\n\n\nvar NOT_FOUND = -1;\nvar LINE_BREAKS = /\\r?\\n/g;\n/**\n * Stream like text string\n * @typicalname stream\n */\n\nvar TextStream =\n/*#__PURE__*/\nfunction () {\n  /** Current cursor position */\n\n  /** Original text */\n\n  /** Tab size */\n\n  /** Text lines */\n\n  /** Start position of each line */\n\n  /** Markers */\n\n  /** Cursor stack positions */\n\n  /** Last matched string of methods like eat() match() */\n  function TextStream(text) {\n    var tabSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    (0, _classCallCheck2.default)(this, TextStream);\n    (0, _defineProperty2.default)(this, \"pos\", void 0);\n    (0, _defineProperty2.default)(this, \"text\", void 0);\n    (0, _defineProperty2.default)(this, \"tabSize\", void 0);\n    (0, _defineProperty2.default)(this, \"lines\", void 0);\n    (0, _defineProperty2.default)(this, \"lineOffsetIndexes\", []);\n    (0, _defineProperty2.default)(this, \"markers\", void 0);\n    (0, _defineProperty2.default)(this, \"cursorStack\", void 0);\n    (0, _defineProperty2.default)(this, \"lastMatch\", '');\n    this.pos = 0;\n    /**\n     * @readonly\n     * @type {string}\n     * @description Original text\n     */\n\n    this.text = text;\n    /**\n     * @description Tab size\n     */\n\n    this.tabSize = tabSize;\n    /**\n     * @description Lines, separated by line breaks\n     */\n\n    this.lines = [];\n    /**\n     * @description Stream markers, used by `pushMarker()`, `popMarker()`, `setMarkerData()`\n     */\n\n    this.markers = [];\n    /**\n     * @description Cursor stack, used by `pushCursor()` and `popCursor`\n     */\n\n    this.cursorStack = [];\n    this.init();\n  }\n  /**\n   * Prepare line indexes\n   */\n\n\n  (0, _createClass2.default)(TextStream, [{\n    key: \"init\",\n    value: function init() {\n      var lines = [];\n      var matched;\n      var offset = 0;\n      var ln = 1;\n      LINE_BREAKS.lastIndex = 0;\n\n      do {\n        matched = LINE_BREAKS.exec(this.text);\n\n        if (matched) {\n          var length = matched.index - offset;\n\n          var _text = this.text.substr(offset, length);\n\n          lines.push(new _TextLine.default(lines, _text, ln, offset));\n          offset += length + matched[0].length;\n        } else {\n          var _length = this.text.length - offset; // process last line without line break symbol\n\n\n          if (_length > 0) {\n            var _text2 = this.text.substr(offset);\n\n            lines.push(new _TextLine.default(lines, _text2, ln, offset));\n          }\n        }\n\n        ln++;\n      } while (matched);\n\n      this.lines = lines;\n      this.lineOffsetIndexes = _.map(lines, 'offset');\n    }\n    /**\n     * Get line and column position of the cursor\n     * @param pos Cursor position of the text\n     */\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(pos) {\n      if (_.isUndefined(pos)) {\n        pos = this.pos;\n      }\n\n      var lineIndex = _.sortedLastIndex(this.lineOffsetIndexes, pos) - 1;\n      var line = this.lines[lineIndex];\n\n      if (!line) {\n        throw new Error('cursor position is invalid');\n      }\n\n      var ln = line.ln,\n          offset = line.offset;\n      var col = pos - offset + 1;\n      return {\n        ln: ln,\n        col: col,\n        pos: pos,\n        line: line\n      };\n    }\n    /**\n     * Check if cursor is at the start of a line\n     * @param [trimSpaces] Whether to trim starting spaces\n     */\n\n  }, {\n    key: \"sol\",\n    value: function sol() {\n      var trimSpaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _this$getPosition = this.getPosition(),\n          col = _this$getPosition.col,\n          line = _this$getPosition.line;\n\n      if (col - 1 === 0) {\n        return true;\n      }\n\n      if (!trimSpaces) {\n        return false;\n      }\n\n      var _$trimStart = _.trimStart(line.text),\n          length = _$trimStart.length;\n\n      return col - 1 <= line.length - length;\n    }\n    /**\n     * Check if cursor is at the end of a line\n     * @param [trimSpaces] Whether to trim ending spaces\n     */\n\n  }, {\n    key: \"eol\",\n    value: function eol() {\n      var trimSpaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _this$getPosition2 = this.getPosition(),\n          col = _this$getPosition2.col,\n          line = _this$getPosition2.line;\n\n      if (col - 1 === line.length) {\n        return true;\n      }\n\n      if (!trimSpaces) {\n        return false;\n      }\n\n      var _$trimEnd = _.trimEnd(line.text),\n          length = _$trimEnd.length;\n\n      return col - 1 >= length;\n    }\n    /**\n     * Check if cursor is at the end of whole text\n     * @param {number} [pos] \n     */\n\n  }, {\n    key: \"eof\",\n    value: function eof(pos) {\n      if (_.isUndefined(pos)) {\n        pos = this.pos;\n      }\n\n      return pos >= this.text.length;\n    }\n    /**\n     * Get one next char, but keep the cursor position (if available)\n     * @returns The next char\n     */\n\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this.text.charAt(this.pos);\n    }\n    /**\n     * Get one next char, and move cursor forward (if available)\n     * @returns The next char\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this.pos < this.text.length) {\n        return this.text.charAt(this.pos++);\n      }\n\n      return '';\n    }\n    /**\n     * Consumes one char if the next char fitting the pattern\n     * @param pattern \n     * @returns The char been eaten\n     */\n\n  }, {\n    key: \"eat\",\n    value: function eat(pattern) {\n      var ch = this.text.charAt(this.pos) || '';\n      var ok;\n\n      if (_.isUndefined(ch)) {\n        ok = false;\n      } else if (_.isString(pattern)) {\n        ok = ch === pattern;\n      } else if (_.isRegExp(pattern)) {\n        pattern.lastIndex = 0;\n        ok = pattern.test(ch);\n      } else if (_.isFunction(pattern)) {\n        ok = pattern(ch);\n      }\n\n      if (ok) {\n        this.lastMatch = ch;\n        ++this.pos;\n        return ch;\n      }\n\n      return '';\n    }\n    /**\n     * Consumes chars while fitting the pattern\n     * @param match \n     * @returns Eaten characters\n     */\n\n  }, {\n    key: \"eatWhile\",\n    value: function eatWhile(pattern) {\n      var start = this.pos;\n      var chr;\n      var string = '';\n\n      do {\n        chr = this.eat(pattern);\n\n        if (chr) {\n          string += chr;\n        }\n      } while (chr && !this.eof());\n\n      return string;\n    }\n    /**\n     * Consumes chars until the first char not fitting the pattern\n     * @param pattern char or pattern\n     * @returns eaten characters\n     */\n\n  }, {\n    key: \"eatUntil\",\n    value: function eatUntil(pattern) {\n      var start = this.pos;\n      var ch;\n      var string = '';\n\n      do {\n        ch = this.eat(pattern);\n\n        if (!ch) {\n          string += this.peek();\n          this.pos++;\n        } else {\n          this.pos--;\n        }\n      } while (!ch && !this.eof());\n\n      return string;\n    }\n    /**\n     * Consumes spaces\n     * @returns {boolean} If any space has been consumed\n     */\n\n  }, {\n    key: \"eatSpaces\",\n    value: function eatSpaces() {\n      var start = this.pos;\n\n      while (/[\\s\\u00a0]/.test(this.text.charAt(this.pos))) {\n        this.pos++;\n      }\n\n      return this.pos > start;\n    }\n    /**\n     * Find position of matched text to the pattern\n     * @param pattern \n     * @param options\n     */\n\n  }, {\n    key: \"search\",\n    value: function search(pattern) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var caseInsensitive = options.caseInsensitive;\n      var index = NOT_FOUND;\n      var length = 0;\n      var matched = '';\n\n      if (typeof pattern === 'string') {\n        if (caseInsensitive) {\n          pattern = new RegExp(_.escapeRegExp(pattern), 'i');\n        } else {\n          index = this.text.indexOf(pattern, this.pos);\n\n          if (index !== NOT_FOUND) {\n            matched = pattern;\n          }\n        }\n      }\n\n      if (pattern instanceof RegExp) {\n        pattern.lastIndex = this.pos;\n        var result = pattern.exec(this.text);\n\n        if (result) {\n          index = result.index;\n          matched = result[0];\n        } else {\n          index = NOT_FOUND;\n        }\n      }\n\n      var _matched = matched;\n      length = _matched.length;\n      return {\n        index: index,\n        length: length,\n        matched: matched\n      };\n    }\n    /**\n     * Read n chars after current cursor\n     * @param [n] Number of chars to read\n     */\n\n  }, {\n    key: \"read\",\n    value: function read() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var left = this.text.length - this.pos;\n\n      if (left <= 0) {\n        return '';\n      } else if (left < n) {\n        n = left;\n      }\n\n      var result = this.text.substr(this.pos, n);\n      this.pos += n;\n      return result;\n    }\n    /**\n     * Read to text or pattern\n     * @param pattern \n     * @param [options]\n     * @returns Sub-text after current cursor and before (or contains) matched text\n     */\n\n  }, {\n    key: \"readTo\",\n    value: function readTo(pattern) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$toEOL = options.toEOL,\n          toEOL = _options$toEOL === void 0 ? false : _options$toEOL,\n          _options$toEOF = options.toEOF,\n          toEOF = _options$toEOF === void 0 ? false : _options$toEOF,\n          _options$consume = options.consume,\n          consume = _options$consume === void 0 ? false : _options$consume,\n          _options$skipMatched = options.skipMatched,\n          skipMatched = _options$skipMatched === void 0 ? false : _options$skipMatched;\n      var start = this.pos;\n\n      var _this$search = this.search(pattern),\n          index = _this$search.index,\n          length = _this$search.length;\n\n      var match = '';\n      var end = -1;\n\n      if (toEOL) {\n        var _this$getPosition3 = this.getPosition(),\n            line = _this$getPosition3.line;\n\n        end = line.offset + line.length;\n      } else if (toEOF) {\n        end = this.text.length;\n      }\n\n      if (index !== NOT_FOUND) {\n        if (toEOL || toEOF) {\n          if (index < end) {\n            end = index;\n          } else {\n            length = 0;\n          }\n        } else {\n          end = index;\n        }\n      }\n\n      if (end !== -1) {\n        this.pos = end;\n\n        if (consume) {\n          end += length;\n          this.pos = end;\n        } else if (skipMatched) {\n          this.pos += length;\n        }\n\n        match = this.text.substring(start, end);\n      }\n\n      this.lastMatch = match;\n      return match;\n    }\n    /**\n     * Read to pattern (contains the matched text)\n     * @param {} pattern Text to find or pattern\n     * @param {object} options Match options\n     * @returns {string} Sub-text after current cursor and until the end of matched text\n     */\n\n  }, {\n    key: \"readOver\",\n    value: function readOver(pattern) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.readTo(pattern, (0, _objectSpread2.default)({}, options, {\n        consume: true\n      }));\n    }\n    /**\n     * Read one line\n     * @returns {string} Text containing one line (not including line break)\n     */\n\n  }, {\n    key: \"readLine\",\n    value: function readLine() {\n      var _this$getPosition4 = this.getPosition(),\n          line = _this$getPosition4.line;\n\n      var nextLine = line.next();\n\n      if (this.eof()) {\n        return '';\n      }\n\n      if (nextLine) {\n        this.pos = nextLine.offset;\n        return line.text;\n      } else {\n        var length = line.offset + line.length - this.pos;\n        return this.read(length);\n      }\n    }\n    /**\n     * Move cursor to end of text\n     */\n\n  }, {\n    key: \"skipToEnd\",\n    value: function skipToEnd() {\n      this.pos = this.text.length;\n    }\n    /**\n     * Skip to the beginning of matched text\n     * @param pattern\n     * @param options\n     */\n\n  }, {\n    key: \"skipTo\",\n    value: function skipTo(pattern, options) {\n      var start = this.pos;\n      this.readTo(pattern, options);\n      return start !== this.pos;\n    }\n    /**\n     * Skip to the end of matched text\n     * @param pattern\n     */\n\n  }, {\n    key: \"skipOver\",\n    value: function skipOver(pattern, options) {\n      var start = this.pos;\n      this.readTo(pattern, (0, _objectSpread2.default)({}, options, {\n        skipMatched: true\n      }));\n      return start !== this.pos;\n    }\n    /**\n     * Move cursor back\n     * @param n Steps\n     */\n\n  }, {\n    key: \"backUp\",\n    value: function backUp() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.pos -= n;\n    }\n    /**\n     * Check if rest text begins with pattern\n     * @param pattern \n     * @param [options] \n     */\n\n  }, {\n    key: \"match\",\n    value: function match(pattern) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$consume2 = options.consume,\n          consume = _options$consume2 === void 0 ? true : _options$consume2,\n          caseInsensitive = options.caseInsensitive;\n\n      var _this$search2 = this.search(pattern, {\n        caseInsensitive: caseInsensitive\n      }),\n          index = _this$search2.index,\n          length = _this$search2.length,\n          matched = _this$search2.matched;\n\n      if (index !== this.pos) {\n        return '';\n      }\n\n      if (consume) {\n        this.pos += length;\n      }\n\n      this.lastMatch = matched;\n      return matched;\n    }\n    /**\n     * Reset the marker stack\n     */\n\n  }, {\n    key: \"resetMarker\",\n    value: function resetMarker() {\n      this.markers = [];\n    }\n    /**\n     * Add a marker to stack\n     * @param data\n     * @param start\n     */\n\n  }, {\n    key: \"pushMarker\",\n    value: function pushMarker(data, start) {\n      if (_.isUndefined(start)) {\n        start = this.pos;\n      }\n\n      this.markers.push({\n        data: data,\n        start: start\n      });\n    }\n    /**\n     * Set data for current marker\n     * @param data\n     */\n\n  }, {\n    key: \"setMarkerData\",\n    value: function setMarkerData(data) {\n      var marker = _.last(this.markers);\n\n      if (!marker) return;\n\n      _.extend(marker.data, data);\n    }\n    /**\n     * Get data of current markder\n     */\n\n  }, {\n    key: \"getMarkerData\",\n    value: function getMarkerData() {\n      var marker = _.last(this.markers);\n\n      if (!marker) return {};\n      return marker.data;\n    }\n    /**\n     * Return a combined structure of text and it's position according to the previously set start\n     * marker\n     * @param [data] Additional data\n     * @param [end] End marker, if not set, previous set value will be used\n     */\n\n  }, {\n    key: \"popMarker\",\n    value: function popMarker() {\n      var _data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var end = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (!_.isPlainObject(_data)) {\n        throw new TypeError('invalid data parameter');\n      }\n\n      if (_.isUndefined(end)) {\n        end = this.pos;\n      }\n\n      var marker = this.markers.pop();\n\n      if (!marker) {\n        return undefined;\n      }\n\n      var data = marker.data,\n          start = marker.start;\n      return {\n        text: this.text.substring(marker.start || 0, end),\n        position: {\n          start: start,\n          end: end\n        },\n        data: (0, _objectSpread2.default)({}, data, _data)\n      };\n    }\n  }, {\n    key: \"findLine\",\n    value: function findLine(text) {\n      return _.find(this.lines, function (line) {\n        return _.trim(line.text) === text;\n      });\n    }\n    /**\n     * Push current cursor to cursor stack, if new position provided, set current cursor to it\n     * @param [pos] \n     */\n\n  }, {\n    key: \"pushCursor\",\n    value: function pushCursor(pos) {\n      if (_.isUndefined(pos)) {\n        pos = this.pos;\n      }\n\n      this.cursorStack.push(this.pos);\n      this.pos = pos;\n    }\n    /**\n     * Pop last from cursor stack and set it to current cursor\n     */\n\n  }, {\n    key: \"popCursor\",\n    value: function popCursor() {\n      if (this.cursorStack.length === 0) {\n        throw new Error('out of cursor stack!');\n      }\n\n      this.pos = this.cursorStack.pop();\n      return this.pos;\n    }\n    /**\n     * Debug a single line\n     * @param line \n     * @param numWidth \n     * @param col \n     */\n\n  }, {\n    key: \"debugLine\",\n    value: function debugLine(line, numWidth, col) {\n      var ln = line.ln,\n          text = line.text;\n\n      if (_.isUndefined(numWidth)) {\n        numWidth = (ln + '').length;\n      }\n\n      if (col) {\n        text = text.substring(0, col - 1) + _chalk.default.bgBlue(text.charAt(col - 1)) + text.substring(col);\n      }\n\n      console.log(\"\".concat(_chalk.default.blueBright(\"\".concat(col ? '>' : ' ', \" \").concat(_.padStart(ln + '', numWidth), \" |\")), \" \").concat(text));\n    }\n    /**\n     * Debug cursor column position\n     * @param text Text of the line\n     * @param col Cursor position\n     * @param numWidth fixed line number width\n     */\n\n  }, {\n    key: \"debugCursor\",\n    value: function debugCursor(text, col, numWidth) {\n      var pos = text.substr(0, col - 1).replace(_constants.P_FULL_WIDTH_CHARACTER, 'XX').length;\n      console.log(_chalk.default.blueBright(\"  \".concat(_.repeat(' ', numWidth), \" | \").concat(_.repeat(' ', pos), \"^ \").concat(col)));\n    }\n    /**\n     * Debug current position state, with previous and following lines set by range\n     * @param range \n     */\n\n  }, {\n    key: \"debugState\",\n    value: function debugState() {\n      var _this = this;\n\n      var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      var _this$getPosition5 = this.getPosition(),\n          ln = _this$getPosition5.ln,\n          col = _this$getPosition5.col;\n\n      var lineIndex = ln - 1;\n\n      var lines = _.slice(this.lines, _.max([lineIndex - range, 0]), _.min([lineIndex + range + 1, this.lines.length]));\n\n      var numWidth = _.max(lines.map(function (l) {\n        return (l.ln + '').length;\n      }));\n\n      lines.forEach(function (line) {\n        var isCurrent = line.ln === ln;\n\n        _this.debugLine(line, numWidth, isCurrent ? col : 0);\n\n        if (isCurrent) {\n          _this.debugCursor(line.text, col, numWidth);\n        }\n      });\n      console.log();\n    }\n  }]);\n  return TextStream;\n}();\n\nvar _default = TextStream;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _TextStream = _interopRequireDefault(require(\"./TextStream\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _Node = _interopRequireWildcard(require(\"./Node\"));\n\nvar _constants = require(\"./constants\");\n\nvar State;\n\n(function (State) {\n  State[State[\"METADATA\"] = 0] = \"METADATA\";\n  State[State[\"NORMAL\"] = 1] = \"NORMAL\";\n  State[State[\"SINGLE_COMMENT\"] = 2] = \"SINGLE_COMMENT\";\n  State[State[\"MULTIPLE_COMMENT\"] = 3] = \"MULTIPLE_COMMENT\";\n  State[State[\"START\"] = 4] = \"START\";\n  State[State[\"TAG_START\"] = 5] = \"TAG_START\";\n  State[State[\"TAG_NAME\"] = 6] = \"TAG_NAME\";\n  State[State[\"ATTRIBUTE_LIST\"] = 7] = \"ATTRIBUTE_LIST\";\n  State[State[\"ATTRIBUTE_NAME\"] = 8] = \"ATTRIBUTE_NAME\";\n  State[State[\"ATTRIBUTE_ASSIGN\"] = 9] = \"ATTRIBUTE_ASSIGN\";\n  State[State[\"ATTRIBUTE_VALUE\"] = 10] = \"ATTRIBUTE_VALUE\";\n  State[State[\"ATTRIBUTE_FINISH\"] = 11] = \"ATTRIBUTE_FINISH\";\n  State[State[\"TAG_END\"] = 12] = \"TAG_END\";\n  State[State[\"LABEL_START\"] = 13] = \"LABEL_START\";\n  State[State[\"ENTITY_START\"] = 14] = \"ENTITY_START\";\n  State[State[\"ENTITY_BODY\"] = 15] = \"ENTITY_BODY\";\n  State[State[\"ENTITY_END\"] = 16] = \"ENTITY_END\";\n  State[State[\"END\"] = 17] = \"END\";\n  State[State[\"FINISH\"] = 18] = \"FINISH\";\n})(State || (State = {}));\n\n;\nvar stateNames = ['METADATA', 'NORMAL', 'SINGLE_COMMENT', 'MULTIPLE_COMMENT', 'START', 'TAG_START', 'TAG_NAME', 'ATTRIBUTE_LIST', 'ATTRIBUTE_NAME', 'ATTRIBUTE_ASSIGN', 'ATTRIBUTE_VALUE', 'ATTRIBUTE_FINISH', 'TAG_END', 'LABEL_START', 'ENTITY_START', 'ENTITY_BODY', 'ENTITY_END', 'END', 'FINISH'];\n\nvar getStateName = function getStateName(state) {\n  return stateNames[state];\n};\n\nvar countLineBreaks = function countLineBreaks(text) {\n  var result = text.match(_constants.P_LINE_BREAK);\n  return result ? result.length : 0;\n};\n\n;\n/**\n * Tokenizer class\n * @class\n */\n\nvar Tokenizer =\n/*#__PURE__*/\nfunction () {\n  (0, _createClass2.default)(Tokenizer, null, [{\n    key: \"from\",\n    value: function from(text, options) {\n      return new Tokenizer(text, options);\n    }\n  }]);\n  /**\n   * @param text \n   * @param options Constructor options\n   */\n\n  function Tokenizer(text, options) {\n    (0, _classCallCheck2.default)(this, Tokenizer);\n    (0, _defineProperty2.default)(this, \"text\", void 0);\n    (0, _defineProperty2.default)(this, \"stream\", void 0);\n    (0, _defineProperty2.default)(this, \"options\", void 0);\n    (0, _defineProperty2.default)(this, \"parsed\", void 0);\n    this.text = text;\n    this.stream = new _TextStream.default(text);\n    var defaultOptions = {\n      verbose: process && process.env.DEBUG === 'verbose'\n    };\n    this.options = _.defaults(options, defaultOptions);\n    this.parsed = false;\n  }\n\n  (0, _createClass2.default)(Tokenizer, [{\n    key: \"debug\",\n    value: function debug() {\n      if (this.options.verbose) {\n        var _console;\n\n        (_console = console).log.apply(_console, arguments);\n      }\n    }\n    /**\n     * Process a text and parse to AST\n     * @returns Root node of parsed AST\n     */\n\n  }, {\n    key: \"process\",\n    value: function process() {\n      var _this = this;\n\n      var text = this.text,\n          stream = this.stream;\n      var timeStart = Date.now();\n      var state = State.METADATA;\n      var start = 0;\n      var lastState = 0;\n      var lastPos = -1;\n      var states = {\n        unwrapped: false,\n        inline: false,\n        embedded: false,\n        isClosing: false,\n        key: undefined,\n        value: undefined\n      };\n\n      var root = _Node.default.create(_Node.NodeType.ROOT, undefined, {\n        source: text\n      });\n\n      var nodeStack = [];\n      var node = root;\n\n      var getNodeString = function getNodeString(node) {\n        return \"\".concat(node.type).concat(node.name ? \":\".concat(node.name) : '');\n      };\n\n      var debugStack = function debugStack(lastNode) {\n        if (!_this.options.verbose) {\n          return;\n        }\n\n        var separator = ' > ';\n        var stack = nodeStack.concat([node]);\n        var list = stack.map(function (n, i) {\n          var text = getNodeString(n);\n\n          if (i === stack.length - 1) {\n            text = _chalk.default.cyanBright(text);\n          } else {\n            text = _chalk.default.green(text);\n          }\n\n          return text;\n        });\n        var result = list.join(_chalk.default.redBright(separator));\n\n        if (lastNode) {\n          result += _chalk.default.grey(\"\".concat(separator).concat(getNodeString(lastNode)));\n        }\n\n        return result;\n      };\n\n      var pushNode = function pushNode(n) {\n        if (node.start === -1) {\n          node.start = stream.pos;\n        }\n\n        nodeStack.push(node);\n        node = n;\n\n        _this.debug(\"push: \".concat(debugStack(), \"\\n\"));\n      };\n\n      var popNode = function popNode(error) {\n        var lastNode = node;\n        node.end = stream.pos;\n\n        if (node.start === node.end || node.type === _Node.NodeType.PARAGRAPH && !node.hasChild() && node.parent) {\n          node.parent.removeChild(node);\n        }\n\n        node = nodeStack.pop();\n\n        _this.debug(\"pop : \".concat(debugStack(lastNode), \"\\n\"));\n\n        if (!node) {\n          throw createError(error || 'unexpected closing node');\n        }\n      }; // replace wrapping paragraph with current block tag\n\n\n      var levelUpBlock = function levelUpBlock() {\n        if (node.parent && node.parent.type === _Node.NodeType.PARAGRAPH) {\n          var blockNode = node;\n          popNode();\n          node.removeChild(blockNode);\n          popNode();\n          node.appendChild(blockNode);\n          pushNode(blockNode);\n        }\n      };\n\n      var createError = function createError(message) {\n        _this.debug(\"error: '\".concat(message, \"'\"));\n\n        _this.debug('current node:');\n\n        _this.debug(node.toJSON());\n\n        _this.debug('current parsing state:');\n\n        _this.debug(JSON.stringify(root, null, 2));\n\n        return new _ParseError.default(message, text, stream.pos);\n      };\n\n      while (state !== State.FINISH) {\n        // parse failure watcher\n        if (Date.now() - timeStart >= _constants.PROCESSING_TIMEOUT) {\n          this.debug('parsing timeout!');\n          state = State.FINISH;\n        }\n\n        if (state === lastState && lastPos === stream.pos) {\n          throw new Error('Parser fall into infinite loop!');\n        }\n\n        lastState = state;\n        lastPos = stream.pos;\n        this.debug(_chalk.default.magenta(\"# \".concat(getStateName(state), \", pos = \").concat(stream.pos)));\n\n        if (this.options.verbose) {\n          stream.debugState();\n        }\n\n        switch (state) {\n          case State.METADATA:\n            {\n              stream.eatWhile(_constants.P_WHITE_SPACES_EXT);\n\n              if (stream.match(_constants.T_METADATA_MARKER) || stream.match(_constants.P_ATTRIBUTE_LIST, {\n                consume: false\n              })) {\n                node.states.metadata = true;\n                state = State.ATTRIBUTE_LIST;\n              } else {\n                state = State.NORMAL;\n              }\n\n              break;\n            }\n\n          case State.NORMAL:\n            {\n              if (stream.sol(true) || stream.eol(true)) {\n                stream.eatWhile(_constants.P_WHITE_SPACE);\n              }\n\n              if (stream.match(_constants.P_PARAGRAPH_BREAK)) {\n                popNode();\n\n                if (node.states.unwrapped) {\n                  popNode();\n                }\n\n                break;\n              }\n\n              start = stream.pos;\n\n              if (node.type !== _Node.NodeType.PARAGRAPH && !node.isInlineBlock && stream.sol(true)) {\n                var child = node.createChild(_Node.NodeType.PARAGRAPH, undefined, {\n                  start: start\n                });\n                pushNode(child);\n              }\n\n              var originalText = stream.readTo(_constants.P_MARKER, {\n                toEOF: true\n              });\n              var _text = originalText;\n\n              if (_text) {\n                if (node.children.length === 0) {\n                  _text = _.trimStart(_text);\n                }\n\n                _text = _text.replace(_constants.P_SPACE_WRAPPED_LINE_BREAK, _constants.T_LINE_BREAK);\n                _text = _.trimEnd(_text, _constants.T_LINE_BREAKS);\n\n                if (_text) {\n                  node.appendText(_text, {\n                    start: start,\n                    end: stream.pos\n                  });\n                }\n              }\n\n              if (stream.match(_constants.P_PARAGRAPH_BREAK, {\n                consume: false\n              })) {\n                state = State.NORMAL;\n              } else {\n                state = State.START;\n              }\n\n              break;\n            }\n\n          case State.START:\n            {\n              start = stream.pos;\n              var ch = stream.eat(_constants.P_MARKER);\n              _constants.P_LABEL_START.lastIndex = 0;\n\n              if (ch === _constants.T_SINGLE_LINE_COMMENT) {\n                var rest = stream.eatWhile(_constants.T_SINGLE_LINE_COMMENT);\n\n                if (rest.length === 0) {\n                  state = State.SINGLE_COMMENT;\n                } else {\n                  state = State.MULTIPLE_COMMENT;\n                }\n              } else if (ch === _constants.T_TAG_START) {\n                state = State.TAG_START;\n              } else if (_constants.P_LABEL_START.test(ch)) {\n                states.unwrapped = true;\n                state = State.TAG_START;\n              } else if (ch === _constants.T_TAG_END) {\n                states.isClosing = true;\n                state = State.TAG_END;\n              } else if (ch === _constants.T_ENTITY_START) {\n                state = State.ENTITY_START;\n              } else if (stream.eof()) {\n                state = State.END;\n              } else {\n                throw createError('empty start');\n              }\n\n              break;\n            }\n\n          case State.SINGLE_COMMENT:\n          case State.MULTIPLE_COMMENT:\n            {\n              start = stream.pos;\n              var content = void 0;\n\n              if (state === State.SINGLE_COMMENT) {\n                content = stream.readTo(_constants.P_LINE_BREAK);\n              } else {\n                content = stream.readTo(_constants.P_MULTIPLE_LINE_COMMENT, {\n                  skipMatched: true\n                });\n              }\n\n              if (content) {\n                if (state === State.MULTIPLE_COMMENT) {\n                  content = content.replace(_constants.P_SPACE_WRAPPED_LINE_BREAK, '\\n');\n                }\n\n                content = _.trim(content);\n              }\n\n              if (content) {\n                node.createChild(_Node.NodeType.COMMENT, undefined, {\n                  start: start,\n                  end: stream.pos,\n                  content: content\n                });\n              }\n\n              state = State.NORMAL;\n              break;\n            }\n\n          case State.TAG_START:\n            {\n              if (stream.eat(_constants.T_TAG_CLOSING)) {\n                states.isClosing = true;\n                state = State.TAG_NAME;\n              } else if (stream.match(_constants.P_LINE_BREAK)) {\n                state = State.NORMAL;\n              } else if (node.type !== _Node.NodeType.ENTITY && (states.unwrapped || stream.eat(_constants.P_LABEL_START))) {\n                state = State.LABEL_START;\n              } else {\n                var _child = _Node.default.create(_Node.NodeType.TAG, '', {\n                  start: start\n                });\n\n                if (states.embedded) {\n                  _child.states.embedded = true;\n                  _child.states.metaKey = states.key;\n                  states.embedded = false;\n                } else {\n                  node.appendChild(_child);\n                }\n\n                pushNode(_child);\n                state = State.TAG_NAME;\n              }\n\n              if (state === State.NORMAL || state === State.LABEL_START) {\n                stream.pushCursor(start);\n                var tagName = stream.sol(true) ? 'BLOCK' : 'INLINE';\n                stream.popCursor();\n\n                if (node.type === _Node.NodeType.PARAGRAPH && tagName === 'BLOCK') {\n                  popNode();\n                }\n\n                var _child2 = node.createChild(_Node.NodeType.TAG, tagName, {\n                  start: start,\n                  states: {\n                    simpleBlock: true,\n                    unwrapped: states.unwrapped\n                  }\n                });\n\n                states.unwrapped = false;\n                pushNode(_child2);\n              }\n\n              break;\n            }\n\n          case State.TAG_NAME:\n            {\n              var name = stream.match(_constants.P_TAG_NAME);\n\n              if (!name) {\n                throw createError('expected tag name');\n              }\n\n              states.inline = name === 'INLINE';\n\n              if (states.isClosing) {\n                if (node.type === _Node.NodeType.PARAGRAPH) {\n                  stream.pushCursor(start);\n                  popNode();\n                  stream.popCursor();\n                }\n\n                if (name !== node.name) {\n                  throw createError('unexpected closing tag');\n                }\n\n                var _ch = stream.eat(_constants.T_TAG_END);\n\n                if (!_ch) {\n                  throw createError('invalid closing tag');\n                }\n\n                if (!states.inline && !stream.eol()) {\n                  throw createError('closing block tag must take the whole line');\n                }\n\n                state = State.TAG_END;\n              } else {\n                node.name = name;\n\n                if (node.isWrappingTag) {\n                  stream.pushCursor(node.start || 0);\n\n                  if (node.name === 'BLOCK' && !stream.sol(true)) {\n                    throw createError('unexpected start of block inline');\n                  }\n\n                  stream.popCursor();\n\n                  if (node.isBlock) {\n                    levelUpBlock();\n                  }\n                }\n\n                state = State.ATTRIBUTE_LIST;\n              }\n\n              break;\n            }\n\n          case State.ATTRIBUTE_LIST:\n            {\n              var spacePattern = node.states.simpleBlock || node.states.unwrapped ? _constants.P_WHITE_SPACE : _constants.P_WHITE_SPACES_EXT;\n              var spaces = stream.eatWhile(spacePattern);\n              var isParsingMetadata = node.states.metadata;\n\n              if (isParsingMetadata) {\n                var endOfFrontMatter = false;\n\n                if (stream.match(_constants.T_METADATA_MARKER)) {\n                  if (!stream.match(_constants.P_LINE_BREAK)) {\n                    throw createError('expected new line after metadata closed');\n                  }\n\n                  endOfFrontMatter = true;\n                }\n\n                var lineBreaks = countLineBreaks(spaces);\n\n                if (lineBreaks > 1) {\n                  endOfFrontMatter = true;\n                }\n\n                if (endOfFrontMatter) {\n                  state = State.NORMAL;\n                  node.states.metadata = false;\n                  break;\n                } // deal with simple block at the beginning\n\n\n                if (node.type === _Node.NodeType.ROOT && !stream.match(_constants.P_ATTRIBUTE_LIST, {\n                  consume: false\n                }) && lineBreaks === 1) {\n                  var _child3 = node.createChild(_Node.NodeType.TAG, 'BLOCK', {\n                    labels: node.labels,\n                    states: {\n                      unwrapped: true\n                    },\n                    metadata: node.metadata\n                  });\n\n                  node.clearLabels();\n                  node.clearMetadata();\n                  pushNode(_child3);\n                  state = State.NORMAL;\n                  break;\n                }\n              }\n\n              if (stream.match(_constants.P_LINE_BREAK)) {\n                state = State.NORMAL;\n              } else if (stream.eat(_constants.T_TAG_END)) {\n                state = State.TAG_END;\n              } else if (stream.match(_constants.P_LABEL_START)) {\n                state = State.LABEL_START;\n              } else {\n                if (!(spaces || isParsingMetadata) && this.stream.pos > 1) {\n                  if (_.isEmpty(node.attributes) && _constants.P_ATTRIBUTE_ASSIGN.test(stream.peek())) {\n                    states.key = node.name;\n                    node.name = 'BLOCK';\n                    node.states.simpleBlock = true;\n                    levelUpBlock();\n                    state = State.ATTRIBUTE_ASSIGN;\n                    break;\n                  } else {\n                    throw createError('expecting end of tag \"}\" or attribute list');\n                  }\n                }\n\n                state = State.ATTRIBUTE_NAME;\n\n                if (stream.match(_constants.P_ATTRIBUTE_LIST, {\n                  consume: false\n                })) {\n                  state = State.ATTRIBUTE_NAME;\n                } else {\n                  state = State.NORMAL;\n                }\n              }\n\n              break;\n            }\n\n          case State.ATTRIBUTE_NAME:\n            {\n              var _key = stream.match(_constants.P_ATTRIBUTE_NAME);\n\n              if (!_key) {\n                throw createError('expecting attribute name');\n              }\n\n              states.key = _key;\n              state = State.ATTRIBUTE_ASSIGN;\n              break;\n            }\n\n          case State.ATTRIBUTE_ASSIGN:\n            {\n              var _ch2 = stream.peek();\n\n              if (_ch2 === _constants.T_TAG_END) {\n                state = State.ATTRIBUTE_FINISH;\n              } else {\n                _ch2 = stream.eat(_constants.P_ATTRIBUTE_ASSIGN);\n\n                if (!_ch2) {\n                  throw createError('expecting assignment \"=\" or \":\"');\n                }\n\n                if (_constants.P_ASSIGN_YAML.test(_ch2)) {\n                  stream.eatSpaces();\n                }\n\n                state = State.ATTRIBUTE_VALUE;\n              }\n\n              break;\n            }\n\n          case State.ATTRIBUTE_VALUE:\n            {\n              var _ch3 = stream.peek();\n\n              var _value = void 0;\n\n              if (_ch3 === _constants.T_TAG_START || _ch3 === _constants.T_ENTITY_START) {\n                states.embedded = true;\n                state = State.START;\n                break;\n              } else if (_ch3 === _constants.T_STRING_START) {\n                _value = stream.match(_constants.P_STRING_LITERAL_QUOTED);\n                _value = JSON.parse(_value);\n              } else if (stream.match(_constants.P_DATE_LITERAL)) {\n                _value = stream.lastMatch;\n                _value = new Date(_value);\n              } else if (_constants.P_NUMBER_START.test(_ch3)) {\n                _value = stream.match(_constants.P_NUMBER_LITERAL);\n                _value = parseFloat(_value);\n              } else if (stream.match(_constants.P_BOOLEAN_TRUE)) {\n                _value = true;\n              } else if (stream.match(_constants.P_BOOLEAN_FALSE)) {\n                _value = false;\n              } else {\n                _value = stream.match(_constants.P_STRING_LITERAL_UNQUOTED);\n\n                if (_.isNull(_value)) {\n                  throw createError('unrecognized attribute value');\n                }\n              }\n\n              if (_.isNull(_value)) {\n                throw createError('invalid attribute value');\n              }\n\n              states.value = _value;\n              state = State.ATTRIBUTE_FINISH;\n              break;\n            }\n\n          case State.ATTRIBUTE_FINISH:\n            {\n              var _key2 = states.key,\n                  _value2 = states.value;\n              states.key = undefined;\n              states.value = undefined;\n\n              if (_.isUndefined(_value2)) {\n                _value2 = true;\n              }\n\n              if (node.states.metadata) {\n                node.setMetadata(_key2, _value2);\n              } else {\n                node.setAttribute(_key2, _value2);\n              }\n\n              this.debug(\"# \".concat(node.states.metadata ? 'metadata' : 'attribute', \" \").concat(_key2, \"=\").concat(JSON.stringify(_value2)));\n              this.debug();\n              state = State.ATTRIBUTE_LIST;\n              break;\n            }\n\n          case State.TAG_END:\n            {\n              var parseMetadata = node.isBlockTag && !states.isClosing;\n              var tagNode = node;\n              states.inline = tagNode.isInlineBlock;\n\n              if (!node.isWrappingTag || states.isClosing) {\n                if (node.type === _Node.NodeType.PARAGRAPH) {\n                  popNode();\n                }\n\n                popNode();\n\n                if (node.type === _Node.NodeType.ENTITY) {\n                  // copy tag properties to entity and remove temporary tag node\n                  node.setAttributes(tagNode.attributes);\n                  node.name = tagNode.name;\n                  node.removeChild(tagNode);\n                  state = State.ENTITY_END;\n                  tagNode = node;\n                  popNode();\n                }\n\n                if (tagNode.states.embedded) {\n                  if (node.states.metadata) {\n                    node.setMetadata(tagNode.states.metaKey, tagNode);\n                  } else {\n                    node.setAttribute(tagNode.states.metaKey, tagNode);\n                  }\n                }\n              }\n\n              if (states.isClosing && !states.inline) {\n                stream.skipOver(_constants.P_LINE_BREAK);\n              }\n\n              states.isClosing = false;\n              states.inline = false;\n\n              if (parseMetadata) {\n                state = State.METADATA;\n              } else if (tagNode.states.embedded && (!tagNode.isWrappingTag || states.isClosing)) {\n                state = State.ATTRIBUTE_LIST;\n              } else {\n                state = State.NORMAL;\n              }\n\n              break;\n            }\n\n          case State.LABEL_START:\n            {\n              var label = stream.match(_constants.P_LABEL_NAME);\n\n              if (!label) {\n                throw createError('expected label name');\n              }\n\n              node.addLabel(label);\n              state = State.ATTRIBUTE_LIST;\n              break;\n            }\n\n          case State.ENTITY_START:\n            {\n              var _child4 = _Node.default.create(_Node.NodeType.ENTITY, '', {\n                start: start\n              });\n\n              if (states.embedded) {\n                _child4.states.embedded = true;\n                _child4.states.metaKey = states.key;\n                states.embedded = false;\n              } else {\n                node.appendChild(_child4);\n              }\n\n              pushNode(_child4);\n              state = State.ENTITY_BODY;\n              break;\n            }\n\n          case State.ENTITY_BODY:\n            {\n              start = stream.pos;\n\n              var _text2 = stream.readTo(_constants.T_ENTITY_END, {\n                skipMatched: true\n              });\n\n              if (!_text2) {\n                throw createError('empty entity');\n              } else if (_text2.search(_constants.P_LINE_BREAK) !== -1) {\n                throw createError('unexpected line break of entity');\n              }\n\n              node.appendText(_text2, {\n                start: start,\n                end: start + _text2.length\n              });\n\n              var _ch4 = stream.eat(_constants.T_TAG_START);\n\n              if (_ch4) {\n                state = State.TAG_START;\n              } else {\n                state = State.ENTITY_END;\n              }\n\n              break;\n            }\n\n          case State.ENTITY_END:\n            {\n              popNode();\n              state = State.NORMAL;\n              break;\n            }\n\n          case State.END:\n            {\n              if (node.type !== _Node.NodeType.ROOT) {\n                popNode();\n              }\n\n              state = State.FINISH;\n              break;\n            }\n\n          case State.FINISH:\n            {\n              break;\n            }\n        }\n      }\n\n      root.toString();\n      this.parsed = true;\n      this.debug('parsed result:');\n      this.debug(JSON.stringify(root.toJSON(), null, 2));\n      return root;\n    }\n  }]);\n  return Tokenizer;\n}();\n\nvar _default = Tokenizer;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n/**\n * Class holding text line data\n */\n\n\nvar TextLine =\n/*#__PURE__*/\nfunction () {\n  function TextLine(lines, text, ln, offset) {\n    (0, _classCallCheck2.default)(this, TextLine);\n    (0, _defineProperty2.default)(this, \"lines\", void 0);\n    (0, _defineProperty2.default)(this, \"text\", void 0);\n    (0, _defineProperty2.default)(this, \"ln\", void 0);\n    (0, _defineProperty2.default)(this, \"offset\", void 0);\n    this.lines = lines;\n    this.text = text;\n    this.ln = ln;\n    this.offset = offset;\n  }\n  /**\n   * Get the previous line\n   */\n\n\n  (0, _createClass2.default)(TextLine, [{\n    key: \"prev\",\n    value: function prev() {\n      return this.lines[this.ln - 2];\n    }\n    /**\n     * Get the next line\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      return this.lines[this.ln];\n    }\n    /**\n     * Get text length of the line\n     */\n\n  }, {\n    key: \"toJSON\",\n\n    /**\n     * Convert to JSON serializable object\n     */\n    value: function toJSON() {\n      return {\n        ln: this.ln,\n        start: this.start,\n        end: this.end,\n        text: this.text\n      };\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.text.length;\n    }\n    /**\n     * Start position of the line, alias of `offset`\n     */\n\n  }, {\n    key: \"start\",\n    get: function get() {\n      return this.offset;\n    }\n    /**\n     * End position of the line\n     */\n\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.offset + this.text.length;\n    }\n  }]);\n  return TextLine;\n}();\n\nvar _default = TextLine;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar ParseError =\n/*#__PURE__*/\nfunction (_Error) {\n  (0, _inherits2.default)(ParseError, _Error);\n\n  function ParseError(message, text, pos) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseError);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseError).call(this, message));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"message\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"text\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"pos\", void 0);\n    _this.message = message;\n    _this.text = text;\n    _this.pos = pos;\n    return _this;\n  }\n\n  return ParseError;\n}((0, _wrapNativeSuper2.default)(Error));\n\nexports.default = ParseError;"],"sourceRoot":""}