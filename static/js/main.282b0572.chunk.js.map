{"version":3,"sources":["../../zaml-parser/lib/util.js","Pane.tsx","codemirror-mode.ts","SourceEditor.tsx","VisualNode.tsx","VisualEditor.tsx","logo.svg","TreeNode.tsx","TreePathItem.tsx","TreePath.tsx","TreeToolbar.tsx","TreeView.tsx","Editor.tsx","sample/contract.ts","App.tsx","serviceWorker.ts","index.tsx","../../zaml-parser/lib/index.js","../../zaml-parser/lib/constants.js","../../zaml-parser/lib/Node.js","../../zaml-parser/lib/TextStream.js","../../zaml-parser/lib/ParseError.js","../../zaml-parser/lib/Tokenizer.js","../../zaml-parser/lib/TextLine.js"],"names":["_interopRequireWildcard","__webpack_require__","Object","defineProperty","exports","value","formatValue","parseValue","P_DATE_FORMAT","test","Date","spacer","stringify","node","options","indent","arguments","length","undefined","pos","text","_","isNumber","space","defaults","_constants","DEFAULT_INDENT_SPACES","simple","toSource","simpleTag","isSimpleTag","start","textStart","type","_Node","NodeType","TEXT","content","isEmpty","metadata","T_METADATA_MARKER","T_LINE_BREAK","each","key","concat","default","ENTITY","child","first","children","Error","T_ENTITY_START","T_ENTITY_END","TAG","isBlock","T_TAG_START","name","listCount","keys","attributes","forEach","i","T_SPACE","isBoolean","labels","label","T_TAG_END","PARAGRAPH","isWrappingTag","subText","next","nextSibling","trimEnd","isLastChild","isBlockTag","T_TAG_CLOSING","end","textEnd","replace","isDate","toISOString","isString","P_STRING_LITERAL_UNQUOTED_TESTER","JSON","isNaN","Infinity","repeat","Pane","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","title","className","react_default","a","createElement","classNames","React","Component","defaultProps","CodeMirror","defineSimpleMode","regex","token","dedent","comment","meta","dontIndentStates","lineComment","codeMirrorOptions","mode","lineNumbers","lineWrapping","SourceEditor","_this","state","nextProps","editor","height","setSize","setValue","_this2","onChange","react_codemirror2","onBeforeChange","data","setState","_onChange","_x","_x2","_x3","apply","toString","editorDidMount","zaml","VisualNode","handleContextMenu","event","onContextMenu","preventDefault","stopPropagation","n","parent","element","_this$props2","selectedNode","selected","ROOT","node-name","node-id","id","href","url","assign","push","map","block","toLowerCase","VisualEditor","ContextMenuTarget","currentNode","root","selection","window","getSelection","rangeCount","range","getRangeAt","commonNode","getNodeByElement","commonAncestorContainer","startNode","startContainer","endNode","endContainer","createBlockByRange","startOffset","endOffset","removeAllRanges","flatten","target","_this$props3","anchorNode","focusNode","createEntities","alert","_this$props4","removeEntity","onSelect","_this$props5","VisualNode_VisualNode","nodeType","TEXT_NODE","classList","contains","parentElement","getAttribute","getNodeById","e","commonEntityNames","wrapperNode","menu","menuItem","disabled","descriptor","menuDivider","onClick","handleCreateBlock","handleRemoveBlock","handleCreateEntity","prompt","handleRemoveEntity","handleInspect","_extends","source","prototype","hasOwnProperty","NodePart","_ref","_ref2","fill","d","_ref3","_ref4","cx","cy","r","_ref5","_ref6","x","y","width","rx","ry","_ref7","_ref8","points","logo_SvgComponent","data-name","viewBox","p","nil","TreeNode","_selectedPart","selectedPart","expandedNodes","onSelectPart","onExpansionChange","onMouseEnter","onMouseOut","expanded","indexOf","isRoot","Whole","Header","commonProps","_onMouseEnter","_onMouseOut","react","onlyText","isEntity","isTag","firstChild","nameStart","nameEnd","node-selected","truncate","Footer","TreePathItem","TreePath","nodeList","buildNodeList","includes","list","unshift","TreePathItem_TreePathItem","TreeToolbar","TreeView","toConsumableArray","without","nodeIds","path","union","onHover","_this$state","TreeToolbar_TreeToolbar","TreeNode_TreeNode","handleExpansionChange","TreePath_TreePath","Node","parse","create","err","message","from","ln","col","to","sourceBlock","querySelector","console","dir","line","sourceText","findOneBy","createEntitiesFromText","error","Editor","defaultSource","sourcePaneHeight","onResize","throttle","bind","assertThisInitialized","preventSourceChange","addEventListener","passive","removeEventListener","nextState","log","innerHeight","_this3","hoveredNode","index_esm","split","defaultSize","minSize","Pane_Pane","SourceEditor_SourceEditor","handleSourceChange","VisualEditor_VisualEditor","handleNodeChange","TreeView_TreeView","App","Editor_Editor","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_interopRequireDefault","tokenize","enumerable","get","_Tokenizer","_TextStream","TextLine","_ParseError","process","warn","_default","ParseError","Tokenizer","TextStream","PROCESSING_TIMEOUT","P_MARKER","END_MARKERS","START_MARKERS","P_FULL_WIDTH_CHARACTER","P_BOOLEAN_FALSE","P_BOOLEAN_TRUE","P_STRING_LITERAL_UNQUOTED","P_STRING_LITERAL_QUOTED","P_NUMBER_LITERAL","P_NUMBER_START","P_DATE_LITERAL","T_STRING_START","P_TAG_NAME","P_ATTRIBUTE_LIST","P_ATTRIBUTE_NAME","P_ATTRIBUTE_ASSIGN","P_LABEL_NAME","P_LABEL_START","P_LIST_SEPARATOR","P_WHITE_SPACES_EXT","P_WHITE_SPACE","P_PARAGRAPH_BREAK","P_SPACE_WRAPPED_LINE_BREAK","P_LINE_BREAK","P_ASSIGN_YAML","T_TAG_ATTRIBUTE_FAVORED_ASSIGN","T_METADATA_FAVORED_ASSIGN","T_PARAGRAPH_BREAK","T_LINE_BREAKS","T_ASSIGN_YAML","T_ASSIGN_XML","P_MULTIPLE_LINE_COMMENT","T_SINGLE_LINE_COMMENT","T_TAB","createPattern","combinePatterns","isRegExp","escapeRegExp","join","flags","RegExp","find","_find","WrappingTags","BlockTags","BlockNodeTypes","NodeTypes","_regenerator","_asyncToGenerator2","_toConsumableArray2","_slicedToArray2","_objectSpread2","_classCallCheck2","_createClass2","_defineProperty2","_util","_2","nanoid","values","defaultFinderCallback","testNode","pattern","isFunction","is","TypeError","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","return","_findOne","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","parseJson","json","parseJsonMap","childData","appendChild","normalize","toJsonMap","mapValues","toJSON","isPlainObject","_props$source","_props$start","_props$end","states","_props$attributes","_props$metadata","_props$labels","_props$content","_props$text","_source","appendText","FRAGMENT","COMMENT","isArray","n1","n2","ancestor","path1","path2","shift","paths","isText","RangeError","_parent","fragment","createFragment","createInlineBlock","substring","insertBefore","removeChild","findCommonAncestor","_paths","baseStartNode","baseEndNode","_startIndex","_sort","sort","_sort2","startIndex","endIndex","_fragment","extractNodes","isStartSided","isSidedDescendantOf","isEndSided","foundBlock","findOne","_block2","createBlock","insertAt","inserting","startText","_block","endText","expression","toUpperCase","substr","validNode","side","lastChild","prependChild","pull","index","pullAt","_this$children","splice","ref","validParent","refIndex","newChild","oldChild","validChild","replaceChild","set","merge","has","unset","isObject","selector","one","intersection","findBy","hasChild","findTextByRange","callback","stack","childLength","merged","textNode","createText","slice","mergeText","items","entityNodes","sortBy","lastPos","item","entityNode","createChild","replaceWith","entities","_this4","cache","Map","_extractEntities","mark","_callee","extractor","textList","wrap","_context","prev","extract","sent","stop","previousSibling","_options$position","position","_options$textPosition","textPosition","omitBy","isUndefined","rootNode","getRootNode","last","siblings","childIndex","_TextLine","_chalk","LINE_BREAKS","tabSize","lines","markers","cursorStack","init","matched","offset","lastIndex","exec","_text","_text2","lineOffsetIndexes","lineIndex","sortedLastIndex","trimSpaces","_this$getPosition","getPosition","trimStart","_this$getPosition2","charAt","ok","ch","lastMatch","chr","string","eat","eof","peek","caseInsensitive","left","_options$toEOL","toEOL","_options$toEOF","toEOF","_options$consume","consume","_options$skipMatched","skipMatched","_this$search","search","_line","readTo","nextLine","read","_options$consume2","_this$search2","marker","extend","_data","pop","trim","numWidth","bgBlue","blueBright","padStart","_this$getPosition5","max","min","l","isCurrent","debugLine","debugCursor","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_assertThisInitialized2","_wrapNativeSuper2","_Error","State","stateNames","getStateName","countLineBreaks","stream","defaultOptions","verbose","NODE_ENV","PUBLIC_URL","DEBUG","parsed","_console","timeStart","now","METADATA","lastState","unwrapped","inline","embedded","isClosing","nodeStack","getNodeString","debugStack","lastNode","cyanBright","green","redBright","grey","pushNode","debug","popNode","createError","levelUpBlock","blockNode","FINISH","magenta","debugState","eatWhile","ATTRIBUTE_LIST","NORMAL","sol","eol","isInlineBlock","START","SINGLE_COMMENT","MULTIPLE_COMMENT","TAG_START","TAG_END","ENTITY_START","END","TAG_NAME","LABEL_START","_child","metaKey","pushCursor","tagName","popCursor","_child2","simpleBlock","spacePattern","spaces","isParsingMetadata","endOfFrontMatter","lineBreaks","_child3","clearLabels","clearMetadata","ATTRIBUTE_ASSIGN","ATTRIBUTE_NAME","_key","_ch2","ATTRIBUTE_FINISH","eatSpaces","ATTRIBUTE_VALUE","_ch3","_value","parseFloat","isNull","_key2","_value2","setMetadata","setAttribute","parseMetadata","tagNode","setAttributes","ENTITY_END","skipOver","addLabel","_child4","ENTITY_BODY"],"mappings":"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","file":"static/js/main.282b0572.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatValue = formatValue;\nexports.parseValue = parseValue;\nexports.spacer = spacer;\nexports.stringify = stringify;\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Node = _interopRequireWildcard(require(\"./Node\"));\n\nvar P_DATE_FORMAT = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z$/;\n/**\n * Stringify attribute value\n * @param value \n */\n\nfunction formatValue(value) {\n  if (_.isDate(value)) {\n    return value.toISOString().replace(/T00:00:00\\.000Z$/, '');\n  } else if (_.isString) {\n    return _constants.P_STRING_LITERAL_UNQUOTED_TESTER.test(value) ? value : JSON.stringify(value);\n  } else if (_.isBoolean(value)) {\n    return JSON.stringify(value);\n  } else if (_.isNumber(value) && !_.isNaN(value) && value !== Infinity || value !== -Infinity) {\n    return JSON.stringify(value);\n  } else {\n    return null;\n  }\n}\n/**\n * Parse attribute value\n * @param value \n */\n\n\nfunction parseValue(value) {\n  if (P_DATE_FORMAT.test(value)) {\n    return new Date(value);\n  }\n\n  return value;\n}\n/**\n * Generate indent spaces\n * @param space \n * @param indent \n */\n\n\nfunction spacer(space, indent) {\n  if (indent <= 0) return '';\n  return _.repeat(_constants.T_SPACE, space * indent);\n}\n/**\n * Stringify node\n * @param node \n * @param [options]\n * @param [options.space] White spaces each indent\n * @param [options.simple] Enable simple block when suitable\n * @param [options.toSource] To ZAML source code\n * @param [indent] Initial indent, increases 1 each block\n * @param Initial position\n */\n\n\nfunction stringify(node, options) {\n  var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n  var pos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var text = '';\n\n  if (_.isNumber(options)) {\n    options = {\n      space: options\n    };\n  }\n\n  options = _.defaults(options, {\n    space: _constants.DEFAULT_INDENT_SPACES,\n    simple: false,\n    toSource: false\n  });\n  var simpleTag = options.simple && node.isSimpleTag;\n\n  if (options.toSource) {\n    node.start = pos;\n  } else {\n    node.textStart = pos;\n  }\n\n  if (node.type === _Node.NodeType.TEXT) {\n    text += node.content;\n  } else {\n    if (options.toSource && !_.isEmpty(node.metadata)) {\n      text += _constants.T_METADATA_MARKER + _constants.T_LINE_BREAK;\n\n      _.each(node.metadata, function (value, key) {\n        text += \"\".concat(key, \": \");\n\n        if (value instanceof _Node.default) {\n          text += stringify(value, options, 0, pos + text.length);\n        } else {\n          text += formatValue(value);\n        }\n\n        text += _constants.T_LINE_BREAK;\n      });\n\n      text += _constants.T_METADATA_MARKER + _constants.T_LINE_BREAK;\n    }\n\n    if (node.type === _Node.NodeType.ENTITY) {\n      var child = _.first(node.children);\n\n      if (!child) {\n        throw new Error('missing text node of entity');\n      }\n\n      if (options.toSource) {\n        text += _constants.T_ENTITY_START;\n      }\n\n      text += stringify(child, options, indent, pos + text.length);\n\n      if (options.toSource) {\n        text += _constants.T_ENTITY_END;\n      }\n    }\n\n    if (options.toSource && (node.type === _Node.NodeType.TAG || node.type === _Node.NodeType.ENTITY)) {\n      if (node.isBlock) {\n        text += spacer(options.space, indent);\n      }\n\n      if (!(simpleTag && node.children.length === 1)) {\n        text += _constants.T_TAG_START;\n      }\n\n      if (!simpleTag) {\n        text += node.name;\n      }\n\n      var listCount = 0;\n\n      _.keys(node.attributes).forEach(function (key, i) {\n        var value = node.attributes[key];\n        listCount++;\n\n        if (!simpleTag || listCount > 1) {\n          text += _constants.T_SPACE;\n        }\n\n        if (_.isBoolean(value) && value) {\n          text += key;\n        } else if (value instanceof _Node.default) {\n          text += stringify(node, options, 0, pos + text.length);\n        } else {\n          text += \"\".concat(key, \"=\").concat(formatValue(value));\n        }\n      });\n\n      _.each(node.labels, function (label, i) {\n        listCount++;\n\n        if (!simpleTag || listCount > 1) {\n          text += _constants.T_SPACE;\n        }\n\n        text += \"#\".concat(label);\n      });\n\n      text += simpleTag ? _constants.T_SPACE : _constants.T_TAG_END;\n\n      if (node.isBlock) {\n        text += _constants.T_LINE_BREAK;\n      }\n    }\n\n    if (options.toSource && node.type === _Node.NodeType.PARAGRAPH) {\n      text += spacer(options.space, indent);\n    }\n\n    if (node.isBlock || node.isWrappingTag && !_.isEmpty(node.children)) {\n      node.children.forEach(function (child) {\n        var subText = stringify(child, options, indent + 1, pos + text.length);\n        text += subText;\n      });\n    }\n\n    var next = node.nextSibling;\n\n    if (node.isBlock) {\n      if (options.toSource) {\n        text = _.trimEnd(text, _constants.T_LINE_BREAK);\n      }\n\n      text += _constants.T_LINE_BREAK;\n\n      if (node.type === _Node.NodeType.PARAGRAPH && !node.isLastChild) {\n        text += _constants.T_LINE_BREAK;\n      }\n    }\n\n    if (options.toSource && node.isWrappingTag) {\n      if (node.isBlockTag) {\n        text += spacer(options.space, indent);\n      }\n\n      if (simpleTag) {\n        if (node.children.length > 1) {\n          text += _constants.T_TAG_END;\n        }\n      } else {\n        text += _constants.T_TAG_START + _constants.T_TAG_CLOSING + node.name + _constants.T_TAG_END;\n      }\n\n      if (node.isBlockTag) {\n        text += _constants.T_LINE_BREAK;\n\n        if (next && next.isBlock) {\n          text += _constants.T_LINE_BREAK;\n        }\n      }\n    }\n  }\n\n  if (options.toSource) {\n    node.end = node.start + text.length;\n  } else {\n    node.textEnd = node.textStart + text.length;\n  }\n\n  return text.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n');\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './Editor.css';\n\ninterface Props {\n  title: string;\n  className: string;\n}\n\nexport default class Pane extends React.Component<Props> {\n\n  static propTypes = {\n    title: PropTypes.string,\n    className: PropTypes.string,\n  }\n\n  static defaultProps: Props = {\n    title: 'pane',\n    className: '',\n  }\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const { title, className, children } = this.props;\n    return (\n      <div className={classNames('pane', className)}>\n        <div className=\"pane-title\"><h2>{title}</h2></div>\n        <div className=\"pane-content\">\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n","import CodeMirror from 'codemirror';\nimport 'codemirror/addon/mode/simple';\n\n// https://codemirror.net/demo/simplemode.html\n// TODO support error linting\n\n(CodeMirror as any).defineSimpleMode(\"zaml\", {\n  // The start state contains the rules that are initially used\n  start: [\n    // Block labels\n    {regex: /#[^#\\s\\n}]+/, token: 'variable-3'},\n    // Entity tag & block tag without attributes\n    {regex: /{\\/?([^\\s}]+)}/, token: 'keyword'},\n    // attribute names\n    {regex: /[^\\s{\\n]+(?=[:：=][^\\n])/, token: 'variable-2'},\n    // Block brackets\n    {regex: /{|}/, token: 'def'},\n    // Block starting tag\n    {regex: /(?={)[^\\s}]+/, token: 'keyword'},\n    // Entity text content\n    {regex: /\\[[^\\]]+\\]/, token: \"string\"},\n    // Block tag\n    {regex: /(?:BLOCK|INLINE)\\b/, token: \"keyword\"},\n    // Special values\n    {regex: /true|false|null|undefined/, token: \"atom\"},\n    // Numbers\n    {regex: /0x[a-f\\d]+|[-+]?(?:\\.\\d+|\\d+\\.?\\d*)(?:e[-+]?\\d+)?/i, token: \"number\"},\n    // Single line comment\n    {regex: /~[^~].*/, token: \"comment\"},\n    // Multi-line comment start\n    {regex: /~~~/, token: \"comment\", next: \"comment\"},\n    // ?\n    {regex: /\\/(?:[^\\\\]|\\\\.)*?\\//, token: \"variable-3\"},\n    // Intends\n    {regex: /[\\{]/, indent: true},\n    {regex: /[\\}]/, dedent: true},\n    // {regex: /[a-z$][\\w$]*/, token: \"variable\"},\n    // {regex: /<</, token: \"meta\", mode: {spec: \"xml\", end: />>/}}\n  ],\n  // The multi-line comment state.\n  comment: [\n    // Multi-line comment ends\n    {regex: /.*?~~~/, token: \"comment\", next: \"start\"},\n    // Multi-line comment continues\n    {regex: /.*/, token: \"comment\"}\n  ],\n  // The meta property contains global information about the mode. It\n  // can contain properties like lineComment, which are supported by\n  // all modes, and also directives like dontIndentStates, which are\n  // specific to simple modes.\n  meta: {\n    dontIndentStates: [\"comment\"],\n    lineComment: \"~\"\n  }\n});\n","import React from 'react';\nimport PropTypes, { number } from 'prop-types';\nimport classNames from 'classnames';\nimport codemirror from 'codemirror';\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport './codemirror-mode';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\n\ninterface Props {\n  value: string;\n  height: number;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  value: string;\n}\n\nconst codeMirrorOptions: codemirror.EditorConfiguration = {\n  mode: 'zaml',\n  lineNumbers: true,\n  lineWrapping: true,\n};\n\nexport default class SourceEditor extends React.Component<Props, State> {\n\n  static propTypes = {\n    value: PropTypes.string,\n    height: PropTypes.number,\n    onChange: PropTypes.func,\n  }\n\n  static defaultProps: Props = {\n    value: '',\n    height: -1,\n    onChange: () => {},\n  }\n\n  public editor?: CodeMirror.Editor;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      value: props.value,\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.editor) {\n      if (nextProps.height !== this.props.height && this.editor) {\n        this.editor.setSize(null, nextProps.height);\n      }\n      if (nextProps.value !== this.props.value) {\n        this.editor.setValue(nextProps.value);\n      }\n    }\n  }\n\n  render() {\n    const { onChange } = this.props;\n    const { value } = this.state;\n    return (\n      <div className=\"zaml-source\">\n        <CodeMirror\n          value={value}\n          options={codeMirrorOptions}\n          onBeforeChange={(editor, data, value) => this.setState({ value })}\n          onChange={(editor, data, value) => onChange(value)}\n          editorDidMount={editor => this.editor = editor}\n        />\n      </div>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport classNames from 'classnames';\nimport './VisualNode.css';\n\nconst { NodeType } = zaml;\n\nconst nil = () => {};\n\ninterface Props {\n  node?: zaml.Node;\n  selectedNode?: zaml.Node;\n  onContextMenu: (event: React.MouseEvent, node: zaml.Node) => void;\n}\n\nexport default class VisualNode extends React.Component<Props> {\n\n  static propTypes = {\n  }\n\n  static defaultProps: Props = {\n    onContextMenu: nil,\n  }\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  handleContextMenu = (event: React.MouseEvent) => {\n    const { node, onContextMenu } = this.props;\n    event.preventDefault();\n    event.stopPropagation();\n    let n = node;\n    if (n && n.type === NodeType.TEXT) {\n      n = n.parent;\n    }\n    if (n) {\n      onContextMenu(event, n);\n    }\n  }\n\n  render() {\n    const { node, selectedNode } = this.props;\n    let element: string | null;\n    if (!node) return null;\n    const selected = node === selectedNode;\n    let children: any = [];\n    if (node.type === NodeType.ROOT) {\n      element = 'div';\n    } else if (node.type === NodeType.PARAGRAPH) {\n      element = 'p';\n    } else if (node.type === NodeType.TEXT) {\n      element = 'span';\n    } else if (node.type === NodeType.ENTITY) {\n      if (node.name === 'LINK') {\n        return (\n          <a\n            className=\"zaml-entity\"\n            node-name=\"link\"\n            node-id={node.id}\n            href={node.attributes.url}\n          >\n            <VisualNode\n              node-id={node.children[0].id}\n              {...this.props}\n              node={node.children[0]}\n            />\n          </a>\n        );\n      } else {\n        element = 'span';\n      }\n    } else if (node.type === NodeType.TAG) {\n      // children.push(\n      //   <span key=\"attributes\" className=\"attributes\">{node.name}</span>\n      // );\n      if (node.isBlock) {\n        element = 'div';\n      } else {\n        element = 'span';\n      }\n    } else {\n      element = null;\n    }\n    if (!element) {\n      return null;\n    }\n    if (!_.isEmpty(node.children)) {\n      children.push(\n        <span key=\"children\" className=\"children\">\n          {_.map(node.children, (child, i) => (\n            <VisualNode {...this.props} key={i} node={child} />\n          ))}\n        </span>\n      );\n    } else if (node.type === 'text') {\n      children.push(\n        node.content\n      );\n    }\n    return React.createElement(element, {\n      className: classNames('zaml-node', `${node.type}`, { block: node.isBlock, selected }),\n      'node-name': node.name && node.name.toLowerCase(),\n      'node-id': node.id,\n      // onContextMenu: this.handleContextMenu,\n    }, children);\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes, { node } from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport { ContextMenuTarget, Menu, MenuItem, MenuDivider } from \"@blueprintjs/core\"\nimport VisualNode from './VisualNode';\nimport './VisualEditor.css';\nimport 'react-contexify/dist/ReactContexify.min.css';\n\nconst { NodeType } = zaml;\n\ninterface Props {\n  commonEntityNames?: string[];\n  root?: zaml.Node;\n  selectedNode?: zaml.Node;\n  onSelect: (node?: zaml.Node) => void;\n  onChange: (node?: zaml.Node, selected?: zaml.Node) => void;\n}\n\ninterface State {\n}\n\n@ContextMenuTarget\nexport default class VisualEditor extends React.Component<Props, State> {\n\n  static propTypes = {\n    commonEntityNames: PropTypes.arrayOf(PropTypes.string),\n    root: PropTypes.shape({}),\n    selectedNode: PropTypes.shape({}),\n    onSelect: PropTypes.func,\n  }\n\n  static defaultProps: Props = {\n    commonEntityNames: ['PER', 'ORG', 'LOC', 'DATE'],\n    onSelect: () => {},\n    onChange: () => {},\n  }\n\n  public currentNode?: zaml.Node;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  handleContextMenu = (event: React.MouseEvent, node?: zaml.Node) => {\n    this.currentNode = node;\n    this.setState({ node });\n  }\n\n  handleCreateBlock() {\n    const { root, onChange } = this.props;\n    const selection = window.getSelection();\n    if (selection.rangeCount === 0) return;\n    const range = selection.getRangeAt(0);\n    const commonNode = this.getNodeByElement(range.commonAncestorContainer as HTMLElement);\n    let startNode = this.getNodeByElement(range.startContainer as HTMLElement);\n    let endNode = this.getNodeByElement(range.endContainer as HTMLElement);\n    if (!commonNode || !startNode || !endNode) {\n      return;\n    }\n    const block = zaml.Node.createBlockByRange({\n      startNode,\n      startOffset: range.startOffset,\n      endNode,\n      endOffset: range.endOffset,\n    });\n    selection.removeAllRanges();\n    onChange(root, block);\n  }\n\n  handleRemoveBlock(node?: zaml.Node) {\n    if (!node) {\n      return;\n    }\n    const { root, onChange } = this.props;\n    const parent = node.flatten();\n    onChange(root, parent);\n  }\n\n  handleCreateEntity(target: zaml.Node, name: string | null) {\n    const { root, onChange } = this.props;\n    if (!name) return;\n    const selection = window.getSelection();\n    if (selection.anchorNode !== selection.focusNode) {\n      alert('Entity is only allowed in pure text!');\n      return;\n    }\n    if (selection.rangeCount === 0) return;\n    const range = selection.getRangeAt(0);\n    const entityNodes = target.createEntities([{\n      type: name,\n      start: range.startOffset,\n      end: range.endOffset,\n    }]);\n    onChange(root, entityNodes[0]);\n  }\n\n  handleRemoveEntity(node?: zaml.Node) {\n    const { root, onChange } = this.props;\n    if (!node) return;\n    const textNode = node.removeEntity();\n    onChange(root, textNode);\n  }\n\n  handleInspect(node: zaml.Node) {\n    const { onSelect } = this.props;\n    onSelect(node);\n  }\n\n  render() {\n    const { root: node, selectedNode, onSelect } = this.props;\n    return (\n      <div className=\"zaml-visual-editor\">\n        <VisualNode\n          node={node}\n          selectedNode={selectedNode}\n          // onContextMenu={this.handleContextMenu}\n        />\n      </div>\n    )\n  }\n\n  getNodeByElement(element: HTMLElement) {\n    const { root: root } = this.props;\n    if (!root) return undefined;\n    if (element.nodeType === element.TEXT_NODE || element.classList.contains('children')) {\n      if (!element.parentElement) {\n        return undefined;\n      }\n      element = element.parentElement;\n    }\n    const id = element.getAttribute('node-id');\n    if (!id) return undefined;\n    return root.getNodeById(id);\n  }\n\n  renderContextMenu(e: React.MouseEvent<HTMLElement>) {\n    const { commonEntityNames } = this.props;\n    const target = this.getNodeByElement(e.target as HTMLElement);\n    let node = target;\n    if (!target) return;\n    if (target.type === NodeType.TEXT) {\n      node = target.parent;\n    }\n    if (!node) return;\n    const wrapperNode = node;\n    return (\n      <Menu id=\"menu\">\n        <MenuItem disabled text={node.descriptor} />\n        <MenuDivider />\n        <MenuItem\n          text=\"Create Block\"\n          onClick={() => this.handleCreateBlock()}\n        />\n        {node.isWrappingTag &&\n          <MenuItem\n            text=\"Remove Block\"\n            onClick={() => this.handleRemoveBlock(node)}\n          />\n        }\n        {target.type === NodeType.TEXT && target.parent && target.parent.type !== NodeType.ENTITY &&\n          <MenuItem text=\"Create Entity\">\n            {commonEntityNames && commonEntityNames.map(name => (\n              <MenuItem\n                key={name}\n                text={name}\n                onClick={() => this.handleCreateEntity(target, name)}\n              />\n            ))}\n            <MenuItem\n              text=\"other...\"\n              onClick={() => this.handleCreateEntity(target, prompt('Please input entity type', 'PER'))}\n            />\n          </MenuItem>\n        }\n        {node.type === NodeType.ENTITY &&\n          <MenuItem\n            text=\"Remove Entity\"\n            onClick={() => this.handleRemoveEntity(node)}\n          />\n        }\n        <MenuDivider />\n        <MenuItem\n          text=\"Inspect\"\n          onClick={() => this.handleInspect(wrapperNode)}\n        />\n      </Menu>\n    );\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"title\", null, \"ZAML-logo\");\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M132.27,162.53,182.46,35.88h10.68L242.7,162.53h-9.83L216.64,122H158.11l-16.23,40.58Zm81.16-48.7L187.38,45.7l-26.7,68.13Z\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M404.81,35.88h8.54V154.42h68.14v8.12H404.81Z\"\n});\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"circle\", {\n  fill: \"#fff\",\n  cx: 91,\n  cy: 44.5,\n  r: 4\n});\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M115.47,35.5h-5a54.66,54.66,0,0,0-1-10.36c-1.07-4.28-6.09-10.34-6.3-10.6l-1.5-1.8-5.3,11.14-1-2c-2.21-4.43-10.89-7.42-11.87-7.75l-2.19-.73L83.4,35.5H36v0c-7.77.27-14,11.14-14,19s6.23,9.71,14,10v0H89.75L22.31,154.42v8.12h92.32l4.23.11S121,159.5,121,153.5s-3.4-15-12.5-15c-6.78,0-14.5,5-23.5,7S60,147.3,54.63,147c5.75-5.44,12.61-12,19.66-19H92.56l.42-.37c1-.87,24.31-21.36,30.37-34.5s7.1-54.83,7.14-56.59l0-1.59ZM49.84,147.41c-3.23-.24-7.53-.76-9.84-1.91a10.79,10.79,0,0,1-4.46-3.93l9.58-12.91,22.46,1.73C61.06,136.77,54.88,142.66,49.84,147.41ZM95,63.5s-1.76-7.52-1-10c1-3.4,7.94-10.83,12-15h8.53c0,.53,0,1.17,0,1.9l-.1.41C109,43.74,97.93,51.53,97,53.5S96.52,61,99.31,64.66c-1.35-.1-2.72-.27-4-.44l-.09-.06A4.8,4.8,0,0,0,95,63.5ZM109,76a79.27,79.27,0,0,1-9,2.49c-5,1-13,0-13,0l3-8s11,0,15-1a22.68,22.68,0,0,0,6.55-3.2C110.86,69.46,110,72.72,109,76ZM100,55.5c1.27-4.12,11.13-10.58,14.13-12.46l.28,1.1c-.09,2-.25,4.37-.5,7-4.19,1.21-7.81,2.49-8.57,3.26-1.53,1.54-2.77,6.17-1.83,10.35a22.78,22.78,0,0,1-2.67,0C100.42,62.8,99.38,57.51,100,55.5Zm12.46,6.2a52.93,52.93,0,0,1-7,2.68c.39-2.42,1.09-5.83,2-7.11s3.41-2.62,6.16-3.69C113.36,56.12,113,58.85,112.46,61.7ZM93.9,103.48l-2.23,2.41c-2.73.33-7.34.94-10.66,1.61-5,1-14-1-14-1l5-7s10,2,15,2a46.82,46.82,0,0,0,9.79-1.43Q95.42,101.83,93.9,103.48Zm-18,18.63c-2.09.61-8.46,2.39-10.95,2.39-3,0-11-2-11-2l6-7s10,1,14,1c2.58,0,7.21-1.62,10.2-2.77C81.48,116.53,78.72,119.34,75.95,122.11Zm20.16-16.6.2-.23v0l13.94,1c-1.5,1.69-3,3.36-4.58,5L92.86,109C94,107.83,95,106.67,96.1,105.52Zm3.83-4.64c.83-1.11,1.63-2.24,2.39-3.39l15.58-.87a80.42,80.42,0,0,1-5,6.6Zm2.14-8.73c-2.72.92-7.36,2.36-10.07,2.36-4,0-14-2-14-2l4-7s12,1,17,0a29.42,29.42,0,0,0,7.62-2.87A78.48,78.48,0,0,1,102.07,92.14Zm8.3-10.92,13.49-1.45c-.29,1.68-.6,3.27-.94,4.76L109,84.78Q109.71,83,110.37,81.23Zm1.71-5q.37-1.21.71-2.4l12.31-2.66c-.18,1.52-.38,3-.59,4.49Zm13.51-9.45-11.44,1.84q.49-2.1.88-4.1l11-2.33C125.89,63.65,125.75,65.19,125.59,66.73Zm.8-9-10.45,1.6c.27-1.72.49-3.39.68-5L126.78,52C126.67,53.82,126.54,55.73,126.39,57.69Zm.64-10-9.91,1.46c.11-1.41.2-2.73.26-3.94l9.86-1.83C127.19,44.71,127.12,46.16,127,47.72Zm.35-7.55-9.85,1.1c0-.86,0-1.62,0-2.27l.54-2.71,9.36,1.76C127.44,38.62,127.41,39.35,127.38,40.17ZM103,22.5c1.6,2.16,2.45,2.8,3,5a38,38,0,0,1,1.48,7.5L95,34.5Zm-16-1c2.86,1.2,5.92,2.84,7,5l.57,1.12L91.15,34.8,86.36,35Zm-14.15,40c2.93-3.55,7-9.51,6.15-11s-9.88-8.63-14.57-12h5c3.95,2.86,15,11.13,16.6,15,.66,1.62-2.73,5.58-5,8Zm-8.69,0c2.51-3.93,6.93-11.56,5.59-14.49-1.2-2.61-7.5-6.27-11.75-8.51h4.38C65.77,41,74.46,47.72,76,51.5c.7,1.73-3,7.1-5.09,10ZM58.29,44.86c-1.17-2.24-4.34-4.68-6.84-6.36h5c3.41,2.86,9.22,8,9.44,10s-1.62,9.22-2.66,13H53.83C55.92,57,59.82,47.78,58.29,44.86ZM49.73,38.5c1.57,2.07,3.73,5.17,4,6.9.34,2.07-.46,11.5-.89,16.1H44.16c2.25-4,6.89-12.79,5.84-16a25.41,25.41,0,0,0-4.36-7ZM38,38.5h6.64c1.16,2.25,2.5,5.21,2.5,6.8,0,2.17-2.5,11.94-3.61,16.2H38a33,33,0,0,0,2-11A43.6,43.6,0,0,0,38,38.5Zm45.1,23c3.13-3,7.22-8,6.58-9.11-1.23-2.1-11.76-9.83-18.09-13.89h33.72C100.81,42.24,93.63,48.44,92.43,51c-1.05,2.24-1.78,8.57,1.36,12.27L91,61.5ZM91.43,125H77.3c3.76-3.75,7.52-7.58,11.15-11.36l13.63,1.29C97.09,119.91,92.76,123.82,91.43,125Zm28.4-31.54-14.58-.89q.75-1.37,1.44-2.76l15.15-1.15a26.58,26.58,0,0,1-1.19,3.21C120.4,92.39,120.12,92.92,119.83,93.46Z\"\n});\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  fill: \"#fff\",\n  x: 255,\n  y: 36.5,\n  width: 14.69,\n  height: 15,\n  rx: 1.5,\n  ry: 1.5\n});\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  fill: \"#fff\",\n  x: 258.07,\n  y: 55.56,\n  width: 8.54,\n  height: 106.97\n});\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"polygon\", {\n  fill: \"#fff\",\n  points: \"364.01 35.88 317.88 151.85 274.33 42.9 274.33 64.8 313.82 162.53 321.72 162.53 368.93 45.7 368.93 162.53 377.47 162.53 377.47 35.88 364.01 35.88\"\n});\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    viewBox: \"0 0 500 180\"\n  }, props), _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8);\n};\n\nexport default __webpack_public_path__ + \"static/media/logo.b94cec94.svg\";\nexport { SvgComponent as ReactComponent };","import _ from 'lodash';\nimport * as React from 'react';\nimport PropTypes, { node } from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport classNames from 'classnames';\nimport './TreeNode.css';\n\nconst { NodeType } = zaml;\n\nexport enum NodePart {\n  Header = 'header',\n  Footer = 'footer',\n  Whole = 'whole',\n}\n\nconst nil = () => {};\n\ninterface Props {\n  node?: zaml.Node;\n  expandedNodes: string[];\n  selectedNode?: zaml.Node;\n  selectedPart?: NodePart;\n  onSelect: (node: zaml.Node) => void;\n  onSelectPart: (selectedPart: NodePart) => void;\n  onExpansionChange: (node: zaml.Node, expanded: boolean) => void;\n  onMouseEnter: (node:zaml.Node) => void;\n  onMouseOut: (node:zaml.Node) => void;\n}\n\ninterface State {\n}\n\nexport default class TreeNode extends React.Component<Props, State> {\n\n  static propTypes = {\n    node: PropTypes.shape({})\n  }\n\n  static defaultProps: Props = {\n    node: undefined,\n    expandedNodes: [],\n    selectedNode: undefined,\n    selectedPart: NodePart.Whole,\n    onSelect: nil,\n    onSelectPart: nil,\n    onExpansionChange: nil,\n    onMouseEnter: nil,\n    onMouseOut: nil,\n  }\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      node,\n      selectedNode,\n      selectedPart: _selectedPart,\n      expandedNodes,\n      onSelect,\n      onSelectPart,\n      onExpansionChange,\n      onMouseEnter,\n      onMouseOut,\n    } = this.props;\n    if (!node) return null;\n    let selectedPart = _selectedPart;\n    const expanded = expandedNodes.indexOf(node.id) > -1 || node.isRoot;\n    if (expanded && selectedPart === NodePart.Whole) {\n      selectedPart = NodePart.Header;\n    }\n    const selected = selectedNode === node;\n    const onClick = (selectedPart: NodePart) => (event: React.MouseEvent) => {\n      event.stopPropagation();\n      onSelect(node);\n      onSelectPart(selectedPart);\n    };\n    const commonProps = {\n      onMouseEnter: (event: React.MouseEvent) => {\n        event.stopPropagation();\n        onMouseEnter(node);\n      },\n      onMouseOut: (event: React.MouseEvent) => {\n        event.stopPropagation();\n        onMouseOut(node);\n      },\n    }\n    let children: any = null;\n    if (!_.isEmpty(node.children)) {\n      children = (\n        <div key=\"children\" className=\"children\">\n          {_.map(node.children, (child, i) => <TreeNode {...this.props} key={i} node={child} />)}\n        </div>\n      );\n    } else if (node.type === 'text') {\n      children = node.content;\n    }\n    if (node.type === NodeType.TEXT) {\n      return (\n        <div\n          className={classNames('text', { selected })}\n          onClick={onClick(NodePart.Whole)}\n          {...commonProps}\n        >\n          \"{node.content}\"\n        </div>\n      )\n    } else if (node.type === NodeType.ENTITY || node.isBlock || node.isWrappingTag) {\n      const isEntity = node.type === NodeType.ENTITY;\n      const isTag = node.type === NodeType.TAG;\n      let onlyText: string | undefined;\n      if (node.children.length === 1 && (node.firstChild as zaml.Node).type === NodeType.TEXT) {\n        onlyText = (node.firstChild as zaml.Node).content;\n      }\n      const nameStart = isEntity ? '[' : isTag ? '{' : '<';\n      const nameEnd = isEntity ? ']' : isTag ? '}' : '>';\n      let name = (isTag || isEntity) ? node.name : node.type;\n      return (\n        <div\n          className={classNames('block', {\n            expanded,\n            selected: selected && selectedPart === NodePart.Whole,\n            'node-selected': selected,\n          })}\n          onClick={expanded ? undefined : onClick(NodePart.Whole)}\n          {...commonProps}\n        >\n          {node.type !== NodeType.ROOT && (\n            <span\n              className=\"indicator\"\n              onClick={(event) => {\n                event.stopPropagation();\n                onExpansionChange(node, !expanded);\n              }}\n            >▾</span>\n          )}\n          <span\n            className={classNames('header', { selected: selected && selectedPart === NodePart.Header })}\n            onClick={expanded ? onClick(NodePart.Header) : undefined}\n          >\n            {nameStart}\n            {name}\n            {node.labels.map(label => (\n              <span key={label} className=\"prop label\">#{label}</span>\n            ))}\n            {_.keys(node.attributes).map(key => {\n              const value = node.attributes[key];\n              return (\n                <span key={key} className=\"prop attribute\">\n                  <span className=\"key\">{key}</span>\n                  <span className=\"assignment\">=</span>\n                  <span className=\"value\">{JSON.stringify(value)}</span>\n                </span>\n              );\n            })}\n            {nameEnd}\n          </span>\n          {expanded ? children : (\n            <span className=\"ellipsis\">{_.truncate(onlyText, { length: 10 }) || '...'}</span>\n          )}\n          <span\n            className={classNames('footer', { selected: selected && selectedPart === NodePart.Footer })}\n            onClick={expanded ? onClick(NodePart.Footer) : undefined}\n          >\n            {nameStart}\n            /\n            {name}\n            {nameEnd}\n          </span>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport * as zaml from '@zaml/parser';\nimport { NodePart } from './TreeNode';\nimport './TreeView.css';\n\nconst { NodeType } = zaml;\n\ninterface Props {\n  selected: boolean;\n  node?: zaml.Node;\n  onClick: () => void;\n}\n\nexport default class TreePathItem extends React.Component<Props> {\n\n  static propTypes = {\n    node: PropTypes.shape({})\n  }\n\n  static defaultProps: Props = {\n    selected: false,\n    node: undefined,\n    onClick: () => {},\n  }\n\n  render() {\n    const { selected, node, onClick } = this.props;\n    if (!node) {\n      return null;\n    }\n    return (\n      <span\n        className={classNames('zaml-tree-path-item', node.type, { selected })}\n        onClick={onClick}\n      >\n        {node.descriptor}\n      </span>\n    )\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport TreeNode, { NodePart } from './TreeNode';\nimport './TreeView.css';\nimport TreePathItem from './TreePathItem';\n\ninterface Props {\n  selectedNode?: zaml.Node;\n  onSelect: (node: zaml.Node) => void;\n}\n\ninterface State {\n  nodeList: zaml.Node[];\n}\n\nexport default class TreePath extends React.Component<Props, State> {\n\n  static propTypes = {\n    node: PropTypes.shape({})\n  }\n\n  static defaultProps: Props = {\n    selectedNode: undefined,\n    onSelect: () => {},\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      nodeList: this.buildNodeList(props.selectedNode),\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { nodeList } = this.state;\n    const node = nextProps.selectedNode;\n    if (!node) {\n      this.setState({\n        nodeList: [],\n      });\n    } else if (!_.includes(nodeList, node)) {\n      this.setState({\n        nodeList: this.buildNodeList(node),\n      });\n    }\n  }\n\n  buildNodeList(node: zaml.Node | undefined) {\n    let list: zaml.Node[] = [];\n    while (node) {\n      list.unshift(node);\n      node = node.parent;\n    }\n    return list;\n  }\n\n  render() {\n    const { selectedNode, onSelect } = this.props;\n    const { nodeList } = this.state;\n    return (\n      <div className=\"zaml-tree-path\">\n        {nodeList.map(n => (\n          <TreePathItem\n            key={n.id}\n            selected={n === selectedNode}\n            node={n}\n            onClick={() => onSelect(n)}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport './TreeView.css';\n\ninterface Props {\n}\n\nexport default class TreeToolbar extends React.Component<Props> {\n\n  static propTypes = {\n  }\n\n  static defaultProps: Props = {\n  }\n\n  state = {\n  };\n\n  render() {\n    return (\n      <div className=\"zaml-tree-toolbar\">\n        toolbar\n      </div>\n    )\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport TreeNode, { NodePart } from './TreeNode';\nimport './TreeView.css';\nimport TreePath from './TreePath';\nimport { nodeEquals } from './utils';\nimport TreeToolbar from './TreeToolbar';\n\ninterface Props {\n  root?: zaml.Node;\n  selectedNode?: zaml.Node;\n  onSelect: (node: zaml.Node) => void;\n  onHover: (node?: zaml.Node) => void;\n}\n\ninterface State {\n  selectedPart: NodePart,\n  expandedNodes: string[];\n}\n\nconst nil = () => {}\n\nexport default class TreeView extends React.Component<Props, State> {\n\n  static propTypes = {\n    node: PropTypes.shape({})\n  }\n\n  static defaultProps: Props = {\n    onSelect: nil,\n    onHover: nil,\n  }\n\n  state = {\n    selectedPart: NodePart.Header,\n    expandedNodes: [],\n  };\n\n  handleExpansionChange(node: zaml.Node, expanded: boolean) {\n    const { selectedNode } = this.props;\n    const { expandedNodes } = this.state;\n    if (selectedNode === node) {\n      this.setState({\n        selectedPart: expanded ? NodePart.Header : NodePart.Whole,\n      });\n    }\n    if (expanded && !_.includes(expandedNodes, node.id)) {\n      this.setState({\n        expandedNodes: [...expandedNodes, node.id],\n      });\n    } else if (!expanded && _.includes(expandedNodes, node.id)) {\n      this.setState({\n        expandedNodes: _.without(expandedNodes, node.id),\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { selectedNode } = nextProps;\n    if (selectedNode && selectedNode !== this.props.selectedNode) {\n      const { expandedNodes } = this.state;\n      const nodeIds = selectedNode.path.map(n => n.id);\n      this.setState({\n        expandedNodes: _.union(expandedNodes, nodeIds),\n      });\n    }\n  }\n\n  render() {\n    const { root: node, selectedNode, onSelect, onHover } = this.props;\n    const { expandedNodes, selectedPart } = this.state;\n    return (\n      <div className=\"zaml-tree-view\">\n        <TreeToolbar />\n        <div className=\"tree\">\n          <TreeNode\n            node={node}\n            selectedNode={selectedNode}\n            selectedPart={selectedPart}\n            expandedNodes={expandedNodes}\n            onSelect={onSelect}\n            onSelectPart={p => this.setState({ selectedPart: p })}\n            onMouseEnter={onHover}\n            onMouseOut={() => onHover()}\n            onExpansionChange={(n: zaml.Node, expanded: boolean) => this.handleExpansionChange(n, expanded)}\n          />\n        </div>\n        <TreePath\n          selectedNode={selectedNode}\n          onSelect={onSelect}\n        />\n      </div>\n    )\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport PropTypes, { node } from 'prop-types';\nimport * as zaml from '@zaml/parser';\nimport SplitPane from 'react-split-pane';\nimport Pane from './Pane';\nimport SourceEditor from './SourceEditor';\nimport VisualEditor from './VisualEditor';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport './Editor.css';\nimport { ReactComponent as Logo } from './logo.svg';\nimport TreeView from './TreeView';\n\nconst { Node, NodeType } = zaml;\n\ninterface Props {\n  defaultSource: string;\n  className: string;\n  onChange: (value: string) => void;\n}\n\ninterface State {\n  source: string\n  root: zaml.Node;\n  sourcePaneHeight: number;\n  selectedNode?: zaml.Node;\n  hoveredNode?: zaml.Node;\n}\n\nconst parse = (source: string) => {\n  let node = Node.create(NodeType.ROOT);\n  try {\n    node = zaml.parse(source);\n  } catch(err) {\n    if (err instanceof zaml.ParseError) {\n      const message = `\n        [ParseError]{ERROR.TYPE}: {#MESSAGE ${err.message}}\n\n        #SOURCE\n        content\n\n        from {#POS.START ${err.from.ln}:${err.from.col}} to {#POS.END ${err.to.ln}:${err.to.col}}\n      `;\n      node = zaml.parse(message);\n      const sourceBlock = node.querySelector('#SOURCE');\n      console.dir(err);\n      const { text } = err.from.line;\n      if (!sourceBlock) return node;\n      const sourceText = sourceBlock.findOneBy({type: NodeType.TEXT});\n      if (!sourceText) return node;\n      sourceText.content = `${text} `;\n      sourceText.createEntitiesFromText([{\n        type: 'ERROR',\n        start: err.from.col - 1,\n        end: err.to.col - 1,\n      }]);\n    } else {\n      node = zaml.parse(`Error: [${err.message}]{MESSAGE}`);\n      console.error(err);\n    }\n  }\n  return node;\n}\n\nexport default class Editor extends React.Component<Props, State> {\n\n  static propTypes = {\n    defaultSource: PropTypes.string,\n    onChange: PropTypes.func,\n  }\n\n  static defaultProps: Props = {\n    defaultSource: '',\n    className: '',\n    onChange: () => {},\n  }\n\n  public preventSourceChange: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      source: props.defaultSource,\n      root: parse(props.defaultSource),\n      sourcePaneHeight: -1,\n    };\n    this.onResize = _.throttle(this.onResize.bind(this), 500);\n    this.preventSourceChange = false;\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.onResize, { passive: true });\n    this.onResize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n  }\n\n  componentWillUpdate(nextProps: Props, nextState: State) {\n    if (nextState.selectedNode !== this.state.selectedNode) {\n      console.log('selected node:', nextState.selectedNode);\n    }\n    if (nextState.root !== this.state.root) {\n      console.log('new node:', nextState.root);\n    }\n  }\n\n  onResize() {\n    const height = window.innerHeight - 60;\n    this.setState({\n      sourcePaneHeight: height,\n    });\n  }\n\n  handleSourceChange(source: string) {\n    if (this.preventSourceChange) return;\n    this.setState({\n      root: parse(source),\n    });\n  }\n\n  handleNodeChange(root?: zaml.Node, selected?: zaml.Node) {\n    if (!root) return;\n    this.preventSourceChange = true;\n    this.setState({\n      source: root.toSource({ simple: true }),\n      selectedNode: selected,\n    }, () => {\n      this.preventSourceChange = false;\n    });\n  }\n\n  render() {\n    const { source } = this.state;\n    const { root, sourcePaneHeight, selectedNode, hoveredNode } = this.state;\n    return (\n      <div className=\"zaml-editor\">\n        <header>\n          <a className=\"project-link\" href=\"https://github.com/nexushubs/zaml-lang/tree/master/packages/zaml-editor\"><Logo className=\"logo\" /> Editor</a>\n          <a className=\"github-link\" href=\"https://github.com/nexushubs/zaml-lang\">View on Github</a>\n        </header>\n        <section className=\"editor-panes\">\n          <SplitPane\n            split=\"vertical\"\n            defaultSize=\"33.33%\"\n            minSize={200}\n          >\n            <Pane title=\"Source\">\n              <SourceEditor\n                value={source}\n                height={sourcePaneHeight - 40}\n                onChange={(value: string) => this.handleSourceChange(value)}\n              />\n            </Pane>\n            <SplitPane split=\"vertical\" defaultSize=\"50%\">\n              <Pane title=\"Visual\">\n                <VisualEditor\n                  root={root}\n                  selectedNode={hoveredNode || selectedNode}\n                  onSelect={n => this.setState({ selectedNode: n })}\n                  onChange={(r?: zaml.Node, n?: zaml.Node) => this.handleNodeChange(r, n)}\n                />\n              </Pane>\n              <Pane title=\"AST\">\n                <TreeView\n                  root={root}\n                  selectedNode={selectedNode}\n                  onSelect={n => this.setState({ selectedNode: n })}\n                  onHover={n => this.setState({ hoveredNode: n })}\n                />\n              </Pane>\n            </SplitPane>\n          </SplitPane>\n        </section>\n      </div>\n    );\n  }\n}\n","export default \n`#各方基本信息\n甲方：[北京星核软件有限公司]{ORG}\n统一社会信用代码：[345976348]{SOC}\n法定代表人：[张鸿峰]{PER}\n地址：[北京市朝阳区方恒国际D座2806]{LOC}\n乙方：[孙继顺]{PER}\n身份证号：[230101197701018888]{ID}\n手机号：[13945018888]{MOBILE}\n---\n\n甲乙双方经友好协商，达成如下协议。\n\n#标的.租赁 #描述\n一、{#标的.租赁 #描述.地址 #描述.数量 甲方租赁乙方所有的位于[北京市朝阳区南磨房路37号]{LOC}门市房[一间]{QT}}。{#描述.面积 使用面积为[105平方米]{AREA}}。{#标的.租赁.租期 租期为[2019年1月1日]{DATE}至[2019年12月31日]{DATE}}；{#标的.租赁.租金 租金为[十万元人民币]{MONEY value=100000}}。\n\n#标的.租赁.用途\n二、该门市房的用途为新注册公司的经营地。\n\n#标的.付款方式.银行 #标的.租赁.计费方式.按月结算\n三、租金按月结算。{#约定.承租方.支付.租金 甲方每月[一日]{DATE}向乙方指定账户一次汇入当月租金。}\n\n#约定.承租方.支付.定金 #事件.合同生效\n四、甲方应于合同生效起[五日内]{DUE}向乙方支付定金[一万元整]{MONEY}。\n\n#约定.出租方.交付.租赁物 #事件.履约.出租方.交付\n五、乙方应在收到定金给交给乙方钥匙用于提前装修。装修费用由甲方自行承担。\n\n#约定\n六、{#约定.承租方.支付.押金 甲方应于[计租日前]{DUE}向乙方支付押金[一万元整]{MONEY}。}{#约定.出租方.返还押金 #事件.合同期满 #事件.合同解除 租赁期满或合同解除后[两日内]{DUE}，乙方应无息返还。}\n\n{#事件.违约 #违约责任\n  七、违约责任\n\n  #事件.违约 #违约.付款方.付款 #违约责任.补偿.违约金 #违约责任.补偿.违约金.计算方式.每逾期一天\n  1. 付款方未按照约定付款的，每逾期[一天]{PERIOD}，应按逾期金额的[1%]{RATE}向收款方支付违约金。\n\n  #事件.违约 #违约.出租方.交付.租赁物 #违约责任.补偿.违约金.计算方式.每逾期一天 #违约责任.补偿.顺延\n  2. 乙方延迟交房的，每逾期[一天]{PERIOD}，应向甲方支付违约金[100元]{DATE}，并将租期做相应的顺延。\n  \n}\n\n{#事件.不可抗力 #约定.解除合同\n  八、发生如下情形，任何一方有权解除合同，并不承担违约责任：\n\n  #事件.不可抗力.政府行为.拆迁\n  1. 该门市房被政府列入拆迁范围；\n\n  #事件.不可抗力.重大灾害\n  2. 发生地震、火灾等不可抗力。\n\n}\n\n#争议解决 #争议解决.方式.法院起诉 #争议解决.地点.合同一方所在地\n九、双方发生争议协调不成的，应向甲方所在地人民法院起诉。\n`;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Editor from './Editor';\nimport contract from './sample/contract';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor defaultSource={contract} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tokenize = tokenize;\nexports.parse = parse;\nObject.defineProperty(exports, \"Tokenizer\", {\n  enumerable: true,\n  get: function get() {\n    return _Tokenizer.default;\n  }\n});\nObject.defineProperty(exports, \"TextStream\", {\n  enumerable: true,\n  get: function get() {\n    return _TextStream.default;\n  }\n});\nObject.defineProperty(exports, \"TextLine\", {\n  enumerable: true,\n  get: function get() {\n    return _TextStream.TextLine;\n  }\n});\nObject.defineProperty(exports, \"Node\", {\n  enumerable: true,\n  get: function get() {\n    return _Node.default;\n  }\n});\nObject.defineProperty(exports, \"NodeType\", {\n  enumerable: true,\n  get: function get() {\n    return _Node.NodeType;\n  }\n});\nObject.defineProperty(exports, \"ParseError\", {\n  enumerable: true,\n  get: function get() {\n    return _ParseError.default;\n  }\n});\nexports.default = void 0;\n\nvar _Tokenizer = _interopRequireDefault(require(\"./Tokenizer\"));\n\nvar _TextStream = _interopRequireWildcard(require(\"./TextStream\"));\n\nvar _Node = _interopRequireWildcard(require(\"./Node\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n/**\n * @module @zaml/parser\n * @typicalname parser\n */\n\n/**\n * Parse ZAML source into node\n * @param text ZAML source string\n */\n\n\nfunction parse(text, options) {\n  var tokenizer = new _Tokenizer.default(text, options);\n  return tokenizer.process();\n}\n/**\n * Parse ZAML source into node\n * @deprecated Please use zaml.parse() instead\n * @param {string} text Source string\n */\n\n\nfunction tokenize(text, options) {\n  console.warn('zaml.tokenize() is deprecated, please use zaml.parse() instead');\n  return parse(text, options);\n}\n\nvar _default = {\n  ParseError: _ParseError.default,\n  Tokenizer: _Tokenizer.default,\n  TextStream: _TextStream.default,\n  TextLine: _TextStream.TextLine,\n  Node: _Node.default,\n  NodeType: _Node.NodeType,\n  tokenize: tokenize,\n  parse: parse\n};\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PROCESSING_TIMEOUT = exports.P_MARKER = exports.END_MARKERS = exports.START_MARKERS = exports.P_FULL_WIDTH_CHARACTER = exports.P_BOOLEAN_FALSE = exports.P_BOOLEAN_TRUE = exports.P_STRING_LITERAL_UNQUOTED_TESTER = exports.P_STRING_LITERAL_UNQUOTED = exports.P_STRING_LITERAL_QUOTED = exports.P_NUMBER_LITERAL = exports.P_NUMBER_START = exports.P_DATE_LITERAL = exports.T_STRING_START = exports.P_TAG_NAME = exports.P_ATTRIBUTE_LIST = exports.P_ATTRIBUTE_NAME = exports.P_ATTRIBUTE_ASSIGN = exports.P_LABEL_NAME = exports.P_LABEL_START = exports.P_LIST_SEPARATOR = exports.P_WHITE_SPACES_EXT = exports.P_WHITE_SPACE = exports.P_PARAGRAPH_BREAK = exports.P_SPACE_WRAPPED_LINE_BREAK = exports.P_LINE_BREAK = exports.P_ASSIGN_YAML = exports.T_TAG_ATTRIBUTE_FAVORED_ASSIGN = exports.T_METADATA_FAVORED_ASSIGN = exports.T_PARAGRAPH_BREAK = exports.T_LINE_BREAKS = exports.T_LINE_BREAK = exports.T_ASSIGN_YAML = exports.T_ASSIGN_XML = exports.T_TAG_END = exports.T_TAG_CLOSING = exports.T_TAG_START = exports.T_ENTITY_END = exports.T_ENTITY_START = exports.P_MULTIPLE_LINE_COMMENT = exports.T_SINGLE_LINE_COMMENT = exports.T_METADATA_MARKER = exports.T_TAB = exports.T_SPACE = exports.DEFAULT_INDENT_SPACES = exports.createPattern = exports.combinePatterns = void 0;\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar combinePatterns = function combinePatterns(list) {\n  return list.map(function (p) {\n    return _.isRegExp(p) ? p.source : _.escapeRegExp(p);\n  }).join('|');\n};\n\nexports.combinePatterns = combinePatterns;\n\nvar createPattern = function createPattern(source) {\n  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'g';\n  return new RegExp(source, flags);\n};\n\nexports.createPattern = createPattern;\nvar DEFAULT_INDENT_SPACES = 2;\nexports.DEFAULT_INDENT_SPACES = DEFAULT_INDENT_SPACES;\nvar T_SPACE = ' ';\nexports.T_SPACE = T_SPACE;\nvar T_TAB = '\\t';\nexports.T_TAB = T_TAB;\nvar T_METADATA_MARKER = \"---\";\nexports.T_METADATA_MARKER = T_METADATA_MARKER;\nvar T_SINGLE_LINE_COMMENT = '~';\nexports.T_SINGLE_LINE_COMMENT = T_SINGLE_LINE_COMMENT;\nvar P_MULTIPLE_LINE_COMMENT = '~{3,}';\nexports.P_MULTIPLE_LINE_COMMENT = P_MULTIPLE_LINE_COMMENT;\nvar T_ENTITY_START = '[';\nexports.T_ENTITY_START = T_ENTITY_START;\nvar T_ENTITY_END = ']';\nexports.T_ENTITY_END = T_ENTITY_END;\nvar T_TAG_START = '{';\nexports.T_TAG_START = T_TAG_START;\nvar T_TAG_CLOSING = '/';\nexports.T_TAG_CLOSING = T_TAG_CLOSING;\nvar T_TAG_END = '}';\nexports.T_TAG_END = T_TAG_END;\nvar T_ASSIGN_XML = '=';\nexports.T_ASSIGN_XML = T_ASSIGN_XML;\nvar T_ASSIGN_YAML = ':：';\nexports.T_ASSIGN_YAML = T_ASSIGN_YAML;\nvar T_LINE_BREAK = '\\n';\nexports.T_LINE_BREAK = T_LINE_BREAK;\nvar T_LINE_BREAKS = '\\r\\n';\nexports.T_LINE_BREAKS = T_LINE_BREAKS;\nvar T_PARAGRAPH_BREAK = '\\n\\n';\nexports.T_PARAGRAPH_BREAK = T_PARAGRAPH_BREAK;\nvar T_METADATA_FAVORED_ASSIGN = T_ASSIGN_YAML;\nexports.T_METADATA_FAVORED_ASSIGN = T_METADATA_FAVORED_ASSIGN;\nvar T_TAG_ATTRIBUTE_FAVORED_ASSIGN = T_ASSIGN_XML;\nexports.T_TAG_ATTRIBUTE_FAVORED_ASSIGN = T_TAG_ATTRIBUTE_FAVORED_ASSIGN;\nvar P_ASSIGN_YAML = /[:：]/;\nexports.P_ASSIGN_YAML = P_ASSIGN_YAML;\nvar P_LINE_BREAK = /\\r?\\n/g;\nexports.P_LINE_BREAK = P_LINE_BREAK;\nvar P_SPACE_WRAPPED_LINE_BREAK = /\\s*\\n\\s*/g;\nexports.P_SPACE_WRAPPED_LINE_BREAK = P_SPACE_WRAPPED_LINE_BREAK;\nvar P_PARAGRAPH_BREAK = createPattern(\"\".concat(P_LINE_BREAK.source, \"\\\\s*\").concat(P_LINE_BREAK.source));\nexports.P_PARAGRAPH_BREAK = P_PARAGRAPH_BREAK;\nvar P_WHITE_SPACE = /[ \\t]/g;\nexports.P_WHITE_SPACE = P_WHITE_SPACE;\nvar P_WHITE_SPACES_EXT = /[\\s\\r\\n]/g;\nexports.P_WHITE_SPACES_EXT = P_WHITE_SPACES_EXT;\nvar P_LIST_SEPARATOR = /[,，]/g;\nexports.P_LIST_SEPARATOR = P_LIST_SEPARATOR;\nvar P_LABEL_START = /[#＃]/g;\nexports.P_LABEL_START = P_LABEL_START;\nvar P_LABEL_NAME = /(?:[A-Za-z\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uF900-\\uFA6D\\uFA70-\\uFAD9]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])(?:[\\.0-9A-Z_a-z\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uF900-\\uFA6D\\uFA70-\\uFAD9]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])*/g;\nexports.P_LABEL_NAME = P_LABEL_NAME;\nvar P_ATTRIBUTE_ASSIGN = createPattern(\"[\".concat([T_ASSIGN_XML, T_ASSIGN_YAML].join(''), \"]\"), '');\nexports.P_ATTRIBUTE_ASSIGN = P_ATTRIBUTE_ASSIGN;\nvar P_ATTRIBUTE_NAME = createPattern(\"(?:\".concat(P_LABEL_NAME.source, \")(?=\").concat(combinePatterns([P_WHITE_SPACE, P_ATTRIBUTE_ASSIGN, T_TAG_END]), \")\"), 'gu');\nexports.P_ATTRIBUTE_NAME = P_ATTRIBUTE_NAME;\nvar P_ATTRIBUTE_LIST = createPattern(\"(\".concat(P_LABEL_NAME.source).concat(P_ATTRIBUTE_ASSIGN.source, \"|\").concat(P_LABEL_START.source).concat(P_LABEL_NAME.source, \")\"));\nexports.P_ATTRIBUTE_LIST = P_ATTRIBUTE_LIST;\nvar P_TAG_NAME = P_ATTRIBUTE_NAME;\nexports.P_TAG_NAME = P_TAG_NAME;\nvar T_STRING_START = '\"';\nexports.T_STRING_START = T_STRING_START;\nvar P_DATE_LITERAL = /\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))?/g;\nexports.P_DATE_LITERAL = P_DATE_LITERAL;\nvar P_NUMBER_START = /[\\d\\.]/;\nexports.P_NUMBER_START = P_NUMBER_START;\nvar P_NUMBER_LITERAL = /(\\d+|\\d*\\.\\d+|\\d+\\.\\d*)(e\\d+)?/g;\nexports.P_NUMBER_LITERAL = P_NUMBER_LITERAL;\nvar P_STRING_LITERAL_QUOTED = /\"([^\"\\\\]|\\\\\")*\"/g;\nexports.P_STRING_LITERAL_QUOTED = P_STRING_LITERAL_QUOTED;\nvar P_STRING_LITERAL_UNQUOTED = /[^\\s}\"'\\\\\\n]+/g;\nexports.P_STRING_LITERAL_UNQUOTED = P_STRING_LITERAL_UNQUOTED;\nvar P_STRING_LITERAL_UNQUOTED_TESTER = new RegExp(\"^\".concat(P_STRING_LITERAL_UNQUOTED.source, \"$\"));\nexports.P_STRING_LITERAL_UNQUOTED_TESTER = P_STRING_LITERAL_UNQUOTED_TESTER;\nvar P_BOOLEAN_TRUE = /(TRUE|True|true)/g;\nexports.P_BOOLEAN_TRUE = P_BOOLEAN_TRUE;\nvar P_BOOLEAN_FALSE = /(FALSE|False|false)/g;\nexports.P_BOOLEAN_FALSE = P_BOOLEAN_FALSE;\nvar P_FULL_WIDTH_CHARACTER = /(?:[\\xD7\\u2014\\u2026\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3001\\u3002\\u3005\\u3007\\u300A-\\u300D\\u3010\\u3011\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFF01\\uFF03\\uFF05\\uFF06\\uFF08\\uFF09\\uFF0B-\\uFF0D\\uFF1A\\uFF1B\\uFF1D\\uFF1F\\uFF20\\uFFE5]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])/g;\nexports.P_FULL_WIDTH_CHARACTER = P_FULL_WIDTH_CHARACTER;\nvar START_MARKERS = [T_TAG_START, T_ENTITY_START, P_LABEL_START];\nexports.START_MARKERS = START_MARKERS;\nvar END_MARKERS = [T_TAG_END, T_ENTITY_END];\nexports.END_MARKERS = END_MARKERS;\nvar P_MARKER = createPattern(\"(\".concat(combinePatterns([P_PARAGRAPH_BREAK].concat(START_MARKERS, [T_TAG_END, P_MULTIPLE_LINE_COMMENT, T_SINGLE_LINE_COMMENT])), \")\"));\nexports.P_MARKER = P_MARKER;\nvar PROCESSING_TIMEOUT = Infinity;\nexports.PROCESSING_TIMEOUT = PROCESSING_TIMEOUT;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.find = _find;\nexports.default = exports.WrappingTags = exports.BlockTags = exports.BlockNodeTypes = exports.NodeTypes = exports.NodeType = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar _util = require(\"./util\");\n\nvar _2 = require(\".\");\n\nvar nanoid = require('nanoid');\n\nvar NodeType;\nexports.NodeType = NodeType;\n\n(function (NodeType) {\n  NodeType[\"FRAGMENT\"] = \"fragment\";\n  NodeType[\"ROOT\"] = \"root\";\n  NodeType[\"PARAGRAPH\"] = \"paragraph\";\n  NodeType[\"TAG\"] = \"tag\";\n  NodeType[\"ENTITY\"] = \"entity\";\n  NodeType[\"TEXT\"] = \"text\";\n  NodeType[\"COMMENT\"] = \"comment\";\n})(NodeType || (exports.NodeType = NodeType = {}));\n\nvar NodeTypes = _.values(NodeType);\n\nexports.NodeTypes = NodeTypes;\nvar BlockNodeTypes = [NodeType.ROOT, NodeType.PARAGRAPH];\nexports.BlockNodeTypes = BlockNodeTypes;\nvar BlockTags = ['BLOCK', 'QUOTE', 'SECTION', 'HEADER', 'FOOTER'];\nexports.BlockTags = BlockTags;\nvar WrappingTags = BlockTags.concat(['INLINE', 'NUM', 'HEADING']);\nexports.WrappingTags = WrappingTags;\n\nvar defaultFinderCallback = function defaultFinderCallback(node) {\n  return true;\n};\n\nfunction testNode(pattern, node) {\n  if (_.isFunction(pattern)) {\n    return pattern(node);\n  } else if (_.isString(pattern)) {\n    return node.is(pattern);\n  } else {\n    throw new TypeError('invalid finding pattern');\n  }\n}\n/**\n * Recursive node finder\n * @param node Node to find \n * @param pattern Searching pattern\n * @param Node List\n */\n\n\nfunction _find(node) {\n  var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultFinderCallback;\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  if (testNode(pattern, node)) {\n    result.push(node);\n  }\n\n  if (!_.isEmpty(node.children)) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = node.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var childNode = _step.value;\n\n        _find(childNode, pattern, result);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Recursive node finder\n * @param node \n * @param pattern \n */\n\n\nfunction _findOne(node) {\n  var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultFinderCallback;\n\n  if (testNode(pattern, node)) {\n    return node;\n  }\n\n  if (!_.isEmpty(node.children)) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = node.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var childNode = _step2.value;\n\n        var result = _findOne(childNode, pattern);\n\n        if (result) {\n          return result;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    ;\n  }\n\n  return undefined;\n}\n\nfunction parseJson(json) {\n  var node = Node.create(json.type, json.name, {\n    attributes: parseJsonMap(json.attributes),\n    metadata: parseJsonMap(json.metadata),\n    content: json.content\n  });\n\n  if (json.children) {\n    _.each(json.children, function (childData) {\n      node.appendChild(parseJson(childData));\n    });\n  }\n\n  node.normalize();\n  return node;\n}\n/**\n * Map metadata & attributes to JSON\n * @param  map \n */\n\n\nfunction toJsonMap(map) {\n  if (_.isEmpty(map)) {\n    return undefined;\n  }\n\n  return _.mapValues(map, function (value) {\n    if (value instanceof Node) {\n      return value.toJSON();\n    }\n\n    return value;\n  });\n}\n\nfunction parseJsonMap(json) {\n  if (_.isEmpty(json)) {\n    return undefined;\n  }\n\n  return _.mapValues(json, function (value) {\n    if (_.isPlainObject(value)) {\n      return parseJson(value);\n    }\n\n    return (0, _util.parseValue)(value);\n  });\n}\n/**\n * AST node class\n * @class\n */\n\n\nvar Node =\n/*#__PURE__*/\nfunction () {\n  (0, _createClass2.default)(Node, null, [{\n    key: \"create\",\n\n    /**\n     * Create node, shortcut for constructor \n     * @param type \n     * @param [name]\n     * @param [props]\n     */\n    value: function create(type, name, props) {\n      return new Node(type, name, props);\n    }\n    /**\n     * Create text tag\n     * @param [props]\n     */\n\n  }, {\n    key: \"createText\",\n    value: function createText(content, props) {\n      return new Node(NodeType.TEXT, undefined, (0, _objectSpread2.default)({}, props, {\n        content: content\n      }));\n    }\n    /**\n     * Create block tag\n     * @param [props]\n     */\n\n  }, {\n    key: \"createBlock\",\n    value: function createBlock(props) {\n      return new Node(NodeType.TAG, 'BLOCK', props);\n    }\n    /**\n     * Create inline block tag\n     * @param [props]\n     */\n\n  }, {\n    key: \"createInlineBlock\",\n    value: function createInlineBlock(props) {\n      return new Node(NodeType.TAG, 'INLINE', props);\n    }\n    /**\n     * Create node instance from ZAML source\n     * @param source \n     */\n\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      return (0, _2.parse)(source);\n    }\n    /**\n     * Create node from json serializable data\n     * @param {object} json \n     * @returns {Node}\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      return parseJson(json);\n    }\n    /**\n     * Creating fragment node\n     * @returns {Node}\n     */\n\n  }, {\n    key: \"createFragment\",\n    value: function createFragment() {\n      return Node.create(NodeType.FRAGMENT);\n    }\n    /**\n     * Check if a node is valid\n     * @param node \n     */\n\n  }, {\n    key: \"validNode\",\n    value: function validNode(node) {\n      if (!(node instanceof Node)) {\n        throw new TypeError('invalid node');\n      }\n    }\n    /**\n     * Check if a node could be parent\n     * @param node \n     */\n\n  }, {\n    key: \"validParent\",\n    value: function validParent(node) {\n      if (!_.isArray(node.children)) {\n        throw new Error('node is not a valid parent');\n      }\n    }\n    /**\n     * Check if a node could be parent\n     * @param node \n     */\n\n  }, {\n    key: \"validChild\",\n    value: function validChild(node) {\n      if (!node.parent) {\n        throw new Error('node is not a valid child');\n      }\n    }\n  }, {\n    key: \"findCommonAncestor\",\n    value: function findCommonAncestor(n1, n2) {\n      var path1 = n1.path;\n      var path2 = n2.path;\n      var ancestor;\n\n      while (path1.length > 0 && path2.length > 0) {\n        if (_.first(path1) !== _.first(path2)) {\n          break;\n        }\n\n        ancestor = path1.shift();\n        path2.shift();\n      }\n\n      if (!ancestor) {\n        return undefined;\n      }\n\n      return {\n        ancestor: ancestor,\n        paths: [path1, path2]\n      };\n    }\n    /**\n     * Create a block and move nodes or text within the range into it\n     * @param range \n     * @param props \n     */\n\n  }, {\n    key: \"createBlockByRange\",\n    value: function createBlockByRange(range, props) {\n      var startNode = range.startNode,\n          startOffset = range.startOffset,\n          endNode = range.endNode,\n          endOffset = range.endOffset;\n\n      if (!_.isNumber(startOffset) || !_.isNumber(endOffset)) {\n        throw new TypeError('range offset must be number');\n      }\n\n      if (!startNode.isText || !endNode.isText) {\n        throw new TypeError('range node must be text');\n      }\n\n      if (!startNode.content || !endNode.content) {\n        throw new Error('invalid text node');\n      }\n\n      if (startNode === endNode) {\n        if (startOffset < 0 || startOffset > startNode.content.length || endOffset < 0 || endOffset > startNode.content.length) {\n          throw new RangeError('sub text out of range');\n        }\n\n        if (!startNode.parent) {\n          throw new Error('can not create block on isolated text node');\n        }\n\n        var _parent = startNode.parent;\n        var fragment = Node.createFragment();\n        var block = Node.createInlineBlock((0, _objectSpread2.default)({}, props, {\n          text: startNode.content.substring(startOffset, endOffset)\n        }));\n\n        if (startOffset > 0) {\n          fragment.appendText(startNode.content.substring(0, startOffset));\n        }\n\n        fragment.appendChild(block);\n\n        if (endOffset < startNode.content.length) {\n          fragment.appendText(startNode.content.substring(endOffset));\n        }\n\n        _parent.insertBefore(fragment, startNode);\n\n        _parent.removeChild(startNode);\n\n        return block;\n      } else {\n        var result = Node.findCommonAncestor(startNode, endNode);\n        if (!result || !result.ancestor) return undefined;\n        var ancestor = result.ancestor,\n            _paths = result.paths;\n        var baseStartNode = _paths[0][0];\n        var baseEndNode = _paths[1][0];\n\n        var _startIndex = ancestor.children.indexOf(baseStartNode);\n\n        var _endIndex = ancestor.children.indexOf(baseEndNode);\n\n        var _sort = [_startIndex, _endIndex].sort(),\n            _sort2 = (0, _slicedToArray2.default)(_sort, 2),\n            startIndex = _sort2[0],\n            endIndex = _sort2[1];\n\n        if (_startIndex !== startIndex) {\n          var _ref = [baseEndNode, baseStartNode];\n          baseStartNode = _ref[0];\n          baseEndNode = _ref[1];\n        }\n\n        var _fragment = ancestor.extractNodes(startIndex, endIndex + 1);\n\n        var isStartSided = startNode.isSidedDescendantOf(baseStartNode, 'start') && startOffset === 0;\n        var isEndSided = endNode.isSidedDescendantOf(baseEndNode, 'end') && endOffset === endNode.content.length;\n        var foundBlock = ancestor.findOne(function (n) {\n          return n.isBlock;\n        });\n        var hasBlock = foundBlock && foundBlock !== ancestor;\n\n        if (!hasBlock && (_paths[0].length === 1 || isStartSided || _paths[1].length === 1 || isEndSided)) {\n          var inserting = Node.createFragment();\n          var startText = startNode.content;\n\n          if (startOffset > 0) {\n            baseStartNode.content = startText.substring(startOffset);\n            inserting.appendText(startText.substring(0, startOffset));\n          }\n\n          var _block = Node.createInlineBlock(props);\n\n          _block.appendChild(_fragment);\n\n          inserting.appendChild(_block);\n          var endText = endNode.content;\n\n          if (endOffset < endNode.content.length) {\n            baseEndNode.content = endText.substring(0, endOffset);\n            inserting.appendText(startText.substring(endOffset));\n          }\n\n          ancestor.insertAt(inserting, startIndex);\n          return _block;\n        } else {\n          var _block2 = Node.createBlock(props);\n\n          ancestor.insertAt(_block2, startIndex);\n\n          _block2.appendChild(_fragment);\n\n          return _block2;\n        }\n      }\n    }\n  }]);\n  /**\n   * @constructor\n   * @param type \n   * @param [name]\n   * @param [props]\n   */\n\n  function Node(type, name) {\n    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    (0, _classCallCheck2.default)(this, Node);\n    (0, _defineProperty2.default)(this, \"_source\", void 0);\n    (0, _defineProperty2.default)(this, \"id\", '');\n    (0, _defineProperty2.default)(this, \"type\", void 0);\n    (0, _defineProperty2.default)(this, \"name\", void 0);\n    (0, _defineProperty2.default)(this, \"start\", -1);\n    (0, _defineProperty2.default)(this, \"end\", -1);\n    (0, _defineProperty2.default)(this, \"textStart\", -1);\n    (0, _defineProperty2.default)(this, \"textEnd\", -1);\n    (0, _defineProperty2.default)(this, \"states\", void 0);\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\n    (0, _defineProperty2.default)(this, \"metadata\", void 0);\n    (0, _defineProperty2.default)(this, \"labels\", void 0);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"content\", void 0);\n    (0, _defineProperty2.default)(this, \"text\", '');\n    (0, _defineProperty2.default)(this, \"children\", void 0);\n    var _props$source = props.source,\n        source = _props$source === void 0 ? '' : _props$source,\n        _props$start = props.start,\n        start = _props$start === void 0 ? -1 : _props$start,\n        _props$end = props.end,\n        end = _props$end === void 0 ? -1 : _props$end,\n        states = props.states,\n        _props$attributes = props.attributes,\n        attributes = _props$attributes === void 0 ? {} : _props$attributes,\n        _props$metadata = props.metadata,\n        metadata = _props$metadata === void 0 ? {} : _props$metadata,\n        _props$labels = props.labels,\n        labels = _props$labels === void 0 ? [] : _props$labels,\n        parent = props.parent,\n        _props$content = props.content,\n        content = _props$content === void 0 ? '' : _props$content,\n        _props$text = props.text,\n        text = _props$text === void 0 ? '' : _props$text;\n\n    if (type && !NodeTypes.includes(type)) {\n      throw new TypeError(\"invalid node type \".concat(type));\n    }\n\n    this.id = nanoid();\n    /**\n     * Parser states\n     * @type {Object<string,any>}\n     */\n\n    this.states = states || {};\n    /**\n     * @type {NodeType}\n     * @description Node type\n     */\n\n    this.type = type;\n    /**\n     * @type {string}\n     * @description Node name, for tag, entity\n     */\n\n    this.name = undefined;\n    /**\n     * @type {number}\n     * @description Start source position to root node\n     */\n\n    this.start = start;\n    /**\n     * @type {number}\n     * @description End source position to root node\n     */\n\n    this.end = end;\n    /**\n     * @type {number}\n     * @description Start text source position to root node\n     */\n\n    this.textStart = -1;\n    /**\n     * @type {number}\n     * @description End text source position to root node\n     */\n\n    this.textEnd = -1;\n    /**\n     * @private\n     * @type {Node}\n     * @description Parent node\n     */\n\n    this.parent = parent;\n    /**\n     * @private\n     * @type {string}\n     * @description Source code string, only for root node\n     */\n\n    this._source = undefined;\n    /**\n     * @type {string}\n     * @description Text content, only for text node\n     */\n\n    this.content = undefined;\n    /**\n     * @type {Node[]}\n     * @description Child nodes, only for block node\n     */\n\n    this.children = [];\n    /**\n     * @type {string[]}\n     * @description node labels\n     */\n\n    this.labels = [];\n    /**\n     * @type {Object.<string,any>}\n     * @description Attributes, for root, tag, entity node\n     */\n\n    this.attributes = {};\n    /**\n     * @type {Object.<string,any>}\n     * @description Block metadata\n     */\n\n    this.metadata = {};\n    /**\n     * @type {string[]}\n     * @description Node labels\n     */\n\n    this.labels = [];\n\n    if (type === NodeType.ROOT) {\n      this.start = 0;\n      this.end = source.length;\n      this._source = source;\n    }\n\n    if (text) {\n      this.appendText(text);\n    }\n\n    if (BlockNodeTypes.includes(type) || [NodeType.ENTITY, NodeType.TAG, NodeType.FRAGMENT].includes(type)) {\n      if (type !== NodeType.PARAGRAPH) {\n        this.name = name;\n        this.attributes = attributes;\n        this.metadata = metadata;\n        this.labels = labels;\n      }\n    } else if (type === NodeType.TEXT || type === NodeType.COMMENT) {\n      this.content = content;\n    }\n  }\n  /**\n   * Get a short descriptor to identify node's type and basic information\n   */\n\n\n  (0, _createClass2.default)(Node, [{\n    key: \"getRootNode\",\n\n    /**\n     * Property indicates if the root is root (which has no children)\n     */\n    value: function getRootNode() {\n      var node = this;\n\n      while (node.parent) {\n        node = node.parent;\n      }\n\n      if (node === this) {\n        return undefined;\n      }\n\n      return node;\n    }\n    /**\n     * Check node match the expression\n     * @example\n     * `BLOCK`: tag\n     * `@LOC`: entity\n     * @param expression \n     */\n\n  }, {\n    key: \"is\",\n    value: function is(expression) {\n      if (!_.isString(expression)) {\n        return false;\n      }\n\n      expression = expression.toUpperCase();\n\n      if (/^[A-Z]/.test(expression)) {\n        return this.type === NodeType.TAG && this.name === expression;\n      } else if (/^#/.test(expression)) {\n        return this.type === NodeType.TAG && this.labels.includes(expression.substr(1));\n      } else if (/^@[A-Z]/.test(expression)) {\n        return this.type === NodeType.ENTITY && this.name === expression.substr(1);\n      }\n\n      return false;\n    }\n    /**\n     * whether a node is a descendant of a given node\n     * @param node \n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(node) {\n      Node.validNode(node);\n\n      while (node) {\n        if (node === this) {\n          return true;\n        }\n\n        if (!node.parent) {\n          return false;\n        }\n\n        node = node.parent;\n      }\n\n      return false;\n    }\n    /**\n     * Get a list of ancestors\n     */\n\n  }, {\n    key: \"hasChild\",\n\n    /**\n     * Check if this node has any children\n     */\n    value: function hasChild() {\n      return this.children.length > 0;\n    }\n    /**\n     * Check if this node is the only child of its parent\n     */\n\n  }, {\n    key: \"isOnlyDescendantOf\",\n\n    /**\n     * Check if the node is only descendant of another node;\n     * @param ancestor \n     */\n    value: function isOnlyDescendantOf(ancestor) {\n      var node = ancestor;\n\n      while (node) {\n        if (node.children.length !== 1) {\n          return false;\n        }\n\n        node = node.children[0];\n\n        if (node === this) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Check if the node is only descendant of another node;\n     * @param ancestor \n     */\n\n  }, {\n    key: \"isSidedDescendantOf\",\n    value: function isSidedDescendantOf(ancestor, side) {\n      var node = ancestor;\n\n      while (node) {\n        if (node.children.length === 0) {\n          return false;\n        }\n\n        node = side === 'start' ? node.firstChild : node.lastChild;\n\n        if (node === this) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Check if the node is only descendant of another node;\n     * @param ancestor \n     */\n\n  }, {\n    key: \"isRightAlignedDescendantOf\",\n    value: function isRightAlignedDescendantOf(ancestor) {\n      var node = ancestor;\n\n      while (node) {\n        if (node.children.length === 0) {\n          return false;\n        }\n\n        node = node.lastChild;\n\n        if (node === this) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Create a child node\n     * @param type \n     * @param [name]\n     * @param [props]\n     */\n\n  }, {\n    key: \"createChild\",\n    value: function createChild(type, name, props) {\n      var node = new Node(type, name, props);\n      this.appendChild(node);\n      return node;\n    }\n    /**\n     * Insert a node at the beginning of the children\n     * @param node \n     */\n\n  }, {\n    key: \"prependChild\",\n    value: function prependChild(node) {\n      return this.insertAt(node, 0);\n    }\n    /**\n     * Append a node to children list\n     * @param node \n     */\n\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(node) {\n      return this.insertAt(node, Infinity);\n    }\n    /**\n     * Append text node child\n     * @param text \n     * @param [props] \n     */\n\n  }, {\n    key: \"appendText\",\n    value: function appendText(text, props) {\n      if (this.type === NodeType.TEXT) {\n        this.content = this.content || '';\n        this.content += text;\n        return this;\n      } else {\n        if (this.lastChild && this.lastChild.isText) {\n          this.lastChild.content += text;\n        } else {\n          var child = Node.create(NodeType.TEXT, undefined, (0, _objectSpread2.default)({}, props, {\n            content: text\n          }));\n          this.appendChild(child);\n        }\n      }\n    }\n    /**\n     * Add text node child at the beginning\n     * @param text \n     * @param [props] \n     */\n\n  }, {\n    key: \"prependText\",\n    value: function prependText(text, props) {\n      if (this.type === NodeType.TEXT) {\n        this.content = \"\".concat(text).concat(this.content || '');\n        return this;\n      } else {\n        var child = Node.create(NodeType.TEXT, undefined, (0, _objectSpread2.default)({}, props, {\n          content: text\n        }));\n        this.prependChild(child);\n      }\n    }\n    /**\n     * Remove one child\n     * @param node\n     */\n\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      _.pull(this.children, child);\n\n      child.parent = undefined;\n      return child;\n    }\n    /**\n     * Remove one child by index\n     * @param index\n     */\n\n  }, {\n    key: \"removeChildAt\",\n    value: function removeChildAt(index) {\n      var child = this.children[index];\n\n      _.pullAt(this.children, index);\n\n      child.parent = undefined;\n      return child;\n    }\n    /**\n     * Insert a node at specified position\n     * @param node \n     * @param index \n     */\n\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(node, index) {\n      var _this = this;\n\n      if (node.type === NodeType.FRAGMENT) {\n        var _this$children;\n\n        (_this$children = this.children).splice.apply(_this$children, [index, 0].concat((0, _toConsumableArray2.default)(node.children)));\n\n        node.children.forEach(function (child) {\n          child.parent = _this;\n        });\n        node.children = [];\n      } else {\n        this.children.splice(index, 0, node);\n\n        if (node.parent) {\n          node.parent.removeChild(node);\n        }\n\n        node.parent = this;\n      }\n\n      return node;\n    }\n    /**\n     * Insert a node before another\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n     * @param node Node to be inserted\n     * @param ref A child node to be referenced\n     */\n\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(node, ref) {\n      Node.validParent(this);\n      var refIndex = this.children.indexOf(ref);\n      this.insertAt(node, refIndex);\n      return node;\n    }\n    /**\n     * Insert a node after another\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/insertAfter\n     * @param node Node to be inserted\n     * @param ref A child node to be referenced\n     */\n\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(node, ref) {\n      Node.validParent(this);\n      var refIndex = this.children.indexOf(ref);\n      this.insertAt(node, refIndex + 1);\n      return node;\n    }\n    /**\n     * Replace a child with another node, assuming current node is a parent\n     * @param newChild \n     * @param oldChild \n     * @returns The replaced child\n     */\n\n  }, {\n    key: \"replaceChild\",\n    value: function replaceChild(newChild, oldChild) {\n      Node.validParent(this);\n\n      if (newChild.contains(this)) {\n        throw new TypeError('the new child contains the parent');\n      }\n\n      if (oldChild.parent !== this) {\n        throw new TypeError('the old child is not a child of this node');\n      }\n\n      this.insertBefore(newChild, oldChild);\n      this.removeChild(oldChild);\n      return oldChild;\n    }\n    /**\n     * Replace current child node with another node, assuming current node is child\n     * @param node Node to be replaced with\n     */\n\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(node) {\n      Node.validChild(this);\n\n      if (!this.parent) {\n        throw new Error('can not replace isolated node');\n      }\n\n      this.parent.replaceChild(node, this);\n      return node;\n    }\n    /**\n     * Set single attribute value\n     * @param {string} key Attribute key\n     * @param {any} value Attribute value\n     */\n\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(key, value) {\n      _.set(this.attributes, key, value);\n    }\n    /**\n     * Set multiple attributes\n     * @param data Key-value pair\n     */\n\n  }, {\n    key: \"setAttributes\",\n    value: function setAttributes(data) {\n      _.merge(this.attributes, data);\n    }\n    /**\n     * Get attribute value\n     * @param key \n     */\n\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(key) {\n      return _.get(this.attributes, key);\n    }\n    /**\n     * Check if a specified attribute key exists\n     * @param key \n     */\n\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(key) {\n      return _.has(this.attributes, key);\n    }\n    /**\n     * Remove an attribute\n     * @param {string} key \n     */\n\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(key) {\n      _.unset(this.attributes, key);\n    }\n    /**\n     * Remove all attributes\n     */\n\n  }, {\n    key: \"clearAttributes\",\n    value: function clearAttributes() {\n      this.attributes = {};\n    }\n    /**\n     * Set single metadata value\n     * @param key Metadata key\n     * @param value Metadata value\n     */\n\n  }, {\n    key: \"setMetadata\",\n    value: function setMetadata(key, value) {\n      if (_.isObject(key)) {\n        _.merge(this.metadata, key);\n      } else {\n        _.set(this.metadata, key, value);\n      }\n    }\n    /**\n     * Get metadata value\n     * @param key \n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata(key) {\n      return _.get(this.metadata, key);\n    }\n    /**\n     * Remove a metadata\n     * @param key \n     */\n\n  }, {\n    key: \"removeMetadata\",\n    value: function removeMetadata(key) {\n      _.unset(this.metadata, key);\n    }\n    /**\n     * Remove all metadata\n     */\n\n  }, {\n    key: \"clearMetadata\",\n    value: function clearMetadata() {\n      this.metadata = {};\n    }\n    /**\n     * Check if a specified metadata key exists\n     * @param key \n     */\n\n  }, {\n    key: \"hasMetadata\",\n    value: function hasMetadata(key) {\n      return _.has(this.metadata, key);\n    }\n    /**\n     * Add label to node\n     * @param label \n     */\n\n  }, {\n    key: \"addLabel\",\n    value: function addLabel(label) {\n      if (!_.isString(label)) {\n        throw new TypeError('label must be string');\n      }\n\n      if (!this.labels.includes(label)) {\n        this.labels.push(label);\n      }\n    }\n    /**\n     * Check if the node has specified label\n     * @param label \n     */\n\n  }, {\n    key: \"hasLabel\",\n    value: function hasLabel(label) {\n      return this.labels.includes(label);\n    }\n    /**\n     * Remove label\n     * @param label \n     */\n\n  }, {\n    key: \"removeLabel\",\n    value: function removeLabel(label) {\n      _.pull(this.labels, label);\n    }\n    /**\n     * Remove all labels\n     */\n\n  }, {\n    key: \"clearLabels\",\n    value: function clearLabels() {\n      this.labels = [];\n    }\n    /**\n     * Rebuild text and source position, in case modification has been applied to node\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var source = this.toSource();\n\n      if (this.isRoot) {\n        this._source = source;\n      }\n\n      this.toString();\n    }\n    /**\n     * Get node by id\n     * @param id \n     */\n\n  }, {\n    key: \"getNodeById\",\n    value: function getNodeById(id) {\n      return _findOne(this, function (node) {\n        return node.id === id;\n      });\n    }\n    /**\n     * Find matched descendants recursively\n     * @param selector Node selector object\n     * @param [one] Find the first matched node or a list of node\n     */\n\n  }, {\n    key: \"findBy\",\n    value: function findBy() {\n      var _this2 = this;\n\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var one = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var type = selector.type,\n          name = selector.name,\n          text = selector.text,\n          source = selector.source,\n          label = selector.label;\n      var finder = one ? _findOne : _find;\n      return finder(this, function (node) {\n        var match = true;\n\n        if (type) {\n          match = match && type === node.type;\n        }\n\n        if (name) {\n          match = match && name === node.name;\n        }\n\n        if (text && node.type === NodeType.TEXT && node.content) {\n          if (_.isRegExp(text)) {\n            match = match && !!text.match(node.content);\n          } else if (_.isString(text)) {\n            match = match && node.content.includes(text);\n          } else {\n            throw new TypeError('text filter should be RegExp or string');\n          }\n        }\n\n        if (source && node._source) {\n          if (_.isRegExp(source)) {\n            match = match && !!source.match(node._source);\n          } else if (_.isString(source)) {\n            match = match && node._source.includes(source);\n          } else {\n            throw new TypeError('source filter should be RegExp or string');\n          }\n        }\n\n        if (label) {\n          if (_.isArray(label)) {\n            match = match && _.intersection(_this2.labels, label).length > 0;\n          } else {\n            match = match && _this2.labels.includes(label);\n          }\n        }\n\n        return match;\n      });\n      ;\n    }\n    /**\n     * Find nodes by selector recursively and return the first one\n     * @param selector \n     */\n\n  }, {\n    key: \"findOneBy\",\n    value: function findOneBy() {\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.findBy(selector, true);\n    }\n    /**\n     * Find matched text node by text source range\n     * @param start \n     * @param end \n     */\n\n  }, {\n    key: \"findTextByRange\",\n    value: function findTextByRange(start, end) {\n      if (this.textStart === undefined || this.textEnd === undefined) {\n        return undefined;\n      }\n\n      if (this.textStart <= start && this.textEnd >= end) {\n        if (this.type === NodeType.TEXT) {\n          return this;\n        } else if (this.hasChild()) {\n          for (var i = 0; i < this.children.length; i++) {\n            var child = this.children[i];\n            var match = child.findTextByRange(start, end);\n\n            if (match) {\n              return match;\n            }\n          }\n\n          ;\n        }\n      }\n\n      return undefined;\n    }\n    /**\n     * Find matched children recursively by callback\n     * @param callback\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(callback) {\n      return _find(this, callback);\n    }\n    /**\n     * Find matched children recursively and return the first one\n     * @param callback\n     */\n\n  }, {\n    key: \"findOne\",\n    value: function findOne(callback) {\n      return _findOne(this, callback);\n    }\n    /**\n     * Find all nodes by selector, compared by is()\n     * @param selector \n     */\n\n  }, {\n    key: \"querySelectorAll\",\n    value: function querySelectorAll(selector) {\n      return _find(this, selector);\n    }\n    /**\n     * Find nodes by selector and return the first one, compared by is()\n     * @param selector \n     */\n\n  }, {\n    key: \"querySelector\",\n    value: function querySelector(selector) {\n      return _findOne(this, selector);\n    }\n    /**\n     * Merge neighbor text nodes\n     */\n\n  }, {\n    key: \"mergeText\",\n    value: function mergeText() {\n      var _this3 = this;\n\n      var stack = [];\n      var childLength = this.children.length;\n      this.children.forEach(function (child, i) {\n        if (child.isText) {\n          stack.push(child);\n        }\n\n        if (!child.isText || i === childLength - 1) {\n          if (stack.length > 1) {\n            var merged = stack.map(function (child) {\n              return child.content;\n            }).join('');\n            var textNode = Node.createText(merged);\n\n            _this3.insertBefore(textNode, stack[0]);\n\n            var n;\n\n            while (n = stack.shift()) {\n              _this3.removeChild(n);\n            }\n          }\n\n          stack = [];\n        }\n      });\n    }\n  }, {\n    key: \"extractNodes\",\n    value: function extractNodes(startIndex, endIndex) {\n      var fragment = Node.createFragment();\n\n      if (startIndex < 0 || startIndex >= this.children.length || endIndex < 0 || endIndex > this.children.length) {\n        throw new RangeError('invalid range of children');\n      }\n\n      var nodes = this.children.slice(startIndex, endIndex);\n      nodes.forEach(function (child) {\n        fragment.appendChild(child);\n      });\n      return fragment;\n    }\n    /**\n     * Remove a element and move its children to its parent\n     */\n\n  }, {\n    key: \"flatten\",\n    value: function flatten() {\n      if (!this.parent) {\n        return;\n      }\n\n      var parent = this.parent;\n      var fragment = this.extractNodes(0, this.children.length);\n      parent.insertBefore(fragment, this);\n      parent.removeChild(this);\n      parent.mergeText();\n      return parent;\n    }\n    /**\n     * Process text node in current node and parse entities\n     */\n\n  }, {\n    key: \"createEntities\",\n    value: function createEntities(items) {\n      var entityNodes = [];\n\n      if (this.type !== NodeType.TEXT) {\n        console.warn('extractEntity() should exec only on text node');\n      }\n\n      if (!this.content || _.isEmpty(items)) {\n        return entityNodes;\n      }\n\n      var text = this.content;\n      items = _.sortBy(items, ['start']);\n      var fragment = Node.createFragment();\n      var lastPos = 0;\n      items.forEach(function (item) {\n        if (item.start >= item.end || item.start < lastPos) {\n          return;\n        }\n\n        if (item.start > lastPos) {\n          fragment.appendText(text.substring(lastPos, item.start));\n        }\n\n        var entityNode = fragment.createChild(NodeType.ENTITY, item.type, {\n          attributes: item.data\n        });\n        entityNode.appendText(text.substring(item.start, item.end));\n        entityNodes.push(entityNode);\n        lastPos = item.end;\n      });\n\n      if (lastPos < text.length) {\n        fragment.appendText(text.substr(lastPos));\n      }\n\n      this.replaceWith(fragment);\n      return entityNodes;\n    }\n    /**\n     * Create entity nodes based on text source position\n     * @param {Array.<{start:number,end:number,type:string,data:any}>} entities \n     */\n\n  }, {\n    key: \"createEntitiesFromText\",\n    value: function createEntitiesFromText(entities) {\n      var _this4 = this;\n\n      this.toString();\n      var cache = new Map();\n\n      _.each(entities, function (item) {\n        var textNode = _this4.findTextByRange(item.start, item.end);\n\n        if (textNode === undefined) {\n          return;\n        }\n\n        if (cache.has(textNode)) {\n          cache.get(textNode).push(item);\n        } else {\n          cache.set(textNode, [item]);\n        }\n      });\n\n      cache.forEach(function (items, textNode) {\n        textNode.createEntities(items.map(function (item) {\n          return (0, _objectSpread2.default)({}, item, {\n            start: item.start - (textNode.textStart || 0),\n            end: item.end - (textNode.textStart || 0)\n          });\n        }));\n      });\n    }\n    /**\n     * Extract entities from text node\n     */\n\n  }, {\n    key: \"extractEntities\",\n    value: function () {\n      var _extractEntities = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(extractor) {\n        var nodeList, textList, result;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nodeList = this.find(function (node) {\n                  return node.type === NodeType.TEXT && !!node.parent && node.parent.type !== NodeType.ENTITY && !!node.content;\n                });\n                textList = nodeList.map(function (node) {\n                  return node.content;\n                });\n\n                if (!_.isFunction(extractor)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                result = textList.map(function (text) {\n                  return extractor(text);\n                });\n                _context.next = 13;\n                break;\n\n              case 6:\n                if (!_.isFunction(extractor.extract)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 9;\n                return extractor.extract(textList);\n\n              case 9:\n                result = _context.sent;\n                _context.next = 13;\n                break;\n\n              case 12:\n                throw new TypeError('invalid extractor');\n\n              case 13:\n                nodeList.forEach(function (node, i) {\n                  var items = result[i];\n\n                  if (!_.isArray(items)) {\n                    throw new Error('invalid extraction result');\n                  }\n\n                  node.createEntities(items);\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function extractEntities(_x) {\n        return _extractEntities.apply(this, arguments);\n      };\n    }()\n    /**\n     * Remove wrapping entity and put text back\n     */\n\n  }, {\n    key: \"removeEntity\",\n    value: function removeEntity() {\n      if (this.type !== NodeType.ENTITY || !this.firstChild || this.firstChild.type !== NodeType.TEXT) {\n        throw new Error('invalid entity');\n      }\n\n      ;\n\n      if (!this.parent) {\n        throw new Error('can not remove isolated entity');\n      }\n\n      var text = this.firstChild.content || '';\n      var textNode;\n      var parent = this.parent,\n          previousSibling = this.previousSibling,\n          nextSibling = this.nextSibling;\n\n      if (previousSibling && previousSibling.isText) {\n        textNode = previousSibling;\n      }\n\n      if (textNode) {\n        textNode.appendText(text);\n      } else {\n        textNode = Node.create(NodeType.TEXT, undefined, {\n          content: text\n        });\n        parent.insertBefore(textNode, this);\n      }\n\n      if (nextSibling && nextSibling.isText) {\n        textNode.appendText(nextSibling.content || '');\n        parent.removeChild(nextSibling);\n      }\n\n      parent.removeChild(this);\n      return textNode;\n    }\n    /**\n     * Build plain text of the node (stripping tags & entities)\n     * @param [options]\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(options) {\n      return (0, _util.stringify)(this, options);\n    }\n    /**\n     * Build source code of the node\n     * @param [options]\n     */\n\n  }, {\n    key: \"toSource\",\n    value: function toSource() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return (0, _util.stringify)(this, (0, _objectSpread2.default)({}, options, {\n        toSource: true\n      }));\n    }\n    /**\n     * Convert node to JSON serializable object\n     * @param options \n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _options$position = options.position,\n          position = _options$position === void 0 ? false : _options$position,\n          _options$textPosition = options.textPosition,\n          textPosition = _options$textPosition === void 0 ? false : _options$textPosition;\n      return _.omitBy({\n        type: this.type,\n        name: this.name,\n        content: this.content,\n        attributes: toJsonMap(this.attributes),\n        metadata: toJsonMap(this.metadata),\n        labels: this.labels.length ? this.labels : undefined,\n        position: position ? {\n          start: this.start,\n          end: this.end\n        } : undefined,\n        textPosition: textPosition ? {\n          start: this.textStart,\n          end: this.textEnd\n        } : undefined,\n        children: _.isEmpty(this.children) ? undefined : this.children.map(function (child) {\n          return child.toJSON(options);\n        })\n      }, _.isUndefined);\n    }\n  }, {\n    key: \"descriptor\",\n    get: function get() {\n      switch (this.type) {\n        case NodeType.ENTITY:\n          return \"[\".concat(this.name, \"]\");\n\n        case NodeType.TAG:\n          return \"{\".concat(this.name, \"}\");\n\n        case NodeType.TEXT:\n          return \"(text)\";\n\n        default:\n          return this.type;\n      }\n    }\n    /**\n     * Check if the node is root\n     */\n\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.type === NodeType.ROOT;\n    }\n    /**\n     * Check if the node is tag\n     */\n\n  }, {\n    key: \"isTag\",\n    get: function get() {\n      return this.type === NodeType.TAG;\n    }\n    /**\n     * Check if the node is entity\n     */\n\n  }, {\n    key: \"isEntity\",\n    get: function get() {\n      return this.type === NodeType.ENTITY;\n    }\n    /**\n     * Check if the node is text\n     */\n\n  }, {\n    key: \"isText\",\n    get: function get() {\n      return this.type === NodeType.TEXT;\n    }\n    /**\n     * Check if the node is text and not wrapping by entity\n     */\n\n  }, {\n    key: \"isPlainText\",\n    get: function get() {\n      return this.type === NodeType.TEXT && (!this.parent || this.parent.type !== NodeType.ENTITY);\n    }\n    /**\n     * Check if the node is wrapping tag\n     */\n\n  }, {\n    key: \"isWrappingTag\",\n    get: function get() {\n      return this.isTag && WrappingTags.includes(this.name);\n    }\n    /**\n     * Check if the node is block tag\n     */\n\n  }, {\n    key: \"isBlockTag\",\n    get: function get() {\n      return this.isTag && BlockTags.includes(this.name);\n    }\n    /**\n     * Check if the node is simple block or inline block\n     */\n\n  }, {\n    key: \"isSimpleTag\",\n    get: function get() {\n      return this.isTag && ['BLOCK', 'INLINE'].includes(this.name);\n    }\n    /**\n     * Property indicates if the node is a block (wrapping other nodes)\n     */\n\n  }, {\n    key: \"isBlock\",\n    get: function get() {\n      var type = this.type,\n          name = this.name;\n      return BlockNodeTypes.includes(type) || this.isBlockTag;\n    }\n    /**\n     * If node is inline block\n     */\n\n  }, {\n    key: \"isInlineBlock\",\n    get: function get() {\n      return this.isTag && !this.isBlockTag;\n    }\n    /**\n     * Get parent node, alias for node.parent\n     */\n\n  }, {\n    key: \"parentNode\",\n    get: function get() {\n      return this.parent;\n    }\n    /**\n     * Get child nodes, alias for node.children\n     */\n\n  }, {\n    key: \"childNodes\",\n    get: function get() {\n      return this.children;\n    }\n    /**\n     * Get source code of the node\n     */\n\n  }, {\n    key: \"source\",\n    get: function get() {\n      if (this.type === NodeType.ROOT) {\n        return this._source || '';\n      }\n\n      var rootNode = this.getRootNode();\n\n      if (!rootNode) {\n        throw new Error('ROOT node not found');\n      }\n\n      return rootNode.source.substring(this.start || 0, this.end);\n    }\n    /**\n     * Get node inner text\n     */\n\n  }, {\n    key: \"innerText\",\n    get: function get() {\n      if (this.type === NodeType.TEXT) {\n        return this.content;\n      } else if (this.type === NodeType.ENTITY) {\n        var textNode = this.children[0];\n        return textNode ? textNode.content : '';\n      } else {\n        return this.toString();\n      }\n    }\n    /**\n     * Check if the node is the first child of its parent\n     */\n\n  }, {\n    key: \"isFirstChild\",\n    get: function get() {\n      var parent = this.parent;\n\n      if (!parent) {\n        return false;\n      }\n\n      return _.first(parent.children) === this;\n    }\n    /**\n     * Check if the node is the last child of its parent\n     */\n\n  }, {\n    key: \"isLastChild\",\n    get: function get() {\n      var parent = this.parent;\n\n      if (!parent) {\n        return false;\n      }\n\n      return _.last(parent.children) === this;\n    }\n    /**\n     * Siblings from same parent\n     */\n\n  }, {\n    key: \"siblings\",\n    get: function get() {\n      var parent = this.parent;\n\n      if (!parent) {\n        return [this];\n      }\n\n      return parent.children;\n    }\n    /**\n     * Get index of parent children\n     */\n\n  }, {\n    key: \"childIndex\",\n    get: function get() {\n      var siblings = this.siblings;\n      return siblings.indexOf(this);\n    }\n    /**\n     * Next sibling node\n     */\n\n  }, {\n    key: \"nextSibling\",\n    get: function get() {\n      if (!this.parent) return undefined;\n      var childIndex = this.childIndex,\n          siblings = this.siblings;\n      return siblings[childIndex + 1] || undefined;\n    }\n    /**\n     * Previous sibling node\n     */\n\n  }, {\n    key: \"previousSibling\",\n    get: function get() {\n      if (!this.parent) return undefined;\n      var childIndex = this.childIndex,\n          siblings = this.siblings;\n      return siblings[childIndex - 1] || undefined;\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      var list = [];\n      var node = this;\n\n      while (node) {\n        list.unshift(node);\n        node = node.parent;\n      }\n\n      return list;\n    }\n    /**\n     * Get the first child of current node\n     */\n\n  }, {\n    key: \"firstChild\",\n    get: function get() {\n      Node.validParent(this);\n      return _.first(this.children);\n    }\n    /**\n     * Get the last child of current node\n     */\n\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      Node.validParent(this);\n      return _.last(this.children);\n    }\n  }, {\n    key: \"isOnlyChild\",\n    get: function get() {\n      if (!this.parent) {\n        return false;\n      }\n\n      return this.parent.children.length === 1;\n    }\n  }]);\n  return Node;\n}();\n\n(0, _defineProperty2.default)(Node, \"Types\", NodeType);\nvar _default = Node;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"TextLine\", {\n  enumerable: true,\n  get: function get() {\n    return _TextLine.default;\n  }\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _TextLine = _interopRequireDefault(require(\"./TextLine\"));\n\nvar _constants = require(\"./constants\"); // improved from https://github.com/codemirror/CodeMirror/blob/master/src/util/StringStream.js\n\n\nvar NOT_FOUND = -1;\nvar LINE_BREAKS = /\\r?\\n/g;\n/**\n * Stream like text string\n * @typicalname stream\n */\n\nvar TextStream =\n/*#__PURE__*/\nfunction () {\n  /** Current cursor position */\n\n  /** Original text */\n\n  /** Tab size */\n\n  /** Text lines */\n\n  /** Start position of each line */\n\n  /** Markers */\n\n  /** Cursor stack positions */\n\n  /** Last matched string of methods like eat() match() */\n  function TextStream(text) {\n    var tabSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    (0, _classCallCheck2.default)(this, TextStream);\n    (0, _defineProperty2.default)(this, \"pos\", void 0);\n    (0, _defineProperty2.default)(this, \"text\", void 0);\n    (0, _defineProperty2.default)(this, \"tabSize\", void 0);\n    (0, _defineProperty2.default)(this, \"lines\", void 0);\n    (0, _defineProperty2.default)(this, \"lineOffsetIndexes\", []);\n    (0, _defineProperty2.default)(this, \"markers\", void 0);\n    (0, _defineProperty2.default)(this, \"cursorStack\", void 0);\n    (0, _defineProperty2.default)(this, \"lastMatch\", '');\n    this.pos = 0;\n    /**\n     * @readonly\n     * @type {string}\n     * @description Original text\n     */\n\n    this.text = text;\n    /**\n     * @description Tab size\n     */\n\n    this.tabSize = tabSize;\n    /**\n     * @description Lines, separated by line breaks\n     */\n\n    this.lines = [];\n    /**\n     * @description Stream markers, used by `pushMarker()`, `popMarker()`, `setMarkerData()`\n     */\n\n    this.markers = [];\n    /**\n     * @description Cursor stack, used by `pushCursor()` and `popCursor`\n     */\n\n    this.cursorStack = [];\n    this.init();\n  }\n  /**\n   * Prepare line indexes\n   */\n\n\n  (0, _createClass2.default)(TextStream, [{\n    key: \"init\",\n    value: function init() {\n      var lines = [];\n      var matched;\n      var offset = 0;\n      var ln = 1;\n      LINE_BREAKS.lastIndex = 0;\n\n      do {\n        matched = LINE_BREAKS.exec(this.text);\n\n        if (matched) {\n          var length = matched.index - offset;\n\n          var _text = this.text.substr(offset, length);\n\n          lines.push(new _TextLine.default(lines, _text, ln, offset));\n          offset += length + matched[0].length;\n        } else {\n          var _length = this.text.length - offset; // process last line without line break symbol\n\n\n          if (_length > 0) {\n            var _text2 = this.text.substr(offset);\n\n            lines.push(new _TextLine.default(lines, _text2, ln, offset));\n          }\n        }\n\n        ln++;\n      } while (matched);\n\n      this.lines = lines;\n      this.lineOffsetIndexes = _.map(lines, 'offset');\n    }\n    /**\n     * Get line and column position of the cursor\n     * @param pos Cursor position of the text\n     */\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(pos) {\n      if (_.isUndefined(pos)) {\n        pos = this.pos;\n      }\n\n      var lineIndex = _.sortedLastIndex(this.lineOffsetIndexes, pos) - 1;\n      var line = this.lines[lineIndex];\n\n      if (!line) {\n        throw new Error('cursor position is invalid');\n      }\n\n      var ln = line.ln,\n          offset = line.offset;\n      var col = pos - offset + 1;\n      return {\n        ln: ln,\n        col: col,\n        pos: pos,\n        line: line\n      };\n    }\n    /**\n     * Check if cursor is at the start of a line\n     * @param [trimSpaces] Whether to trim starting spaces\n     */\n\n  }, {\n    key: \"sol\",\n    value: function sol() {\n      var trimSpaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _this$getPosition = this.getPosition(),\n          col = _this$getPosition.col,\n          line = _this$getPosition.line;\n\n      if (col - 1 === 0) {\n        return true;\n      }\n\n      if (!trimSpaces) {\n        return false;\n      }\n\n      var _$trimStart = _.trimStart(line.text),\n          length = _$trimStart.length;\n\n      return col - 1 <= line.length - length;\n    }\n    /**\n     * Check if cursor is at the end of a line\n     * @param [trimSpaces] Whether to trim ending spaces\n     */\n\n  }, {\n    key: \"eol\",\n    value: function eol() {\n      var trimSpaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _this$getPosition2 = this.getPosition(),\n          col = _this$getPosition2.col,\n          line = _this$getPosition2.line;\n\n      if (col - 1 === line.length) {\n        return true;\n      }\n\n      if (!trimSpaces) {\n        return false;\n      }\n\n      var _$trimEnd = _.trimEnd(line.text),\n          length = _$trimEnd.length;\n\n      return col - 1 >= length;\n    }\n    /**\n     * Check if cursor is at the end of whole text\n     * @param {number} [pos] \n     */\n\n  }, {\n    key: \"eof\",\n    value: function eof(pos) {\n      if (_.isUndefined(pos)) {\n        pos = this.pos;\n      }\n\n      return pos >= this.text.length;\n    }\n    /**\n     * Get one next char, but keep the cursor position (if available)\n     * @returns The next char\n     */\n\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this.text.charAt(this.pos);\n    }\n    /**\n     * Get one next char, and move cursor forward (if available)\n     * @returns The next char\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this.pos < this.text.length) {\n        return this.text.charAt(this.pos++);\n      }\n\n      return '';\n    }\n    /**\n     * Consumes one char if the next char fitting the pattern\n     * @param pattern \n     * @returns The char been eaten\n     */\n\n  }, {\n    key: \"eat\",\n    value: function eat(pattern) {\n      var ch = this.text.charAt(this.pos) || '';\n      var ok;\n\n      if (_.isUndefined(ch)) {\n        ok = false;\n      } else if (_.isString(pattern)) {\n        ok = ch === pattern;\n      } else if (_.isRegExp(pattern)) {\n        pattern.lastIndex = 0;\n        ok = pattern.test(ch);\n      } else if (_.isFunction(pattern)) {\n        ok = pattern(ch);\n      }\n\n      if (ok) {\n        this.lastMatch = ch;\n        ++this.pos;\n        return ch;\n      }\n\n      return '';\n    }\n    /**\n     * Consumes chars while fitting the pattern\n     * @param match \n     * @returns Eaten characters\n     */\n\n  }, {\n    key: \"eatWhile\",\n    value: function eatWhile(pattern) {\n      var start = this.pos;\n      var chr;\n      var string = '';\n\n      do {\n        chr = this.eat(pattern);\n\n        if (chr) {\n          string += chr;\n        }\n      } while (chr && !this.eof());\n\n      return string;\n    }\n    /**\n     * Consumes chars until the first char not fitting the pattern\n     * @param pattern char or pattern\n     * @returns eaten characters\n     */\n\n  }, {\n    key: \"eatUntil\",\n    value: function eatUntil(pattern) {\n      var start = this.pos;\n      var ch;\n      var string = '';\n\n      do {\n        ch = this.eat(pattern);\n\n        if (!ch) {\n          string += this.peek();\n          this.pos++;\n        } else {\n          this.pos--;\n        }\n      } while (!ch && !this.eof());\n\n      return string;\n    }\n    /**\n     * Consumes spaces\n     * @returns {boolean} If any space has been consumed\n     */\n\n  }, {\n    key: \"eatSpaces\",\n    value: function eatSpaces() {\n      var start = this.pos;\n\n      while (/[\\s\\u00a0]/.test(this.text.charAt(this.pos))) {\n        this.pos++;\n      }\n\n      return this.pos > start;\n    }\n    /**\n     * Find position of matched text to the pattern\n     * @param pattern \n     * @param options\n     */\n\n  }, {\n    key: \"search\",\n    value: function search(pattern) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var caseInsensitive = options.caseInsensitive;\n      var index = NOT_FOUND;\n      var length = 0;\n      var matched = '';\n\n      if (typeof pattern === 'string') {\n        if (caseInsensitive) {\n          pattern = new RegExp(_.escapeRegExp(pattern), 'i');\n        } else {\n          index = this.text.indexOf(pattern, this.pos);\n\n          if (index !== NOT_FOUND) {\n            matched = pattern;\n          }\n        }\n      }\n\n      if (pattern instanceof RegExp) {\n        pattern.lastIndex = this.pos;\n        var result = pattern.exec(this.text);\n\n        if (result) {\n          index = result.index;\n          matched = result[0];\n        } else {\n          index = NOT_FOUND;\n        }\n      }\n\n      var _matched = matched;\n      length = _matched.length;\n      return {\n        index: index,\n        length: length,\n        matched: matched\n      };\n    }\n    /**\n     * Read n chars after current cursor\n     * @param [n] Number of chars to read\n     */\n\n  }, {\n    key: \"read\",\n    value: function read() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var left = this.text.length - this.pos;\n\n      if (left <= 0) {\n        return '';\n      } else if (left < n) {\n        n = left;\n      }\n\n      var result = this.text.substr(this.pos, n);\n      this.pos += n;\n      return result;\n    }\n    /**\n     * Read to text or pattern\n     * @param pattern \n     * @param [options]\n     * @returns Sub-text after current cursor and before (or contains) matched text\n     */\n\n  }, {\n    key: \"readTo\",\n    value: function readTo(pattern) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$toEOL = options.toEOL,\n          toEOL = _options$toEOL === void 0 ? false : _options$toEOL,\n          _options$toEOF = options.toEOF,\n          toEOF = _options$toEOF === void 0 ? false : _options$toEOF,\n          _options$consume = options.consume,\n          consume = _options$consume === void 0 ? false : _options$consume,\n          _options$skipMatched = options.skipMatched,\n          skipMatched = _options$skipMatched === void 0 ? false : _options$skipMatched;\n      var start = this.pos;\n\n      var _this$search = this.search(pattern),\n          index = _this$search.index,\n          length = _this$search.length;\n\n      var match = '';\n      var end = -1;\n\n      if (toEOL) {\n        var _this$getPosition3 = this.getPosition(),\n            _line = _this$getPosition3.line;\n\n        end = _line.offset + _line.length;\n      } else if (toEOF) {\n        end = this.text.length;\n      }\n\n      if (index !== NOT_FOUND) {\n        if (toEOL || toEOF) {\n          if (index < end) {\n            end = index;\n          } else {\n            length = 0;\n          }\n        } else {\n          end = index;\n        }\n      }\n\n      if (end !== -1) {\n        this.pos = end;\n\n        if (consume) {\n          end += length;\n          this.pos = end;\n        } else if (skipMatched) {\n          this.pos += length;\n        }\n\n        match = this.text.substring(start, end);\n      }\n\n      this.lastMatch = match;\n      return match;\n    }\n    /**\n     * Read to pattern (contains the matched text)\n     * @param {} pattern Text to find or pattern\n     * @param {object} options Match options\n     * @returns {string} Sub-text after current cursor and until the end of matched text\n     */\n\n  }, {\n    key: \"readOver\",\n    value: function readOver(pattern) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.readTo(pattern, (0, _objectSpread2.default)({}, options, {\n        consume: true\n      }));\n    }\n    /**\n     * Read one line\n     * @returns {string} Text containing one line (not including line break)\n     */\n\n  }, {\n    key: \"readLine\",\n    value: function readLine() {\n      var _this$getPosition4 = this.getPosition(),\n          line = _this$getPosition4.line;\n\n      var nextLine = line.next();\n\n      if (this.eof()) {\n        return '';\n      }\n\n      if (nextLine) {\n        this.pos = nextLine.offset;\n        return line.text;\n      } else {\n        var length = line.offset + line.length - this.pos;\n        return this.read(length);\n      }\n    }\n    /**\n     * Move cursor to end of text\n     */\n\n  }, {\n    key: \"skipToEnd\",\n    value: function skipToEnd() {\n      this.pos = this.text.length;\n    }\n    /**\n     * Skip to the beginning of matched text\n     * @param pattern\n     * @param options\n     */\n\n  }, {\n    key: \"skipTo\",\n    value: function skipTo(pattern, options) {\n      var start = this.pos;\n      this.readTo(pattern, options);\n      return start !== this.pos;\n    }\n    /**\n     * Skip to the end of matched text\n     * @param pattern\n     */\n\n  }, {\n    key: \"skipOver\",\n    value: function skipOver(pattern, options) {\n      var start = this.pos;\n      this.readTo(pattern, (0, _objectSpread2.default)({}, options, {\n        skipMatched: true\n      }));\n      return start !== this.pos;\n    }\n    /**\n     * Move cursor back\n     * @param n Steps\n     */\n\n  }, {\n    key: \"backUp\",\n    value: function backUp() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.pos -= n;\n    }\n    /**\n     * Check if rest text begins with pattern\n     * @param pattern \n     * @param [options] \n     */\n\n  }, {\n    key: \"match\",\n    value: function match(pattern) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$consume2 = options.consume,\n          consume = _options$consume2 === void 0 ? true : _options$consume2,\n          caseInsensitive = options.caseInsensitive;\n\n      var _this$search2 = this.search(pattern, {\n        caseInsensitive: caseInsensitive\n      }),\n          index = _this$search2.index,\n          length = _this$search2.length,\n          matched = _this$search2.matched;\n\n      if (index !== this.pos) {\n        return '';\n      }\n\n      if (consume) {\n        this.pos += length;\n      }\n\n      this.lastMatch = matched;\n      return matched;\n    }\n    /**\n     * Reset the marker stack\n     */\n\n  }, {\n    key: \"resetMarker\",\n    value: function resetMarker() {\n      this.markers = [];\n    }\n    /**\n     * Add a marker to stack\n     * @param data\n     * @param start\n     */\n\n  }, {\n    key: \"pushMarker\",\n    value: function pushMarker(data, start) {\n      if (_.isUndefined(start)) {\n        start = this.pos;\n      }\n\n      this.markers.push({\n        data: data,\n        start: start\n      });\n    }\n    /**\n     * Set data for current marker\n     * @param data\n     */\n\n  }, {\n    key: \"setMarkerData\",\n    value: function setMarkerData(data) {\n      var marker = _.last(this.markers);\n\n      if (!marker) return;\n\n      _.extend(marker.data, data);\n    }\n    /**\n     * Get data of current markder\n     */\n\n  }, {\n    key: \"getMarkerData\",\n    value: function getMarkerData() {\n      var marker = _.last(this.markers);\n\n      if (!marker) return {};\n      return marker.data;\n    }\n    /**\n     * Return a combined structure of text and it's position according to the previously set start\n     * marker\n     * @param [data] Additional data\n     * @param [end] End marker, if not set, previous set value will be used\n     */\n\n  }, {\n    key: \"popMarker\",\n    value: function popMarker() {\n      var _data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var end = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (!_.isPlainObject(_data)) {\n        throw new TypeError('invalid data parameter');\n      }\n\n      if (_.isUndefined(end)) {\n        end = this.pos;\n      }\n\n      var marker = this.markers.pop();\n\n      if (!marker) {\n        return undefined;\n      }\n\n      var data = marker.data,\n          start = marker.start;\n      return {\n        text: this.text.substring(marker.start || 0, end),\n        position: {\n          start: start,\n          end: end\n        },\n        data: (0, _objectSpread2.default)({}, data, _data)\n      };\n    }\n  }, {\n    key: \"findLine\",\n    value: function findLine(text) {\n      return _.find(this.lines, function (line) {\n        return _.trim(line.text) === text;\n      });\n    }\n    /**\n     * Push current cursor to cursor stack, if new position provided, set current cursor to it\n     * @param [pos] \n     */\n\n  }, {\n    key: \"pushCursor\",\n    value: function pushCursor(pos) {\n      if (_.isUndefined(pos)) {\n        pos = this.pos;\n      }\n\n      this.cursorStack.push(this.pos);\n      this.pos = pos;\n    }\n    /**\n     * Pop last from cursor stack and set it to current cursor\n     */\n\n  }, {\n    key: \"popCursor\",\n    value: function popCursor() {\n      if (this.cursorStack.length === 0) {\n        throw new Error('out of cursor stack!');\n      }\n\n      this.pos = this.cursorStack.pop();\n      return this.pos;\n    }\n    /**\n     * Debug a single line\n     * @param line \n     * @param numWidth \n     * @param col \n     */\n\n  }, {\n    key: \"debugLine\",\n    value: function debugLine(line, numWidth, col) {\n      var ln = line.ln,\n          text = line.text;\n\n      if (_.isUndefined(numWidth)) {\n        numWidth = (ln + '').length;\n      }\n\n      if (col) {\n        text = text.substring(0, col - 1) + _chalk.default.bgBlue(text.charAt(col - 1)) + text.substring(col);\n      }\n\n      console.log(\"\".concat(_chalk.default.blueBright(\"\".concat(col ? '>' : ' ', \" \").concat(_.padStart(ln + '', numWidth), \" |\")), \" \").concat(text));\n    }\n    /**\n     * Debug cursor column position\n     * @param text Text of the line\n     * @param col Cursor position\n     * @param numWidth fixed line number width\n     */\n\n  }, {\n    key: \"debugCursor\",\n    value: function debugCursor(text, col, numWidth) {\n      var pos = text.substr(0, col - 1).replace(_constants.P_FULL_WIDTH_CHARACTER, 'XX').length;\n      console.log(_chalk.default.blueBright(\"  \".concat(_.repeat(' ', numWidth), \" | \").concat(_.repeat(' ', pos), \"^ \").concat(col)));\n    }\n    /**\n     * Debug current position state, with previous and following lines set by range\n     * @param range \n     */\n\n  }, {\n    key: \"debugState\",\n    value: function debugState() {\n      var _this = this;\n\n      var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      var _this$getPosition5 = this.getPosition(),\n          ln = _this$getPosition5.ln,\n          col = _this$getPosition5.col;\n\n      var lineIndex = ln - 1;\n\n      var lines = _.slice(this.lines, _.max([lineIndex - range, 0]), _.min([lineIndex + range + 1, this.lines.length]));\n\n      var numWidth = _.max(lines.map(function (l) {\n        return (l.ln + '').length;\n      }));\n\n      lines.forEach(function (line) {\n        var isCurrent = line.ln === ln;\n\n        _this.debugLine(line, numWidth, isCurrent ? col : 0);\n\n        if (isCurrent) {\n          _this.debugCursor(line.text, col, numWidth);\n        }\n      });\n      console.log();\n    }\n  }]);\n  return TextStream;\n}();\n\nvar _default = TextStream;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar ParseError =\n/*#__PURE__*/\nfunction (_Error) {\n  (0, _inherits2.default)(ParseError, _Error);\n\n  function ParseError(message, text, from, to) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseError);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseError).call(this, message));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"message\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"text\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"from\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"to\", void 0);\n    _this.message = message;\n    _this.text = text;\n    _this.from = from;\n    _this.to = to;\n    return _this;\n  }\n\n  return ParseError;\n}((0, _wrapNativeSuper2.default)(Error));\n\nexports.default = ParseError;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _TextStream = _interopRequireDefault(require(\"./TextStream\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _Node = _interopRequireWildcard(require(\"./Node\"));\n\nvar _constants = require(\"./constants\");\n\nvar State;\n\n(function (State) {\n  State[State[\"METADATA\"] = 0] = \"METADATA\";\n  State[State[\"NORMAL\"] = 1] = \"NORMAL\";\n  State[State[\"SINGLE_COMMENT\"] = 2] = \"SINGLE_COMMENT\";\n  State[State[\"MULTIPLE_COMMENT\"] = 3] = \"MULTIPLE_COMMENT\";\n  State[State[\"START\"] = 4] = \"START\";\n  State[State[\"TAG_START\"] = 5] = \"TAG_START\";\n  State[State[\"TAG_NAME\"] = 6] = \"TAG_NAME\";\n  State[State[\"ATTRIBUTE_LIST\"] = 7] = \"ATTRIBUTE_LIST\";\n  State[State[\"ATTRIBUTE_NAME\"] = 8] = \"ATTRIBUTE_NAME\";\n  State[State[\"ATTRIBUTE_ASSIGN\"] = 9] = \"ATTRIBUTE_ASSIGN\";\n  State[State[\"ATTRIBUTE_VALUE\"] = 10] = \"ATTRIBUTE_VALUE\";\n  State[State[\"ATTRIBUTE_FINISH\"] = 11] = \"ATTRIBUTE_FINISH\";\n  State[State[\"TAG_END\"] = 12] = \"TAG_END\";\n  State[State[\"LABEL_START\"] = 13] = \"LABEL_START\";\n  State[State[\"ENTITY_START\"] = 14] = \"ENTITY_START\";\n  State[State[\"ENTITY_BODY\"] = 15] = \"ENTITY_BODY\";\n  State[State[\"ENTITY_END\"] = 16] = \"ENTITY_END\";\n  State[State[\"END\"] = 17] = \"END\";\n  State[State[\"FINISH\"] = 18] = \"FINISH\";\n})(State || (State = {}));\n\n;\nvar stateNames = ['METADATA', 'NORMAL', 'SINGLE_COMMENT', 'MULTIPLE_COMMENT', 'START', 'TAG_START', 'TAG_NAME', 'ATTRIBUTE_LIST', 'ATTRIBUTE_NAME', 'ATTRIBUTE_ASSIGN', 'ATTRIBUTE_VALUE', 'ATTRIBUTE_FINISH', 'TAG_END', 'LABEL_START', 'ENTITY_START', 'ENTITY_BODY', 'ENTITY_END', 'END', 'FINISH'];\n\nvar getStateName = function getStateName(state) {\n  return stateNames[state];\n};\n\nvar countLineBreaks = function countLineBreaks(text) {\n  var result = text.match(_constants.P_LINE_BREAK);\n  return result ? result.length : 0;\n};\n\n;\n/**\n * Tokenizer class\n * @class\n */\n\nvar Tokenizer =\n/*#__PURE__*/\nfunction () {\n  (0, _createClass2.default)(Tokenizer, null, [{\n    key: \"from\",\n    value: function from(text, options) {\n      return new Tokenizer(text, options);\n    }\n  }]);\n  /**\n   * @param text \n   * @param options Constructor options\n   */\n\n  function Tokenizer(text, options) {\n    (0, _classCallCheck2.default)(this, Tokenizer);\n    (0, _defineProperty2.default)(this, \"text\", void 0);\n    (0, _defineProperty2.default)(this, \"stream\", void 0);\n    (0, _defineProperty2.default)(this, \"options\", void 0);\n    (0, _defineProperty2.default)(this, \"parsed\", void 0);\n    this.text = text;\n    this.stream = new _TextStream.default(text);\n    var defaultOptions = {\n      verbose: process && process.env.DEBUG === 'verbose'\n    };\n    this.options = _.defaults(options, defaultOptions);\n    this.parsed = false;\n  }\n\n  (0, _createClass2.default)(Tokenizer, [{\n    key: \"debug\",\n    value: function debug() {\n      if (this.options.verbose) {\n        var _console;\n\n        (_console = console).log.apply(_console, arguments);\n      }\n    }\n    /**\n     * Process a text and parse to AST\n     * @returns Root node of parsed AST\n     */\n\n  }, {\n    key: \"process\",\n    value: function process() {\n      var _this = this;\n\n      var text = this.text,\n          stream = this.stream;\n      var timeStart = Date.now();\n      var state = State.METADATA;\n      var start = 0;\n      var lastState = 0;\n      var lastPos = -1;\n      var states = {\n        unwrapped: false,\n        inline: false,\n        embedded: false,\n        isClosing: false,\n        key: undefined,\n        value: undefined\n      };\n\n      var root = _Node.default.create(_Node.NodeType.ROOT, undefined, {\n        source: text\n      });\n\n      var nodeStack = [];\n      var node = root;\n\n      var getNodeString = function getNodeString(node) {\n        return \"\".concat(node.type).concat(node.name ? \":\".concat(node.name) : '');\n      };\n\n      var debugStack = function debugStack(lastNode) {\n        if (!_this.options.verbose) {\n          return;\n        }\n\n        var separator = ' > ';\n        var stack = nodeStack.concat([node]);\n        var list = stack.map(function (n, i) {\n          var text = getNodeString(n);\n\n          if (i === stack.length - 1) {\n            text = _chalk.default.cyanBright(text);\n          } else {\n            text = _chalk.default.green(text);\n          }\n\n          return text;\n        });\n        var result = list.join(_chalk.default.redBright(separator));\n\n        if (lastNode) {\n          result += _chalk.default.grey(\"\".concat(separator).concat(getNodeString(lastNode)));\n        }\n\n        return result;\n      };\n\n      var pushNode = function pushNode(n) {\n        if (node.start === -1) {\n          node.start = stream.pos;\n        }\n\n        nodeStack.push(node);\n        node = n;\n\n        _this.debug(\"push: \".concat(debugStack(), \"\\n\"));\n      };\n\n      var popNode = function popNode(error) {\n        var lastNode = node;\n        node.end = stream.pos;\n\n        if (node.start === node.end || node.type === _Node.NodeType.PARAGRAPH && !node.hasChild() && node.parent) {\n          node.parent.removeChild(node);\n        }\n\n        node = nodeStack.pop();\n\n        _this.debug(\"pop : \".concat(debugStack(lastNode), \"\\n\"));\n\n        if (!node) {\n          throw createError(error || 'unexpected closing node');\n        }\n      }; // replace wrapping paragraph with current block tag\n\n\n      var levelUpBlock = function levelUpBlock() {\n        if (node.parent && node.parent.type === _Node.NodeType.PARAGRAPH) {\n          var blockNode = node;\n          popNode();\n          node.removeChild(blockNode);\n          popNode();\n          node.appendChild(blockNode);\n          pushNode(blockNode);\n        }\n      };\n\n      var createError = function createError(message) {\n        var from;\n        var to;\n        from = stream.getPosition(lastPos);\n        to = stream.pos === lastPos ? stream.getPosition(lastPos + 1) : stream.getPosition();\n\n        _this.debug(\"error: '\".concat(message, \"' at \").concat(from.ln, \":\").concat(from.col));\n\n        _this.debug('current node:');\n\n        _this.debug(node.toJSON());\n\n        _this.debug('current parsing state:');\n\n        _this.debug(JSON.stringify(root, null, 2));\n\n        return new _ParseError.default(message, text, from, to);\n      };\n\n      while (state !== State.FINISH) {\n        // parse failure watcher\n        if (Date.now() - timeStart >= _constants.PROCESSING_TIMEOUT) {\n          this.debug('parsing timeout!');\n          state = State.FINISH;\n        }\n\n        if (state === lastState && lastPos === stream.pos) {\n          throw new Error('Parser fall into infinite loop!');\n        }\n\n        lastState = state;\n        lastPos = stream.pos;\n        this.debug(_chalk.default.magenta(\"# \".concat(getStateName(state), \", pos = \").concat(stream.pos)));\n\n        if (this.options.verbose) {\n          stream.debugState();\n        }\n\n        switch (state) {\n          case State.METADATA:\n            {\n              stream.eatWhile(_constants.P_WHITE_SPACES_EXT);\n\n              if (stream.match(_constants.T_METADATA_MARKER) || stream.match(_constants.P_ATTRIBUTE_LIST, {\n                consume: false\n              })) {\n                node.states.metadata = true;\n                state = State.ATTRIBUTE_LIST;\n              } else {\n                state = State.NORMAL;\n              }\n\n              break;\n            }\n\n          case State.NORMAL:\n            {\n              if (stream.sol(true) || stream.eol(true)) {\n                stream.eatWhile(_constants.P_WHITE_SPACE);\n              }\n\n              if (stream.match(_constants.P_PARAGRAPH_BREAK)) {\n                popNode();\n\n                if (node.states.unwrapped) {\n                  popNode();\n                }\n\n                break;\n              }\n\n              start = stream.pos;\n\n              if (node.type !== _Node.NodeType.PARAGRAPH && !node.isInlineBlock && stream.sol(true)) {\n                var child = node.createChild(_Node.NodeType.PARAGRAPH, undefined, {\n                  start: start\n                });\n                pushNode(child);\n              }\n\n              var originalText = stream.readTo(_constants.P_MARKER, {\n                toEOF: true\n              });\n              var _text = originalText;\n\n              if (_text) {\n                if (node.children.length === 0) {\n                  _text = _.trimStart(_text);\n                }\n\n                _text = _text.replace(_constants.P_SPACE_WRAPPED_LINE_BREAK, _constants.T_LINE_BREAK);\n                _text = _.trimEnd(_text, _constants.T_LINE_BREAKS);\n\n                if (_text) {\n                  node.appendText(_text, {\n                    start: start,\n                    end: stream.pos\n                  });\n                }\n              }\n\n              if (stream.match(_constants.P_PARAGRAPH_BREAK, {\n                consume: false\n              })) {\n                state = State.NORMAL;\n              } else {\n                state = State.START;\n              }\n\n              break;\n            }\n\n          case State.START:\n            {\n              start = stream.pos;\n              var ch = stream.eat(_constants.P_MARKER);\n              _constants.P_LABEL_START.lastIndex = 0;\n\n              if (ch === _constants.T_SINGLE_LINE_COMMENT) {\n                var rest = stream.eatWhile(_constants.T_SINGLE_LINE_COMMENT);\n\n                if (rest.length === 0) {\n                  state = State.SINGLE_COMMENT;\n                } else {\n                  state = State.MULTIPLE_COMMENT;\n                }\n              } else if (ch === _constants.T_TAG_START) {\n                state = State.TAG_START;\n              } else if (_constants.P_LABEL_START.test(ch)) {\n                states.unwrapped = true;\n                state = State.TAG_START;\n              } else if (ch === _constants.T_TAG_END) {\n                states.isClosing = true;\n                state = State.TAG_END;\n              } else if (ch === _constants.T_ENTITY_START) {\n                state = State.ENTITY_START;\n              } else if (stream.eof()) {\n                state = State.END;\n              } else {\n                throw createError('empty start');\n              }\n\n              break;\n            }\n\n          case State.SINGLE_COMMENT:\n          case State.MULTIPLE_COMMENT:\n            {\n              start = stream.pos;\n              var content = void 0;\n\n              if (state === State.SINGLE_COMMENT) {\n                content = stream.readTo(_constants.P_LINE_BREAK);\n              } else {\n                content = stream.readTo(_constants.P_MULTIPLE_LINE_COMMENT, {\n                  skipMatched: true\n                });\n              }\n\n              if (content) {\n                if (state === State.MULTIPLE_COMMENT) {\n                  content = content.replace(_constants.P_SPACE_WRAPPED_LINE_BREAK, '\\n');\n                }\n\n                content = _.trim(content);\n              }\n\n              if (content) {\n                node.createChild(_Node.NodeType.COMMENT, undefined, {\n                  start: start,\n                  end: stream.pos,\n                  content: content\n                });\n              }\n\n              state = State.NORMAL;\n              break;\n            }\n\n          case State.TAG_START:\n            {\n              if (stream.eat(_constants.T_TAG_CLOSING)) {\n                states.isClosing = true;\n                state = State.TAG_NAME;\n              } else if (stream.match(_constants.P_LINE_BREAK)) {\n                state = State.NORMAL;\n              } else if (node.type !== _Node.NodeType.ENTITY && (states.unwrapped || stream.eat(_constants.P_LABEL_START))) {\n                state = State.LABEL_START;\n              } else {\n                var _child = _Node.default.create(_Node.NodeType.TAG, '', {\n                  start: start\n                });\n\n                if (states.embedded) {\n                  _child.states.embedded = true;\n                  _child.states.metaKey = states.key;\n                  states.embedded = false;\n                } else {\n                  node.appendChild(_child);\n                }\n\n                pushNode(_child);\n                state = State.TAG_NAME;\n              }\n\n              if (state === State.NORMAL || state === State.LABEL_START) {\n                stream.pushCursor(start);\n                var tagName = stream.sol(true) ? 'BLOCK' : 'INLINE';\n                stream.popCursor();\n\n                if (node.type === _Node.NodeType.PARAGRAPH && tagName === 'BLOCK') {\n                  popNode();\n                }\n\n                var _child2 = node.createChild(_Node.NodeType.TAG, tagName, {\n                  start: start,\n                  states: {\n                    simpleBlock: true,\n                    unwrapped: states.unwrapped\n                  }\n                });\n\n                states.unwrapped = false;\n                pushNode(_child2);\n              }\n\n              break;\n            }\n\n          case State.TAG_NAME:\n            {\n              var name = stream.match(_constants.P_TAG_NAME);\n\n              if (!name) {\n                throw createError('expected tag name');\n              }\n\n              states.inline = name === 'INLINE';\n\n              if (states.isClosing) {\n                if (node.type === _Node.NodeType.PARAGRAPH) {\n                  stream.pushCursor(start);\n                  popNode();\n                  stream.popCursor();\n                }\n\n                if (name !== node.name) {\n                  throw createError('unexpected closing tag');\n                }\n\n                var _ch = stream.eat(_constants.T_TAG_END);\n\n                if (!_ch) {\n                  throw createError('invalid closing tag');\n                }\n\n                if (!states.inline && !stream.eol()) {\n                  throw createError('closing block tag must take the whole line');\n                }\n\n                state = State.TAG_END;\n              } else {\n                node.name = name;\n\n                if (node.isWrappingTag) {\n                  stream.pushCursor(node.start || 0);\n\n                  if (node.name === 'BLOCK' && !stream.sol(true)) {\n                    throw createError('unexpected start of block inline');\n                  }\n\n                  stream.popCursor();\n\n                  if (node.isBlock) {\n                    levelUpBlock();\n                  }\n                }\n\n                state = State.ATTRIBUTE_LIST;\n              }\n\n              break;\n            }\n\n          case State.ATTRIBUTE_LIST:\n            {\n              var spacePattern = node.states.simpleBlock || node.states.unwrapped ? _constants.P_WHITE_SPACE : _constants.P_WHITE_SPACES_EXT;\n              var spaces = stream.eatWhile(spacePattern);\n              var isParsingMetadata = node.states.metadata;\n\n              if (isParsingMetadata) {\n                var endOfFrontMatter = false;\n\n                if (stream.match(_constants.T_METADATA_MARKER)) {\n                  if (!stream.match(_constants.P_LINE_BREAK)) {\n                    throw createError('expected new line after metadata closed');\n                  }\n\n                  endOfFrontMatter = true;\n                }\n\n                var lineBreaks = countLineBreaks(spaces);\n\n                if (lineBreaks > 1) {\n                  endOfFrontMatter = true;\n                }\n\n                if (endOfFrontMatter) {\n                  state = State.NORMAL;\n                  node.states.metadata = false;\n                  break;\n                } // deal with simple block at the beginning\n\n\n                if (node.type === _Node.NodeType.ROOT && !stream.match(_constants.P_ATTRIBUTE_LIST, {\n                  consume: false\n                }) && lineBreaks === 1) {\n                  var _child3 = node.createChild(_Node.NodeType.TAG, 'BLOCK', {\n                    labels: node.labels,\n                    states: {\n                      unwrapped: true\n                    },\n                    metadata: node.metadata\n                  });\n\n                  node.clearLabels();\n                  node.clearMetadata();\n                  pushNode(_child3);\n                  state = State.NORMAL;\n                  break;\n                }\n              }\n\n              if (stream.match(_constants.P_LINE_BREAK)) {\n                state = State.NORMAL;\n              } else if (stream.eat(_constants.T_TAG_END)) {\n                state = State.TAG_END;\n              } else if (stream.match(_constants.P_LABEL_START)) {\n                state = State.LABEL_START;\n              } else {\n                if (!(spaces || isParsingMetadata) && this.stream.pos > 1) {\n                  if (_.isEmpty(node.attributes) && _constants.P_ATTRIBUTE_ASSIGN.test(stream.peek())) {\n                    states.key = node.name;\n                    node.name = 'BLOCK';\n                    node.states.simpleBlock = true;\n                    levelUpBlock();\n                    state = State.ATTRIBUTE_ASSIGN;\n                    break;\n                  } else {\n                    throw createError('expecting end of tag \"}\" or attribute list');\n                  }\n                }\n\n                state = State.ATTRIBUTE_NAME;\n\n                if (stream.match(_constants.P_ATTRIBUTE_LIST, {\n                  consume: false\n                })) {\n                  state = State.ATTRIBUTE_NAME;\n                } else {\n                  state = State.NORMAL;\n                }\n              }\n\n              break;\n            }\n\n          case State.ATTRIBUTE_NAME:\n            {\n              var _key = stream.match(_constants.P_ATTRIBUTE_NAME);\n\n              if (!_key) {\n                throw createError('expecting attribute name');\n              }\n\n              states.key = _key;\n              state = State.ATTRIBUTE_ASSIGN;\n              break;\n            }\n\n          case State.ATTRIBUTE_ASSIGN:\n            {\n              var _ch2 = stream.peek();\n\n              if (_ch2 === _constants.T_TAG_END) {\n                state = State.ATTRIBUTE_FINISH;\n              } else {\n                _ch2 = stream.eat(_constants.P_ATTRIBUTE_ASSIGN);\n\n                if (!_ch2) {\n                  throw createError('expecting assignment \"=\" or \":\"');\n                }\n\n                if (_constants.P_ASSIGN_YAML.test(_ch2)) {\n                  stream.eatSpaces();\n                }\n\n                state = State.ATTRIBUTE_VALUE;\n              }\n\n              break;\n            }\n\n          case State.ATTRIBUTE_VALUE:\n            {\n              var _ch3 = stream.peek();\n\n              var _value = void 0;\n\n              if (_ch3 === _constants.T_TAG_START || _ch3 === _constants.T_ENTITY_START) {\n                states.embedded = true;\n                state = State.START;\n                break;\n              } else if (_ch3 === _constants.T_STRING_START) {\n                _value = stream.match(_constants.P_STRING_LITERAL_QUOTED);\n\n                try {\n                  _value = JSON.parse(_value);\n                } catch (e) {\n                  throw createError('invalid string literal');\n                }\n              } else if (stream.match(_constants.P_DATE_LITERAL)) {\n                _value = stream.lastMatch;\n                _value = new Date(_value);\n              } else if (_constants.P_NUMBER_START.test(_ch3)) {\n                _value = stream.match(_constants.P_NUMBER_LITERAL);\n                _value = parseFloat(_value);\n              } else if (stream.match(_constants.P_BOOLEAN_TRUE)) {\n                _value = true;\n              } else if (stream.match(_constants.P_BOOLEAN_FALSE)) {\n                _value = false;\n              } else {\n                _value = stream.match(_constants.P_STRING_LITERAL_UNQUOTED);\n\n                if (_.isNull(_value)) {\n                  throw createError('unrecognized attribute value');\n                }\n              }\n\n              if (_.isNull(_value)) {\n                throw createError('invalid attribute value');\n              }\n\n              states.value = _value;\n              state = State.ATTRIBUTE_FINISH;\n              break;\n            }\n\n          case State.ATTRIBUTE_FINISH:\n            {\n              var _key2 = states.key,\n                  _value2 = states.value;\n              states.key = undefined;\n              states.value = undefined;\n\n              if (_.isUndefined(_value2)) {\n                _value2 = true;\n              }\n\n              if (node.states.metadata) {\n                node.setMetadata(_key2, _value2);\n              } else {\n                node.setAttribute(_key2, _value2);\n              }\n\n              this.debug(\"# \".concat(node.states.metadata ? 'metadata' : 'attribute', \" \").concat(_key2, \"=\").concat(JSON.stringify(_value2)));\n              this.debug();\n              state = State.ATTRIBUTE_LIST;\n              break;\n            }\n\n          case State.TAG_END:\n            {\n              var parseMetadata = node.isBlockTag && !states.isClosing;\n              var tagNode = node;\n              states.inline = tagNode.isInlineBlock;\n\n              if (!node.isWrappingTag || states.isClosing) {\n                if (node.type === _Node.NodeType.PARAGRAPH) {\n                  popNode();\n                }\n\n                popNode();\n\n                if (node.type === _Node.NodeType.ENTITY) {\n                  // copy tag properties to entity and remove temporary tag node\n                  node.setAttributes(tagNode.attributes);\n                  node.name = tagNode.name;\n                  node.removeChild(tagNode);\n                  state = State.ENTITY_END;\n                  tagNode = node;\n                  popNode();\n                }\n\n                if (tagNode.states.embedded) {\n                  if (node.states.metadata) {\n                    node.setMetadata(tagNode.states.metaKey, tagNode);\n                  } else {\n                    node.setAttribute(tagNode.states.metaKey, tagNode);\n                  }\n                }\n              }\n\n              if (states.isClosing && !states.inline) {\n                stream.skipOver(_constants.P_LINE_BREAK);\n              }\n\n              states.isClosing = false;\n              states.inline = false;\n\n              if (parseMetadata) {\n                state = State.METADATA;\n              } else if (tagNode.states.embedded && (!tagNode.isWrappingTag || states.isClosing)) {\n                state = State.ATTRIBUTE_LIST;\n              } else {\n                state = State.NORMAL;\n              }\n\n              break;\n            }\n\n          case State.LABEL_START:\n            {\n              var label = stream.match(_constants.P_LABEL_NAME);\n\n              if (!label) {\n                throw createError('expected label name');\n              }\n\n              node.addLabel(label);\n              state = State.ATTRIBUTE_LIST;\n              break;\n            }\n\n          case State.ENTITY_START:\n            {\n              var _child4 = _Node.default.create(_Node.NodeType.ENTITY, '', {\n                start: start\n              });\n\n              if (states.embedded) {\n                _child4.states.embedded = true;\n                _child4.states.metaKey = states.key;\n                states.embedded = false;\n              } else {\n                node.appendChild(_child4);\n              }\n\n              pushNode(_child4);\n              state = State.ENTITY_BODY;\n              break;\n            }\n\n          case State.ENTITY_BODY:\n            {\n              start = stream.pos;\n\n              var _text2 = stream.readTo(_constants.T_ENTITY_END, {\n                skipMatched: true\n              });\n\n              if (!_text2) {\n                throw createError('empty entity');\n              } else if (_text2.search(_constants.P_LINE_BREAK) !== -1) {\n                throw createError('unexpected line break of entity');\n              }\n\n              node.appendText(_text2, {\n                start: start,\n                end: start + _text2.length\n              });\n\n              var _ch4 = stream.eat(_constants.T_TAG_START);\n\n              if (_ch4) {\n                state = State.TAG_START;\n              } else {\n                state = State.ENTITY_END;\n              }\n\n              break;\n            }\n\n          case State.ENTITY_END:\n            {\n              popNode();\n              state = State.NORMAL;\n              break;\n            }\n\n          case State.END:\n            {\n              if (node.type !== _Node.NodeType.ROOT) {\n                popNode();\n              }\n\n              state = State.FINISH;\n              break;\n            }\n\n          case State.FINISH:\n            {\n              break;\n            }\n        }\n      }\n\n      root.toString();\n      this.parsed = true;\n      this.debug('parsed result:');\n      this.debug(JSON.stringify(root.toJSON(), null, 2));\n      return root;\n    }\n  }]);\n  return Tokenizer;\n}();\n\nvar _default = Tokenizer;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n/**\n * Class holding text line data\n */\n\n\nvar TextLine =\n/*#__PURE__*/\nfunction () {\n  function TextLine(lines, text, ln, offset) {\n    (0, _classCallCheck2.default)(this, TextLine);\n    (0, _defineProperty2.default)(this, \"lines\", void 0);\n    (0, _defineProperty2.default)(this, \"text\", void 0);\n    (0, _defineProperty2.default)(this, \"ln\", void 0);\n    (0, _defineProperty2.default)(this, \"offset\", void 0);\n    this.lines = lines;\n    this.text = text;\n    this.ln = ln;\n    this.offset = offset;\n  }\n  /**\n   * Get the previous line\n   */\n\n\n  (0, _createClass2.default)(TextLine, [{\n    key: \"prev\",\n    value: function prev() {\n      return this.lines[this.ln - 2];\n    }\n    /**\n     * Get the next line\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      return this.lines[this.ln];\n    }\n    /**\n     * Get text length of the line\n     */\n\n  }, {\n    key: \"toJSON\",\n\n    /**\n     * Convert to JSON serializable object\n     */\n    value: function toJSON() {\n      return {\n        ln: this.ln,\n        start: this.start,\n        end: this.end,\n        text: this.text\n      };\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.text.length;\n    }\n    /**\n     * Start position of the line, alias of `offset`\n     */\n\n  }, {\n    key: \"start\",\n    get: function get() {\n      return this.offset;\n    }\n    /**\n     * End position of the line\n     */\n\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.offset + this.text.length;\n    }\n  }]);\n  return TextLine;\n}();\n\nvar _default = TextLine;\nexports.default = _default;"],"sourceRoot":""}